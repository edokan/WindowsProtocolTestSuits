// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.Nrpc {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Test_LocateDc_DsrGetDcName : PtfTestClassBase {
        
        public Test_LocateDc_DsrGetDcName() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetPlatformDelegate1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetPlatformInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter), "GetPlatform", typeof(Microsoft.Protocols.TestSuites.Nrpc.PlatformType).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter INrpcServerAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.INrpcServerAdapterInstance = ((Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS0() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp0;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp0);
            this.Manager.AddReturn(GetPlatformInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS0GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS0GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS0GetPlatformChecker2)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S678\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,NonNull,0)\'" +
                        "");
                temp1 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(1)), 0u);
                this.Manager.Comment("reaching state \'S1695\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1, "return of DsrGetDcName, state S1695");
                this.Manager.Comment("reaching state \'S2712\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp2 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R104876");
                this.Manager.Comment("reaching state \'S3576\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2, "return of DsrGetDcName, state S3576");
                this.Manager.Comment("reaching state \'S3582\'");
                goto label0;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S679\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp3;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,NonNull,0)\'" +
                        "");
                temp3 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(1)), 0u);
                this.Manager.Comment("reaching state \'S1696\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp3, "return of DsrGetDcName, state S1696");
                this.Manager.Comment("reaching state \'S2713\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp4;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp4 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R104876");
                this.Manager.Comment("reaching state \'S3577\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp4, "return of DsrGetDcName, state S3577");
                this.Manager.Comment("reaching state \'S3583\'");
                goto label0;
            }
            if ((temp7 == 2)) {
                this.Manager.Comment("reaching state \'S680\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp5;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,NonNull,0)\'" +
                        "");
                temp5 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(1)), 0u);
                this.Manager.Comment("reaching state \'S1697\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp5, "return of DsrGetDcName, state S1697");
                this.Manager.Comment("reaching state \'S2714\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp6;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp6 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R104876");
                this.Manager.Comment("reaching state \'S3578\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp6, "return of DsrGetDcName, state S3578");
                this.Manager.Comment("reaching state \'S3584\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS0GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_LocateDc_DsrGetDcNameS0GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_LocateDc_DsrGetDcNameS0GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS10() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS10");
            this.Manager.Comment("reaching state \'S10\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp8;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp8);
            this.Manager.AddReturn(GetPlatformInfo, null, temp8);
            this.Manager.Comment("reaching state \'S11\'");
            int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS10GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS10GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS10GetPlatformChecker2)));
            if ((temp12 == 0)) {
                this.Manager.Comment("reaching state \'S693\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp9;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",0)\'");
                temp9 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1710\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp9, "return of DsrGetDcNameEx2, state S1710");
                this.Manager.Comment("reaching state \'S2727\'");
                goto label1;
            }
            if ((temp12 == 1)) {
                this.Manager.Comment("reaching state \'S694\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp10;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",0)\'");
                temp10 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1711\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp10, "return of DsrGetDcNameEx2, state S1711");
                this.Manager.Comment("reaching state \'S2728\'");
                goto label1;
            }
            if ((temp12 == 2)) {
                this.Manager.Comment("reaching state \'S695\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp11;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp11 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1712\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp11, "return of DsrGetDcNameEx2, state S1712");
                this.Manager.Comment("reaching state \'S2729\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS10GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_LocateDc_DsrGetDcNameS10GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_LocateDc_DsrGetDcNameS10GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS100() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS100");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp13;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp13);
            this.Manager.AddReturn(GetPlatformInfo, null, temp13);
            this.Manager.Comment("reaching state \'S101\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS100GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS100GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS100GetPlatformChecker2)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S828\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp14;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,196608)\'");
                temp14 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104881");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1845\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp14, "return of DsrGetDcNameEx2, state S1845");
                this.Manager.Comment("reaching state \'S2862\'");
                goto label2;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S829\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp15;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2)\'");
                temp15 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2u);
                this.Manager.Checkpoint("MS-NRPC_R2080");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1846\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp15, "return of DsrGetDcNameEx2, state S1846");
                this.Manager.Comment("reaching state \'S2863\'");
                goto label2;
            }
            if ((temp17 == 2)) {
                this.Manager.Comment("reaching state \'S830\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp16;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp16 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1847\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp16, "return of DsrGetDcNameEx2, state S1847");
                this.Manager.Comment("reaching state \'S2864\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS100GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_LocateDc_DsrGetDcNameS100GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_LocateDc_DsrGetDcNameS100GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS102() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS102");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp18;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp18);
            this.Manager.AddReturn(GetPlatformInfo, null, temp18);
            this.Manager.Comment("reaching state \'S103\'");
            int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS102GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS102GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS102GetPlatformChecker2)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S831\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp19;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32768)\'");
                temp19 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32768u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1848\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp19, "return of DsrGetDcNameEx2, state S1848");
                this.Manager.Comment("reaching state \'S2865\'");
                goto label3;
            }
            if ((temp22 == 1)) {
                this.Manager.Comment("reaching state \'S832\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp20;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,524288)\'");
                temp20 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 524288u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1849\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp20, "return of DsrGetDcNameEx2, state S1849");
                this.Manager.Comment("reaching state \'S2866\'");
                goto label3;
            }
            if ((temp22 == 2)) {
                this.Manager.Comment("reaching state \'S833\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp21;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp21 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1850\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp21, "return of DsrGetDcNameEx2, state S1850");
                this.Manager.Comment("reaching state \'S2867\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS102GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_LocateDc_DsrGetDcNameS102GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_LocateDc_DsrGetDcNameS102GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS104() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS104");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp23;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp23);
            this.Manager.AddReturn(GetPlatformInfo, null, temp23);
            this.Manager.Comment("reaching state \'S105\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS104GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS104GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS104GetPlatformChecker2)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S834\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp24;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,16384)\'");
                temp24 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16384u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1851\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp24, "return of DsrGetDcNameEx2, state S1851");
                this.Manager.Comment("reaching state \'S2868\'");
                goto label4;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S835\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp25;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,262144)\'");
                temp25 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 262144u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1852\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp25, "return of DsrGetDcNameEx2, state S1852");
                this.Manager.Comment("reaching state \'S2869\'");
                goto label4;
            }
            if ((temp27 == 2)) {
                this.Manager.Comment("reaching state \'S836\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp26;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp26 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1853\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp26, "return of DsrGetDcNameEx2, state S1853");
                this.Manager.Comment("reaching state \'S2870\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS104GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_LocateDc_DsrGetDcNameS104GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_LocateDc_DsrGetDcNameS104GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS106() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS106");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp28;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp28);
            this.Manager.AddReturn(GetPlatformInfo, null, temp28);
            this.Manager.Comment("reaching state \'S107\'");
            int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS106GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS106GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS106GetPlatformChecker2)));
            if ((temp32 == 0)) {
                this.Manager.Comment("reaching state \'S837\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp29;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1073741824)\'");
                temp29 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1073741824u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1854\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp29, "return of DsrGetDcNameEx2, state S1854");
                this.Manager.Comment("reaching state \'S2871\'");
                goto label5;
            }
            if ((temp32 == 1)) {
                this.Manager.Comment("reaching state \'S838\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp30;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,196608)\'");
                temp30 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104881");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1855\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp30, "return of DsrGetDcNameEx2, state S1855");
                this.Manager.Comment("reaching state \'S2872\'");
                goto label5;
            }
            if ((temp32 == 2)) {
                this.Manager.Comment("reaching state \'S839\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp31;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp31 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1856\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp31, "return of DsrGetDcNameEx2, state S1856");
                this.Manager.Comment("reaching state \'S2873\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS106GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_LocateDc_DsrGetDcNameS106GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_LocateDc_DsrGetDcNameS106GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS108() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS108");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp33;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp33);
            this.Manager.AddReturn(GetPlatformInfo, null, temp33);
            this.Manager.Comment("reaching state \'S109\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS108GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS108GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS108GetPlatformChecker2)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S840\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp34;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,512)\'");
                temp34 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 512u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1857\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp34, "return of DsrGetDcNameEx2, state S1857");
                this.Manager.Comment("reaching state \'S2874\'");
                goto label6;
            }
            if ((temp37 == 1)) {
                this.Manager.Comment("reaching state \'S841\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp35;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,3221225472)\'");
                temp35 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104882");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1858\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp35, "return of DsrGetDcNameEx2, state S1858");
                this.Manager.Comment("reaching state \'S2875\'");
                goto label6;
            }
            if ((temp37 == 2)) {
                this.Manager.Comment("reaching state \'S842\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp36;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp36 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1859\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp36, "return of DsrGetDcNameEx2, state S1859");
                this.Manager.Comment("reaching state \'S2876\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS108GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_LocateDc_DsrGetDcNameS108GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_LocateDc_DsrGetDcNameS108GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS110() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS110");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp38;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp38);
            this.Manager.AddReturn(GetPlatformInfo, null, temp38);
            this.Manager.Comment("reaching state \'S111\'");
            int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS110GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS110GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS110GetPlatformChecker2)));
            if ((temp42 == 0)) {
                this.Manager.Comment("reaching state \'S843\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp39;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1024)\'");
                temp39 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1024u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1860\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp39, "return of DsrGetDcNameEx2, state S1860");
                this.Manager.Comment("reaching state \'S2877\'");
                goto label7;
            }
            if ((temp42 == 1)) {
                this.Manager.Comment("reaching state \'S844\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp40;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,8192)\'");
                temp40 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 8192u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1861\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp40, "return of DsrGetDcNameEx2, state S1861");
                this.Manager.Comment("reaching state \'S2878\'");
                goto label7;
            }
            if ((temp42 == 2)) {
                this.Manager.Comment("reaching state \'S845\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp41;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp41 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1862\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp41, "return of DsrGetDcNameEx2, state S1862");
                this.Manager.Comment("reaching state \'S2879\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS110GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_LocateDc_DsrGetDcNameS110GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_LocateDc_DsrGetDcNameS110GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS112() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS112");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp43;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp43);
            this.Manager.AddReturn(GetPlatformInfo, null, temp43);
            this.Manager.Comment("reaching state \'S113\'");
            int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS112GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS112GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS112GetPlatformChecker2)));
            if ((temp47 == 0)) {
                this.Manager.Comment("reaching state \'S846\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp44;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2147483648)\'");
                temp44 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2147483648u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1863\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp44, "return of DsrGetDcNameEx2, state S1863");
                this.Manager.Comment("reaching state \'S2880\'");
                goto label8;
            }
            if ((temp47 == 1)) {
                this.Manager.Comment("reaching state \'S847\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp45;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32768)\'");
                temp45 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32768u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1864\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp45, "return of DsrGetDcNameEx2, state S1864");
                this.Manager.Comment("reaching state \'S2881\'");
                goto label8;
            }
            if ((temp47 == 2)) {
                this.Manager.Comment("reaching state \'S848\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp46;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp46 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1865\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp46, "return of DsrGetDcNameEx2, state S1865");
                this.Manager.Comment("reaching state \'S2882\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS112GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_LocateDc_DsrGetDcNameS112GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_LocateDc_DsrGetDcNameS112GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS114() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS114");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp48;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp48);
            this.Manager.AddReturn(GetPlatformInfo, null, temp48);
            this.Manager.Comment("reaching state \'S115\'");
            int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS114GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS114GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS114GetPlatformChecker2)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S849\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp49;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,128)\'");
                temp49 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 128u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1866\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp49, "return of DsrGetDcNameEx2, state S1866");
                this.Manager.Comment("reaching state \'S2883\'");
                goto label9;
            }
            if ((temp52 == 1)) {
                this.Manager.Comment("reaching state \'S850\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp50;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,192)\'");
                temp50 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104879");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1867\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp50, "return of DsrGetDcNameEx2, state S1867");
                this.Manager.Comment("reaching state \'S2884\'");
                goto label9;
            }
            if ((temp52 == 2)) {
                this.Manager.Comment("reaching state \'S851\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp51;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp51 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1868\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp51, "return of DsrGetDcNameEx2, state S1868");
                this.Manager.Comment("reaching state \'S2885\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS114GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_LocateDc_DsrGetDcNameS114GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_LocateDc_DsrGetDcNameS114GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS116() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS116");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp53;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp53);
            this.Manager.AddReturn(GetPlatformInfo, null, temp53);
            this.Manager.Comment("reaching state \'S117\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS116GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS116GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS116GetPlatformChecker2)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S852\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp54;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,131072)\'");
                temp54 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1869\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp54, "return of DsrGetDcNameEx2, state S1869");
                this.Manager.Comment("reaching state \'S2886\'");
                goto label10;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S853\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp55;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32832)\'");
                temp55 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32832u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1870\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp55, "return of DsrGetDcNameEx2, state S1870");
                this.Manager.Comment("reaching state \'S2887\'");
                goto label10;
            }
            if ((temp57 == 2)) {
                this.Manager.Comment("reaching state \'S854\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp56;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp56 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1871\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp56, "return of DsrGetDcNameEx2, state S1871");
                this.Manager.Comment("reaching state \'S2888\'");
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS116GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_LocateDc_DsrGetDcNameS116GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_LocateDc_DsrGetDcNameS116GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS118() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS118");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp58;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp58);
            this.Manager.AddReturn(GetPlatformInfo, null, temp58);
            this.Manager.Comment("reaching state \'S119\'");
            int temp62 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS118GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS118GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS118GetPlatformChecker2)));
            if ((temp62 == 0)) {
                this.Manager.Comment("reaching state \'S855\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp59;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,131072)\'");
                temp59 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1872\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp59, "return of DsrGetDcNameEx2, state S1872");
                this.Manager.Comment("reaching state \'S2889\'");
                goto label11;
            }
            if ((temp62 == 1)) {
                this.Manager.Comment("reaching state \'S856\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp60;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,131072)\'");
                temp60 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1873\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp60, "return of DsrGetDcNameEx2, state S1873");
                this.Manager.Comment("reaching state \'S2890\'");
                goto label11;
            }
            if ((temp62 == 2)) {
                this.Manager.Comment("reaching state \'S857\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp61;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp61 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1874\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp61, "return of DsrGetDcNameEx2, state S1874");
                this.Manager.Comment("reaching state \'S2891\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS118GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_LocateDc_DsrGetDcNameS118GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_LocateDc_DsrGetDcNameS118GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS12() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS12");
            this.Manager.Comment("reaching state \'S12\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp63;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp63);
            this.Manager.AddReturn(GetPlatformInfo, null, temp63);
            this.Manager.Comment("reaching state \'S13\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS12GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS12GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS12GetPlatformChecker2)));
            if ((temp67 == 0)) {
                this.Manager.Comment("reaching state \'S696\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp64;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",64)\'");
                temp64 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1713\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp64, "return of DsrGetDcNameEx2, state S1713");
                this.Manager.Comment("reaching state \'S2730\'");
                goto label12;
            }
            if ((temp67 == 1)) {
                this.Manager.Comment("reaching state \'S697\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp65;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",64)\'");
                temp65 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1714\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp65, "return of DsrGetDcNameEx2, state S1714");
                this.Manager.Comment("reaching state \'S2731\'");
                goto label12;
            }
            if ((temp67 == 2)) {
                this.Manager.Comment("reaching state \'S698\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp66;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp66 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1715\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp66, "return of DsrGetDcNameEx2, state S1715");
                this.Manager.Comment("reaching state \'S2732\'");
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS12GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_LocateDc_DsrGetDcNameS12GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_LocateDc_DsrGetDcNameS12GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS120() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS120");
            this.Manager.Comment("reaching state \'S120\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp68;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp68);
            this.Manager.AddReturn(GetPlatformInfo, null, temp68);
            this.Manager.Comment("reaching state \'S121\'");
            int temp72 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS120GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS120GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS120GetPlatformChecker2)));
            if ((temp72 == 0)) {
                this.Manager.Comment("reaching state \'S858\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp69;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",131072)\'");
                temp69 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1875\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp69, "return of DsrGetDcNameEx2, state S1875");
                this.Manager.Comment("reaching state \'S2892\'");
                goto label13;
            }
            if ((temp72 == 1)) {
                this.Manager.Comment("reaching state \'S859\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp70;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,131072)\'");
                temp70 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1876\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp70, "return of DsrGetDcNameEx2, state S1876");
                this.Manager.Comment("reaching state \'S2893\'");
                goto label13;
            }
            if ((temp72 == 2)) {
                this.Manager.Comment("reaching state \'S860\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp71;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp71 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1877\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp71, "return of DsrGetDcNameEx2, state S1877");
                this.Manager.Comment("reaching state \'S2894\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS120GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_LocateDc_DsrGetDcNameS120GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_LocateDc_DsrGetDcNameS120GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS122() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS122");
            this.Manager.Comment("reaching state \'S122\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp73;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp73);
            this.Manager.AddReturn(GetPlatformInfo, null, temp73);
            this.Manager.Comment("reaching state \'S123\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS122GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS122GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS122GetPlatformChecker2)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S861\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp74;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,131072)\'");
                temp74 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1878\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp74, "return of DsrGetDcNameEx2, state S1878");
                this.Manager.Comment("reaching state \'S2895\'");
                goto label14;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S862\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp75;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",131072)\'");
                temp75 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1879\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp75, "return of DsrGetDcNameEx2, state S1879");
                this.Manager.Comment("reaching state \'S2896\'");
                goto label14;
            }
            if ((temp77 == 2)) {
                this.Manager.Comment("reaching state \'S863\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp76;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp76 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1880\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp76, "return of DsrGetDcNameEx2, state S1880");
                this.Manager.Comment("reaching state \'S2897\'");
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS122GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_LocateDc_DsrGetDcNameS122GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_LocateDc_DsrGetDcNameS122GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS124() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS124");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp78;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp78);
            this.Manager.AddReturn(GetPlatformInfo, null, temp78);
            this.Manager.Comment("reaching state \'S125\'");
            int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS124GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS124GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS124GetPlatformChecker2)));
            if ((temp82 == 0)) {
                this.Manager.Comment("reaching state \'S864\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp79;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,131072)\'");
                temp79 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1881\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp79, "return of DsrGetDcNameEx2, state S1881");
                this.Manager.Comment("reaching state \'S2898\'");
                goto label15;
            }
            if ((temp82 == 1)) {
                this.Manager.Comment("reaching state \'S865\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp80;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,131072)\'");
                temp80 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1882\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp80, "return of DsrGetDcNameEx2, state S1882");
                this.Manager.Comment("reaching state \'S2899\'");
                goto label15;
            }
            if ((temp82 == 2)) {
                this.Manager.Comment("reaching state \'S866\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp81;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp81 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1883\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp81, "return of DsrGetDcNameEx2, state S1883");
                this.Manager.Comment("reaching state \'S2900\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS124GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_LocateDc_DsrGetDcNameS124GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_LocateDc_DsrGetDcNameS124GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS126() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS126");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp83;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp83);
            this.Manager.AddReturn(GetPlatformInfo, null, temp83);
            this.Manager.Comment("reaching state \'S127\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS126GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS126GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS126GetPlatformChecker2)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S867\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp84;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,NormalDomainUserAccount,512,FqdnFo" +
                        "rmatDomainName,Null,Null,0)\'");
                temp84 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.NormalDomainUserAccount, 512u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1884\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp84, "return of DsrGetDcNameEx2, state S1884");
                this.Manager.Comment("reaching state \'S2901\'");
                goto label16;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S868\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp85;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,131072)\'");
                temp85 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1885\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp85, "return of DsrGetDcNameEx2, state S1885");
                this.Manager.Comment("reaching state \'S2902\'");
                goto label16;
            }
            if ((temp87 == 2)) {
                this.Manager.Comment("reaching state \'S869\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp86;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp86 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1886\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp86, "return of DsrGetDcNameEx2, state S1886");
                this.Manager.Comment("reaching state \'S2903\'");
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS126GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_LocateDc_DsrGetDcNameS126GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_LocateDc_DsrGetDcNameS126GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS128() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS128");
            this.Manager.Comment("reaching state \'S128\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp88;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp88);
            this.Manager.AddReturn(GetPlatformInfo, null, temp88);
            this.Manager.Comment("reaching state \'S129\'");
            int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS128GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS128GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS128GetPlatformChecker2)));
            if ((temp92 == 0)) {
                this.Manager.Comment("reaching state \'S870\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp89;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,DomainMemberComputerAccount,4096,F" +
                        "qdnFormatDomainName,Null,Null,0)\'");
                temp89 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.DomainMemberComputerAccount, 4096u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1887\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp89, "return of DsrGetDcNameEx2, state S1887");
                this.Manager.Comment("reaching state \'S2904\'");
                goto label17;
            }
            if ((temp92 == 1)) {
                this.Manager.Comment("reaching state \'S871\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp90;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,NormalDomainUserAccount,512,FqdnFo" +
                        "rmatDomainName,Null,Null,0)\'");
                temp90 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.NormalDomainUserAccount, 512u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1888\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp90, "return of DsrGetDcNameEx2, state S1888");
                this.Manager.Comment("reaching state \'S2905\'");
                goto label17;
            }
            if ((temp92 == 2)) {
                this.Manager.Comment("reaching state \'S872\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp91;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp91 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1889\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp91, "return of DsrGetDcNameEx2, state S1889");
                this.Manager.Comment("reaching state \'S2906\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS128GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_LocateDc_DsrGetDcNameS128GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_LocateDc_DsrGetDcNameS128GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS130() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS130");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp93;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp93);
            this.Manager.AddReturn(GetPlatformInfo, null, temp93);
            this.Manager.Comment("reaching state \'S131\'");
            int temp98 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS130GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS130GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS130GetPlatformChecker2)));
            if ((temp98 == 0)) {
                this.Manager.Comment("reaching state \'S873\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp94;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,2147483648,FqdnFormatDomainNa" +
                        "me,Null,Null,0)\'");
                temp94 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 2147483648u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1890\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp94, "return of DsrGetDcNameEx2, state S1890");
                this.Manager.Comment("reaching state \'S2907\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp95;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,0)\'");
                temp95 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Checkpoint("MS-NRPC_R103114");
                this.Manager.Comment("reaching state \'S3579\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp95, "return of DsrGetDcNameEx2, state S3579");
                this.Manager.Comment("reaching state \'S3585\'");
                goto label18;
            }
            if ((temp98 == 1)) {
                this.Manager.Comment("reaching state \'S874\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp96;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,DomainMemberComputerAccount,4096,F" +
                        "qdnFormatDomainName,Null,Null,0)\'");
                temp96 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.DomainMemberComputerAccount, 4096u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1891\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp96, "return of DsrGetDcNameEx2, state S1891");
                this.Manager.Comment("reaching state \'S2908\'");
                goto label18;
            }
            if ((temp98 == 2)) {
                this.Manager.Comment("reaching state \'S875\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp97;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp97 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1892\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp97, "return of DsrGetDcNameEx2, state S1892");
                this.Manager.Comment("reaching state \'S2909\'");
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS130GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_LocateDc_DsrGetDcNameS130GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_LocateDc_DsrGetDcNameS130GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS132() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS132");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp99;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp99);
            this.Manager.AddReturn(GetPlatformInfo, null, temp99);
            this.Manager.Comment("reaching state \'S133\'");
            int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS132GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS132GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS132GetPlatformChecker2)));
            if ((temp104 == 0)) {
                this.Manager.Comment("reaching state \'S876\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp100;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(NonDcServer,FqdnFormatDomainName,PrimaryDomai" +
                        "nGuid,Null,0)\'");
                temp100 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1893\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp100, "return of DsrGetDcNameEx, state S1893");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label19;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S877\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp101;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,2147483648,FqdnFormatDomainNa" +
                        "me,Null,Null,0)\'");
                temp101 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 2147483648u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1894\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp101, "return of DsrGetDcNameEx2, state S1894");
                this.Manager.Comment("reaching state \'S2911\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp102;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,0)\'");
                temp102 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Checkpoint("MS-NRPC_R103114");
                this.Manager.Comment("reaching state \'S3580\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp102, "return of DsrGetDcNameEx2, state S3580");
                this.Manager.Comment("reaching state \'S3586\'");
                goto label19;
            }
            if ((temp104 == 2)) {
                this.Manager.Comment("reaching state \'S878\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp103;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp103 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1895\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp103, "return of DsrGetDcNameEx2, state S1895");
                this.Manager.Comment("reaching state \'S2912\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS132GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_LocateDc_DsrGetDcNameS2910() {
            this.Manager.Comment("reaching state \'S2910\'");
        }
        
        private void Test_LocateDc_DsrGetDcNameS132GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_LocateDc_DsrGetDcNameS132GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS134() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS134");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp105;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp105);
            this.Manager.AddReturn(GetPlatformInfo, null, temp105);
            this.Manager.Comment("reaching state \'S135\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS134GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS134GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS134GetPlatformChecker2)));
            if ((temp109 == 0)) {
                this.Manager.Comment("reaching state \'S879\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp106;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,0)\'");
                temp106 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1896\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp106, "return of DsrGetDcNameEx, state S1896");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label20;
            }
            if ((temp109 == 1)) {
                this.Manager.Comment("reaching state \'S880\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp107;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(NonDcServer,FqdnFormatDomainName,PrimaryDomai" +
                        "nGuid,Null,0)\'");
                temp107 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1897\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp107, "return of DsrGetDcNameEx, state S1897");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label20;
            }
            if ((temp109 == 2)) {
                this.Manager.Comment("reaching state \'S881\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp108;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp108 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1898\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp108, "return of DsrGetDcNameEx2, state S1898");
                this.Manager.Comment("reaching state \'S2914\'");
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS134GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_LocateDc_DsrGetDcNameS134GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_LocateDc_DsrGetDcNameS2913() {
            this.Manager.Comment("reaching state \'S2913\'");
        }
        
        private void Test_LocateDc_DsrGetDcNameS134GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS136() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS136");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp110;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp110);
            this.Manager.AddReturn(GetPlatformInfo, null, temp110);
            this.Manager.Comment("reaching state \'S137\'");
            int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS136GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS136GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS136GetPlatformChecker2)));
            if ((temp114 == 0)) {
                this.Manager.Comment("reaching state \'S882\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp111;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,64)\'");
                temp111 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1899\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp111, "return of DsrGetDcNameEx, state S1899");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label21;
            }
            if ((temp114 == 1)) {
                this.Manager.Comment("reaching state \'S883\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp112;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,0)\'");
                temp112 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1900\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp112, "return of DsrGetDcNameEx, state S1900");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label21;
            }
            if ((temp114 == 2)) {
                this.Manager.Comment("reaching state \'S884\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp113;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp113 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1901\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp113, "return of DsrGetDcNameEx2, state S1901");
                this.Manager.Comment("reaching state \'S2915\'");
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS136GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_LocateDc_DsrGetDcNameS136GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_LocateDc_DsrGetDcNameS136GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS138() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS138");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp115;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp115);
            this.Manager.AddReturn(GetPlatformInfo, null, temp115);
            this.Manager.Comment("reaching state \'S139\'");
            int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS138GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS138GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS138GetPlatformChecker2)));
            if ((temp119 == 0)) {
                this.Manager.Comment("reaching state \'S885\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp116;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,PrimaryDomainG" +
                        "uid,Null,0)\'");
                temp116 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1902\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp116, "return of DsrGetDcNameEx, state S1902");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label22;
            }
            if ((temp119 == 1)) {
                this.Manager.Comment("reaching state \'S886\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp117;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,64)\'");
                temp117 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1903\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp117, "return of DsrGetDcNameEx, state S1903");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label22;
            }
            if ((temp119 == 2)) {
                this.Manager.Comment("reaching state \'S887\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp118;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp118 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1904\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp118, "return of DsrGetDcNameEx2, state S1904");
                this.Manager.Comment("reaching state \'S2916\'");
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS138GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_LocateDc_DsrGetDcNameS138GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_LocateDc_DsrGetDcNameS138GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS14() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS14");
            this.Manager.Comment("reaching state \'S14\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp120;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp120);
            this.Manager.AddReturn(GetPlatformInfo, null, temp120);
            this.Manager.Comment("reaching state \'S15\'");
            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS14GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS14GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS14GetPlatformChecker2)));
            if ((temp124 == 0)) {
                this.Manager.Comment("reaching state \'S699\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp121;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,0)\'");
                temp121 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1716\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp121, "return of DsrGetDcNameEx2, state S1716");
                this.Manager.Comment("reaching state \'S2733\'");
                goto label23;
            }
            if ((temp124 == 1)) {
                this.Manager.Comment("reaching state \'S700\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp122;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,0)\'");
                temp122 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1717\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp122, "return of DsrGetDcNameEx2, state S1717");
                this.Manager.Comment("reaching state \'S2734\'");
                goto label23;
            }
            if ((temp124 == 2)) {
                this.Manager.Comment("reaching state \'S701\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp123;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp123 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1718\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp123, "return of DsrGetDcNameEx2, state S1718");
                this.Manager.Comment("reaching state \'S2735\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS14GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_LocateDc_DsrGetDcNameS14GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_LocateDc_DsrGetDcNameS14GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS140() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS140");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp125;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp125);
            this.Manager.AddReturn(GetPlatformInfo, null, temp125);
            this.Manager.Comment("reaching state \'S141\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS140GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS140GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS140GetPlatformChecker2)));
            if ((temp129 == 0)) {
                this.Manager.Comment("reaching state \'S888\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp126;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,SiteNameO" +
                        "ne,0)\'");
                temp126 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), Microsoft.Protocols.TestSuites.Nrpc.SiteNameType.SiteNameOne, 0u);
                this.Manager.Comment("reaching state \'S1905\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp126, "return of DsrGetDcNameEx, state S1905");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label24;
            }
            if ((temp129 == 1)) {
                this.Manager.Comment("reaching state \'S889\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp127;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,PrimaryDomainG" +
                        "uid,Null,0)\'");
                temp127 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1906\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp127, "return of DsrGetDcNameEx, state S1906");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label24;
            }
            if ((temp129 == 2)) {
                this.Manager.Comment("reaching state \'S890\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp128;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp128 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1907\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp128, "return of DsrGetDcNameEx2, state S1907");
                this.Manager.Comment("reaching state \'S2917\'");
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS140GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_LocateDc_DsrGetDcNameS140GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_LocateDc_DsrGetDcNameS140GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS142() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS142");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp130;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp130);
            this.Manager.AddReturn(GetPlatformInfo, null, temp130);
            this.Manager.Comment("reaching state \'S143\'");
            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS142GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS142GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS142GetPlatformChecker2)));
            if ((temp134 == 0)) {
                this.Manager.Comment("reaching state \'S891\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp131;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,InvalidSi" +
                        "teName,0)\'");
                temp131 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(1)), 0u);
                this.Manager.Comment("reaching state \'S1908\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp131, "return of DsrGetDcNameEx, state S1908");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label25;
            }
            if ((temp134 == 1)) {
                this.Manager.Comment("reaching state \'S892\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp132;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,SiteNameO" +
                        "ne,0)\'");
                temp132 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), Microsoft.Protocols.TestSuites.Nrpc.SiteNameType.SiteNameOne, 0u);
                this.Manager.Comment("reaching state \'S1909\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp132, "return of DsrGetDcNameEx, state S1909");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label25;
            }
            if ((temp134 == 2)) {
                this.Manager.Comment("reaching state \'S893\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp133;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp133 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1910\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp133, "return of DsrGetDcNameEx2, state S1910");
                this.Manager.Comment("reaching state \'S2918\'");
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS142GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_LocateDc_DsrGetDcNameS142GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_LocateDc_DsrGetDcNameS142GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS144() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS144");
            this.Manager.Comment("reaching state \'S144\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp135;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp135);
            this.Manager.AddReturn(GetPlatformInfo, null, temp135);
            this.Manager.Comment("reaching state \'S145\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS144GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS144GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS144GetPlatformChecker2)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S894\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp136;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,0" +
                        ")\'");
                temp136 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1911\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp136, "return of DsrGetDcNameEx, state S1911");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label26;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S895\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp137;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,InvalidSi" +
                        "teName,0)\'");
                temp137 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(1)), 0u);
                this.Manager.Comment("reaching state \'S1912\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp137, "return of DsrGetDcNameEx, state S1912");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label26;
            }
            if ((temp139 == 2)) {
                this.Manager.Comment("reaching state \'S896\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp138;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp138 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1913\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp138, "return of DsrGetDcNameEx2, state S1913");
                this.Manager.Comment("reaching state \'S2919\'");
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS144GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_LocateDc_DsrGetDcNameS144GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_LocateDc_DsrGetDcNameS144GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        #endregion
        
        #region Test Starting in S146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS146() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS146");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp140;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp140);
            this.Manager.AddReturn(GetPlatformInfo, null, temp140);
            this.Manager.Comment("reaching state \'S147\'");
            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS146GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS146GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS146GetPlatformChecker2)));
            if ((temp144 == 0)) {
                this.Manager.Comment("reaching state \'S897\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp141;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,0" +
                        ")\'");
                temp141 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1914\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp141, "return of DsrGetDcNameEx, state S1914");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label27;
            }
            if ((temp144 == 1)) {
                this.Manager.Comment("reaching state \'S898\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp142;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,0" +
                        ")\'");
                temp142 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1915\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp142, "return of DsrGetDcNameEx, state S1915");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label27;
            }
            if ((temp144 == 2)) {
                this.Manager.Comment("reaching state \'S899\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp143;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp143 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1916\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp143, "return of DsrGetDcNameEx2, state S1916");
                this.Manager.Comment("reaching state \'S2920\'");
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS146GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_LocateDc_DsrGetDcNameS146GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_LocateDc_DsrGetDcNameS146GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS148() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS148");
            this.Manager.Comment("reaching state \'S148\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp145;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp145);
            this.Manager.AddReturn(GetPlatformInfo, null, temp145);
            this.Manager.Comment("reaching state \'S149\'");
            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS148GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS148GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS148GetPlatformChecker2)));
            if ((temp149 == 0)) {
                this.Manager.Comment("reaching state \'S900\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp146;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,0)\'");
                temp146 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1917\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp146, "return of DsrGetDcNameEx, state S1917");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label28;
            }
            if ((temp149 == 1)) {
                this.Manager.Comment("reaching state \'S901\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp147;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,0" +
                        ")\'");
                temp147 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1918\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp147, "return of DsrGetDcNameEx, state S1918");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label28;
            }
            if ((temp149 == 2)) {
                this.Manager.Comment("reaching state \'S902\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp148;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp148 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1919\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp148, "return of DsrGetDcNameEx2, state S1919");
                this.Manager.Comment("reaching state \'S2921\'");
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS148GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_LocateDc_DsrGetDcNameS148GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_LocateDc_DsrGetDcNameS148GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS150() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS150");
            this.Manager.Comment("reaching state \'S150\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp150;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp150);
            this.Manager.AddReturn(GetPlatformInfo, null, temp150);
            this.Manager.Comment("reaching state \'S151\'");
            int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS150GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS150GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS150GetPlatformChecker2)));
            if ((temp154 == 0)) {
                this.Manager.Comment("reaching state \'S903\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp151;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,0)\'");
                temp151 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1920\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp151, "return of DsrGetDcNameEx, state S1920");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label29;
            }
            if ((temp154 == 1)) {
                this.Manager.Comment("reaching state \'S904\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp152;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,0)\'");
                temp152 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1921\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp152, "return of DsrGetDcNameEx, state S1921");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label29;
            }
            if ((temp154 == 2)) {
                this.Manager.Comment("reaching state \'S905\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp153;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp153 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1922\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp153, "return of DsrGetDcNameEx2, state S1922");
                this.Manager.Comment("reaching state \'S2922\'");
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS150GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_LocateDc_DsrGetDcNameS150GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_LocateDc_DsrGetDcNameS150GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        #endregion
        
        #region Test Starting in S152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS152() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS152");
            this.Manager.Comment("reaching state \'S152\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp155;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp155);
            this.Manager.AddReturn(GetPlatformInfo, null, temp155);
            this.Manager.Comment("reaching state \'S153\'");
            int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS152GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS152GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS152GetPlatformChecker2)));
            if ((temp159 == 0)) {
                this.Manager.Comment("reaching state \'S906\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp156;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,65536)\'" +
                        "");
                temp156 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1923\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp156, "return of DsrGetDcNameEx, state S1923");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label30;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S907\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp157;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,0)\'");
                temp157 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1924\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp157, "return of DsrGetDcNameEx, state S1924");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label30;
            }
            if ((temp159 == 2)) {
                this.Manager.Comment("reaching state \'S908\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp158;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp158 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1925\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp158, "return of DsrGetDcNameEx2, state S1925");
                this.Manager.Comment("reaching state \'S2923\'");
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS152GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_LocateDc_DsrGetDcNameS152GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_LocateDc_DsrGetDcNameS152GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS154() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS154");
            this.Manager.Comment("reaching state \'S154\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp160;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp160);
            this.Manager.AddReturn(GetPlatformInfo, null, temp160);
            this.Manager.Comment("reaching state \'S155\'");
            int temp164 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS154GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS154GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS154GetPlatformChecker2)));
            if ((temp164 == 0)) {
                this.Manager.Comment("reaching state \'S909\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp161;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,InvalidDomainG" +
                        "uid,Null,0)\'");
                temp161 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1926\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp161, "return of DsrGetDcNameEx, state S1926");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label31;
            }
            if ((temp164 == 1)) {
                this.Manager.Comment("reaching state \'S910\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp162;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,65536)\'" +
                        "");
                temp162 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1927\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp162, "return of DsrGetDcNameEx, state S1927");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label31;
            }
            if ((temp164 == 2)) {
                this.Manager.Comment("reaching state \'S911\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp163;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp163 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1928\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp163, "return of DsrGetDcNameEx2, state S1928");
                this.Manager.Comment("reaching state \'S2924\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS154GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_LocateDc_DsrGetDcNameS154GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_LocateDc_DsrGetDcNameS154GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        #endregion
        
        #region Test Starting in S156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS156() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS156");
            this.Manager.Comment("reaching state \'S156\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp165;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp165);
            this.Manager.AddReturn(GetPlatformInfo, null, temp165);
            this.Manager.Comment("reaching state \'S157\'");
            int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS156GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS156GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS156GetPlatformChecker2)));
            if ((temp169 == 0)) {
                this.Manager.Comment("reaching state \'S912\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp166;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,TrustedDomainG" +
                        "uid,Null,0)\'");
                temp166 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1929\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp166, "return of DsrGetDcNameEx, state S1929");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label32;
            }
            if ((temp169 == 1)) {
                this.Manager.Comment("reaching state \'S913\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp167;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,InvalidDomainG" +
                        "uid,Null,0)\'");
                temp167 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1930\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp167, "return of DsrGetDcNameEx, state S1930");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label32;
            }
            if ((temp169 == 2)) {
                this.Manager.Comment("reaching state \'S914\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp168;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp168 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1931\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp168, "return of DsrGetDcNameEx2, state S1931");
                this.Manager.Comment("reaching state \'S2925\'");
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS156GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_LocateDc_DsrGetDcNameS156GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_LocateDc_DsrGetDcNameS156GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS158() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS158");
            this.Manager.Comment("reaching state \'S158\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp170;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp170);
            this.Manager.AddReturn(GetPlatformInfo, null, temp170);
            this.Manager.Comment("reaching state \'S159\'");
            int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS158GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS158GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS158GetPlatformChecker2)));
            if ((temp174 == 0)) {
                this.Manager.Comment("reaching state \'S915\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp171;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp171 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1932\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp171, "return of DsrGetDcNameEx, state S1932");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label33;
            }
            if ((temp174 == 1)) {
                this.Manager.Comment("reaching state \'S916\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp172;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,TrustedDomainG" +
                        "uid,Null,0)\'");
                temp172 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1933\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp172, "return of DsrGetDcNameEx, state S1933");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label33;
            }
            if ((temp174 == 2)) {
                this.Manager.Comment("reaching state \'S917\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp173;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp173 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1934\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp173, "return of DsrGetDcNameEx2, state S1934");
                this.Manager.Comment("reaching state \'S2926\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS158GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_LocateDc_DsrGetDcNameS158GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_LocateDc_DsrGetDcNameS158GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS16() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS16");
            this.Manager.Comment("reaching state \'S16\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp175;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp175);
            this.Manager.AddReturn(GetPlatformInfo, null, temp175);
            this.Manager.Comment("reaching state \'S17\'");
            int temp179 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS16GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS16GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS16GetPlatformChecker2)));
            if ((temp179 == 0)) {
                this.Manager.Comment("reaching state \'S702\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp176;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,S" +
                        "iteNameOne,0)\'");
                temp176 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), Microsoft.Protocols.TestSuites.Nrpc.SiteNameType.SiteNameOne, 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1719\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp176, "return of DsrGetDcNameEx2, state S1719");
                this.Manager.Comment("reaching state \'S2736\'");
                goto label34;
            }
            if ((temp179 == 1)) {
                this.Manager.Comment("reaching state \'S703\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp177;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,S" +
                        "iteNameOne,0)\'");
                temp177 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), Microsoft.Protocols.TestSuites.Nrpc.SiteNameType.SiteNameOne, 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1720\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp177, "return of DsrGetDcNameEx2, state S1720");
                this.Manager.Comment("reaching state \'S2737\'");
                goto label34;
            }
            if ((temp179 == 2)) {
                this.Manager.Comment("reaching state \'S704\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp178;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp178 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1721\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp178, "return of DsrGetDcNameEx2, state S1721");
                this.Manager.Comment("reaching state \'S2738\'");
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS16GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_LocateDc_DsrGetDcNameS16GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_LocateDc_DsrGetDcNameS16GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS160() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS160");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp180;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp180);
            this.Manager.AddReturn(GetPlatformInfo, null, temp180);
            this.Manager.Comment("reaching state \'S161\'");
            int temp184 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS160GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS160GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS160GetPlatformChecker2)));
            if ((temp184 == 0)) {
                this.Manager.Comment("reaching state \'S918\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp181;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,6" +
                        "4)\'");
                temp181 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1935\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp181, "return of DsrGetDcNameEx, state S1935");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label35;
            }
            if ((temp184 == 1)) {
                this.Manager.Comment("reaching state \'S919\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp182;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp182 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1936\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp182, "return of DsrGetDcNameEx, state S1936");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label35;
            }
            if ((temp184 == 2)) {
                this.Manager.Comment("reaching state \'S920\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp183;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp183 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1937\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp183, "return of DsrGetDcNameEx2, state S1937");
                this.Manager.Comment("reaching state \'S2927\'");
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS160GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_LocateDc_DsrGetDcNameS160GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_LocateDc_DsrGetDcNameS160GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS162() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS162");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp185;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp185);
            this.Manager.AddReturn(GetPlatformInfo, null, temp185);
            this.Manager.Comment("reaching state \'S163\'");
            int temp189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS162GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS162GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS162GetPlatformChecker2)));
            if ((temp189 == 0)) {
                this.Manager.Comment("reaching state \'S921\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp186;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,6" +
                        "4)\'");
                temp186 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1938\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp186, "return of DsrGetDcNameEx, state S1938");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label36;
            }
            if ((temp189 == 1)) {
                this.Manager.Comment("reaching state \'S922\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp187;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,6" +
                        "4)\'");
                temp187 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1939\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp187, "return of DsrGetDcNameEx, state S1939");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label36;
            }
            if ((temp189 == 2)) {
                this.Manager.Comment("reaching state \'S923\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp188;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp188 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1940\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp188, "return of DsrGetDcNameEx2, state S1940");
                this.Manager.Comment("reaching state \'S2928\'");
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS162GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_LocateDc_DsrGetDcNameS162GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_LocateDc_DsrGetDcNameS162GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        #endregion
        
        #region Test Starting in S164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS164() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS164");
            this.Manager.Comment("reaching state \'S164\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp190;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp190);
            this.Manager.AddReturn(GetPlatformInfo, null, temp190);
            this.Manager.Comment("reaching state \'S165\'");
            int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS164GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS164GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS164GetPlatformChecker2)));
            if ((temp194 == 0)) {
                this.Manager.Comment("reaching state \'S924\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp191;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,64)\'");
                temp191 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1941\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp191, "return of DsrGetDcNameEx, state S1941");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label37;
            }
            if ((temp194 == 1)) {
                this.Manager.Comment("reaching state \'S925\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp192;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,6" +
                        "4)\'");
                temp192 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1942\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp192, "return of DsrGetDcNameEx, state S1942");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label37;
            }
            if ((temp194 == 2)) {
                this.Manager.Comment("reaching state \'S926\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp193;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp193 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1943\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp193, "return of DsrGetDcNameEx2, state S1943");
                this.Manager.Comment("reaching state \'S2929\'");
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS164GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_LocateDc_DsrGetDcNameS164GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_LocateDc_DsrGetDcNameS164GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        #endregion
        
        #region Test Starting in S166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS166() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS166");
            this.Manager.Comment("reaching state \'S166\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp195;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp195);
            this.Manager.AddReturn(GetPlatformInfo, null, temp195);
            this.Manager.Comment("reaching state \'S167\'");
            int temp199 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS166GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS166GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS166GetPlatformChecker2)));
            if ((temp199 == 0)) {
                this.Manager.Comment("reaching state \'S927\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp196;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,64)\'");
                temp196 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1944\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp196, "return of DsrGetDcNameEx, state S1944");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label38;
            }
            if ((temp199 == 1)) {
                this.Manager.Comment("reaching state \'S928\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp197;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,64)\'");
                temp197 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1945\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp197, "return of DsrGetDcNameEx, state S1945");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label38;
            }
            if ((temp199 == 2)) {
                this.Manager.Comment("reaching state \'S929\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp198;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp198 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1946\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp198, "return of DsrGetDcNameEx2, state S1946");
                this.Manager.Comment("reaching state \'S2930\'");
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS166GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_LocateDc_DsrGetDcNameS166GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_LocateDc_DsrGetDcNameS166GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        #endregion
        
        #region Test Starting in S168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS168() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS168");
            this.Manager.Comment("reaching state \'S168\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp200;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp200);
            this.Manager.AddReturn(GetPlatformInfo, null, temp200);
            this.Manager.Comment("reaching state \'S169\'");
            int temp204 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS168GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS168GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS168GetPlatformChecker2)));
            if ((temp204 == 0)) {
                this.Manager.Comment("reaching state \'S930\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp201;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,64)\'" +
                        "");
                temp201 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1947\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp201, "return of DsrGetDcNameEx, state S1947");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label39;
            }
            if ((temp204 == 1)) {
                this.Manager.Comment("reaching state \'S931\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp202;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,64)\'");
                temp202 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1948\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp202, "return of DsrGetDcNameEx, state S1948");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label39;
            }
            if ((temp204 == 2)) {
                this.Manager.Comment("reaching state \'S932\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp203;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp203 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1949\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp203, "return of DsrGetDcNameEx2, state S1949");
                this.Manager.Comment("reaching state \'S2931\'");
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS168GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_LocateDc_DsrGetDcNameS168GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_LocateDc_DsrGetDcNameS168GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS170() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS170");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp205;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp205);
            this.Manager.AddReturn(GetPlatformInfo, null, temp205);
            this.Manager.Comment("reaching state \'S171\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS170GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS170GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS170GetPlatformChecker2)));
            if ((temp209 == 0)) {
                this.Manager.Comment("reaching state \'S933\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp206;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,6" +
                        "5536)\'");
                temp206 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1950\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp206, "return of DsrGetDcNameEx, state S1950");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label40;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S934\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp207;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,64)\'" +
                        "");
                temp207 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S1951\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp207, "return of DsrGetDcNameEx, state S1951");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label40;
            }
            if ((temp209 == 2)) {
                this.Manager.Comment("reaching state \'S935\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp208;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp208 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1952\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp208, "return of DsrGetDcNameEx2, state S1952");
                this.Manager.Comment("reaching state \'S2932\'");
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS170GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_LocateDc_DsrGetDcNameS170GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_LocateDc_DsrGetDcNameS170GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        #endregion
        
        #region Test Starting in S172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS172() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS172");
            this.Manager.Comment("reaching state \'S172\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp210;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp210);
            this.Manager.AddReturn(GetPlatformInfo, null, temp210);
            this.Manager.Comment("reaching state \'S173\'");
            int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS172GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS172GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS172GetPlatformChecker2)));
            if ((temp214 == 0)) {
                this.Manager.Comment("reaching state \'S936\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp211;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,6" +
                        "5536)\'");
                temp211 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1953\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp211, "return of DsrGetDcNameEx, state S1953");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label41;
            }
            if ((temp214 == 1)) {
                this.Manager.Comment("reaching state \'S937\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp212;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,6" +
                        "5536)\'");
                temp212 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1954\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp212, "return of DsrGetDcNameEx, state S1954");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label41;
            }
            if ((temp214 == 2)) {
                this.Manager.Comment("reaching state \'S938\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp213;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp213 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1955\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp213, "return of DsrGetDcNameEx2, state S1955");
                this.Manager.Comment("reaching state \'S2933\'");
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS172GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_LocateDc_DsrGetDcNameS172GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_LocateDc_DsrGetDcNameS172GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS174() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS174");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp215;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp215);
            this.Manager.AddReturn(GetPlatformInfo, null, temp215);
            this.Manager.Comment("reaching state \'S175\'");
            int temp219 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS174GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS174GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS174GetPlatformChecker2)));
            if ((temp219 == 0)) {
                this.Manager.Comment("reaching state \'S939\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp216;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,65536)\'");
                temp216 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1956\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp216, "return of DsrGetDcNameEx, state S1956");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label42;
            }
            if ((temp219 == 1)) {
                this.Manager.Comment("reaching state \'S940\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp217;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,6" +
                        "5536)\'");
                temp217 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1957\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp217, "return of DsrGetDcNameEx, state S1957");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label42;
            }
            if ((temp219 == 2)) {
                this.Manager.Comment("reaching state \'S941\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp218;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp218 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1958\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp218, "return of DsrGetDcNameEx2, state S1958");
                this.Manager.Comment("reaching state \'S2934\'");
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS174GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_LocateDc_DsrGetDcNameS174GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_LocateDc_DsrGetDcNameS174GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        #endregion
        
        #region Test Starting in S176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS176() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS176");
            this.Manager.Comment("reaching state \'S176\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp220;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp220);
            this.Manager.AddReturn(GetPlatformInfo, null, temp220);
            this.Manager.Comment("reaching state \'S177\'");
            int temp224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS176GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS176GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS176GetPlatformChecker2)));
            if ((temp224 == 0)) {
                this.Manager.Comment("reaching state \'S942\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp221;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,65536)\'" +
                        "");
                temp221 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1959\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp221, "return of DsrGetDcNameEx, state S1959");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label43;
            }
            if ((temp224 == 1)) {
                this.Manager.Comment("reaching state \'S943\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp222;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,65536)\'");
                temp222 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1960\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp222, "return of DsrGetDcNameEx, state S1960");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label43;
            }
            if ((temp224 == 2)) {
                this.Manager.Comment("reaching state \'S944\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp223;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp223 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1961\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp223, "return of DsrGetDcNameEx2, state S1961");
                this.Manager.Comment("reaching state \'S2935\'");
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS176GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_LocateDc_DsrGetDcNameS176GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_LocateDc_DsrGetDcNameS176GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        #endregion
        
        #region Test Starting in S178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS178() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS178");
            this.Manager.Comment("reaching state \'S178\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp225;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp225);
            this.Manager.AddReturn(GetPlatformInfo, null, temp225);
            this.Manager.Comment("reaching state \'S179\'");
            int temp229 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS178GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS178GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS178GetPlatformChecker2)));
            if ((temp229 == 0)) {
                this.Manager.Comment("reaching state \'S945\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp226;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,PrimaryDomainGuid" +
                        ",Null,0)\'");
                temp226 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1962\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp226, "return of DsrGetDcNameEx, state S1962");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label44;
            }
            if ((temp229 == 1)) {
                this.Manager.Comment("reaching state \'S946\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp227;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,65536)\'" +
                        "");
                temp227 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1963\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp227, "return of DsrGetDcNameEx, state S1963");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label44;
            }
            if ((temp229 == 2)) {
                this.Manager.Comment("reaching state \'S947\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp228;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp228 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1964\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp228, "return of DsrGetDcNameEx2, state S1964");
                this.Manager.Comment("reaching state \'S2936\'");
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS178GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_LocateDc_DsrGetDcNameS178GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_LocateDc_DsrGetDcNameS178GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS18() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS18");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp230;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp230);
            this.Manager.AddReturn(GetPlatformInfo, null, temp230);
            this.Manager.Comment("reaching state \'S19\'");
            int temp234 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS18GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS18GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS18GetPlatformChecker2)));
            if ((temp234 == 0)) {
                this.Manager.Comment("reaching state \'S705\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp231;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,I" +
                        "nvalidSiteName,0)\'");
                temp231 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(1)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1722\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp231, "return of DsrGetDcNameEx2, state S1722");
                this.Manager.Comment("reaching state \'S2739\'");
                goto label45;
            }
            if ((temp234 == 1)) {
                this.Manager.Comment("reaching state \'S706\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp232;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,I" +
                        "nvalidSiteName,0)\'");
                temp232 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(1)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1723\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp232, "return of DsrGetDcNameEx2, state S1723");
                this.Manager.Comment("reaching state \'S2740\'");
                goto label45;
            }
            if ((temp234 == 2)) {
                this.Manager.Comment("reaching state \'S707\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp233;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp233 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1724\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp233, "return of DsrGetDcNameEx2, state S1724");
                this.Manager.Comment("reaching state \'S2741\'");
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS18GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_LocateDc_DsrGetDcNameS18GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_LocateDc_DsrGetDcNameS18GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        #endregion
        
        #region Test Starting in S180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS180() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS180");
            this.Manager.Comment("reaching state \'S180\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp235;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp235);
            this.Manager.AddReturn(GetPlatformInfo, null, temp235);
            this.Manager.Comment("reaching state \'S181\'");
            int temp239 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS180GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS180GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS180GetPlatformChecker2)));
            if ((temp239 == 0)) {
                this.Manager.Comment("reaching state \'S948\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp236;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,6553" +
                        "6)\'");
                temp236 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1965\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp236, "return of DsrGetDcNameEx, state S1965");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label46;
            }
            if ((temp239 == 1)) {
                this.Manager.Comment("reaching state \'S949\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp237;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,PrimaryDomainGuid" +
                        ",Null,0)\'");
                temp237 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S1966\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp237, "return of DsrGetDcNameEx, state S1966");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label46;
            }
            if ((temp239 == 2)) {
                this.Manager.Comment("reaching state \'S950\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp238;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp238 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1967\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp238, "return of DsrGetDcNameEx2, state S1967");
                this.Manager.Comment("reaching state \'S2937\'");
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS180GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_LocateDc_DsrGetDcNameS180GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_LocateDc_DsrGetDcNameS180GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        #endregion
        
        #region Test Starting in S182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS182() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS182");
            this.Manager.Comment("reaching state \'S182\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp240;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp240);
            this.Manager.AddReturn(GetPlatformInfo, null, temp240);
            this.Manager.Comment("reaching state \'S183\'");
            int temp244 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS182GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS182GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS182GetPlatformChecker2)));
            if ((temp244 == 0)) {
                this.Manager.Comment("reaching state \'S951\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp241;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,1" +
                        "31072)\'");
                temp241 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1968\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp241, "return of DsrGetDcNameEx, state S1968");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label47;
            }
            if ((temp244 == 1)) {
                this.Manager.Comment("reaching state \'S952\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp242;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,6553" +
                        "6)\'");
                temp242 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S1969\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp242, "return of DsrGetDcNameEx, state S1969");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label47;
            }
            if ((temp244 == 2)) {
                this.Manager.Comment("reaching state \'S953\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp243;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp243 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1970\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp243, "return of DsrGetDcNameEx2, state S1970");
                this.Manager.Comment("reaching state \'S2938\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS182GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_LocateDc_DsrGetDcNameS182GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_LocateDc_DsrGetDcNameS182GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        #endregion
        
        #region Test Starting in S184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS184() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS184");
            this.Manager.Comment("reaching state \'S184\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp245;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp245);
            this.Manager.AddReturn(GetPlatformInfo, null, temp245);
            this.Manager.Comment("reaching state \'S185\'");
            int temp249 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS184GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS184GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS184GetPlatformChecker2)));
            if ((temp249 == 0)) {
                this.Manager.Comment("reaching state \'S954\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp246;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,131072)" +
                        "\'");
                temp246 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1971\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp246, "return of DsrGetDcNameEx, state S1971");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label48;
            }
            if ((temp249 == 1)) {
                this.Manager.Comment("reaching state \'S955\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp247;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,1" +
                        "31072)\'");
                temp247 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1972\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp247, "return of DsrGetDcNameEx, state S1972");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label48;
            }
            if ((temp249 == 2)) {
                this.Manager.Comment("reaching state \'S956\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp248;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp248 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1973\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp248, "return of DsrGetDcNameEx2, state S1973");
                this.Manager.Comment("reaching state \'S2939\'");
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS184GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_LocateDc_DsrGetDcNameS184GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_LocateDc_DsrGetDcNameS184GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        #endregion
        
        #region Test Starting in S186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS186() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS186");
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp250;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp250);
            this.Manager.AddReturn(GetPlatformInfo, null, temp250);
            this.Manager.Comment("reaching state \'S187\'");
            int temp254 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS186GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS186GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS186GetPlatformChecker2)));
            if ((temp254 == 0)) {
                this.Manager.Comment("reaching state \'S957\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp251;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,1" +
                        "31072)\'");
                temp251 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1974\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp251, "return of DsrGetDcNameEx, state S1974");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label49;
            }
            if ((temp254 == 1)) {
                this.Manager.Comment("reaching state \'S958\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp252;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,131072)" +
                        "\'");
                temp252 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1975\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp252, "return of DsrGetDcNameEx, state S1975");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label49;
            }
            if ((temp254 == 2)) {
                this.Manager.Comment("reaching state \'S959\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp253;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp253 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1976\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp253, "return of DsrGetDcNameEx2, state S1976");
                this.Manager.Comment("reaching state \'S2940\'");
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS186GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_LocateDc_DsrGetDcNameS186GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_LocateDc_DsrGetDcNameS186GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        #endregion
        
        #region Test Starting in S188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS188() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS188");
            this.Manager.Comment("reaching state \'S188\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp255;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp255);
            this.Manager.AddReturn(GetPlatformInfo, null, temp255);
            this.Manager.Comment("reaching state \'S189\'");
            int temp259 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS188GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS188GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS188GetPlatformChecker2)));
            if ((temp259 == 0)) {
                this.Manager.Comment("reaching state \'S960\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp256;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,131072)\'");
                temp256 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1977\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp256, "return of DsrGetDcNameEx, state S1977");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label50;
            }
            if ((temp259 == 1)) {
                this.Manager.Comment("reaching state \'S961\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp257;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,1" +
                        "31072)\'");
                temp257 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1978\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp257, "return of DsrGetDcNameEx, state S1978");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label50;
            }
            if ((temp259 == 2)) {
                this.Manager.Comment("reaching state \'S962\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp258;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp258 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1979\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp258, "return of DsrGetDcNameEx2, state S1979");
                this.Manager.Comment("reaching state \'S2941\'");
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS188GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_LocateDc_DsrGetDcNameS188GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_LocateDc_DsrGetDcNameS188GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        #endregion
        
        #region Test Starting in S190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS190() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS190");
            this.Manager.Comment("reaching state \'S190\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp260;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp260);
            this.Manager.AddReturn(GetPlatformInfo, null, temp260);
            this.Manager.Comment("reaching state \'S191\'");
            int temp264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS190GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS190GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS190GetPlatformChecker2)));
            if ((temp264 == 0)) {
                this.Manager.Comment("reaching state \'S963\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp261;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1024" +
                        ")\'");
                temp261 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1024u);
                this.Manager.Comment("reaching state \'S1980\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp261, "return of DsrGetDcNameEx, state S1980");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label51;
            }
            if ((temp264 == 1)) {
                this.Manager.Comment("reaching state \'S964\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp262;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,131072)\'");
                temp262 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S1981\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp262, "return of DsrGetDcNameEx, state S1981");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label51;
            }
            if ((temp264 == 2)) {
                this.Manager.Comment("reaching state \'S965\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp263;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp263 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1982\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp263, "return of DsrGetDcNameEx2, state S1982");
                this.Manager.Comment("reaching state \'S2942\'");
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS190GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S191");
        }
        
        private void Test_LocateDc_DsrGetDcNameS190GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S191");
        }
        
        private void Test_LocateDc_DsrGetDcNameS190GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S191");
        }
        #endregion
        
        #region Test Starting in S192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS192() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS192");
            this.Manager.Comment("reaching state \'S192\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp265;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp265);
            this.Manager.AddReturn(GetPlatformInfo, null, temp265);
            this.Manager.Comment("reaching state \'S193\'");
            int temp269 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS192GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS192GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS192GetPlatformChecker2)));
            if ((temp269 == 0)) {
                this.Manager.Comment("reaching state \'S966\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp266;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1152" +
                        ")\'");
                temp266 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104893");
                this.Manager.Comment("reaching state \'S1983\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp266, "return of DsrGetDcNameEx, state S1983");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label52;
            }
            if ((temp269 == 1)) {
                this.Manager.Comment("reaching state \'S967\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp267;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1024" +
                        ")\'");
                temp267 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1024u);
                this.Manager.Comment("reaching state \'S1984\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp267, "return of DsrGetDcNameEx, state S1984");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label52;
            }
            if ((temp269 == 2)) {
                this.Manager.Comment("reaching state \'S968\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp268;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp268 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1985\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp268, "return of DsrGetDcNameEx2, state S1985");
                this.Manager.Comment("reaching state \'S2943\'");
                goto label52;
            }
            throw new InvalidOperationException("never reached");
        label52:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS192GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S193");
        }
        
        private void Test_LocateDc_DsrGetDcNameS192GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S193");
        }
        
        private void Test_LocateDc_DsrGetDcNameS192GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S193");
        }
        #endregion
        
        #region Test Starting in S194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS194() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS194");
            this.Manager.Comment("reaching state \'S194\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp270;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp270);
            this.Manager.AddReturn(GetPlatformInfo, null, temp270);
            this.Manager.Comment("reaching state \'S195\'");
            int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS194GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS194GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS194GetPlatformChecker2)));
            if ((temp274 == 0)) {
                this.Manager.Comment("reaching state \'S969\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp271;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1088" +
                        ")\'");
                temp271 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104891");
                this.Manager.Comment("reaching state \'S1986\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp271, "return of DsrGetDcNameEx, state S1986");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label53;
            }
            if ((temp274 == 1)) {
                this.Manager.Comment("reaching state \'S970\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp272;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1152" +
                        ")\'");
                temp272 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104893");
                this.Manager.Comment("reaching state \'S1987\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp272, "return of DsrGetDcNameEx, state S1987");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label53;
            }
            if ((temp274 == 2)) {
                this.Manager.Comment("reaching state \'S971\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp273;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp273 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1988\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp273, "return of DsrGetDcNameEx2, state S1988");
                this.Manager.Comment("reaching state \'S2944\'");
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS194GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S195");
        }
        
        private void Test_LocateDc_DsrGetDcNameS194GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S195");
        }
        
        private void Test_LocateDc_DsrGetDcNameS194GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S195");
        }
        #endregion
        
        #region Test Starting in S196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS196() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS196");
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp275;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp275);
            this.Manager.AddReturn(GetPlatformInfo, null, temp275);
            this.Manager.Comment("reaching state \'S197\'");
            int temp279 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS196GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS196GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS196GetPlatformChecker2)));
            if ((temp279 == 0)) {
                this.Manager.Comment("reaching state \'S972\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp276;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1)\'");
                temp276 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1u);
                this.Manager.Comment("reaching state \'S1989\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp276, "return of DsrGetDcNameEx, state S1989");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label54;
            }
            if ((temp279 == 1)) {
                this.Manager.Comment("reaching state \'S973\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp277;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1088" +
                        ")\'");
                temp277 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104891");
                this.Manager.Comment("reaching state \'S1990\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp277, "return of DsrGetDcNameEx, state S1990");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label54;
            }
            if ((temp279 == 2)) {
                this.Manager.Comment("reaching state \'S974\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp278;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp278 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1991\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp278, "return of DsrGetDcNameEx2, state S1991");
                this.Manager.Comment("reaching state \'S2945\'");
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS196GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S197");
        }
        
        private void Test_LocateDc_DsrGetDcNameS196GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S197");
        }
        
        private void Test_LocateDc_DsrGetDcNameS196GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S197");
        }
        #endregion
        
        #region Test Starting in S198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS198() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS198");
            this.Manager.Comment("reaching state \'S198\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp280;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp280);
            this.Manager.AddReturn(GetPlatformInfo, null, temp280);
            this.Manager.Comment("reaching state \'S199\'");
            int temp284 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS198GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS198GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS198GetPlatformChecker2)));
            if ((temp284 == 0)) {
                this.Manager.Comment("reaching state \'S975\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp281;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,16)\'" +
                        "");
                temp281 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16u);
                this.Manager.Comment("reaching state \'S1992\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp281, "return of DsrGetDcNameEx, state S1992");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label55;
            }
            if ((temp284 == 1)) {
                this.Manager.Comment("reaching state \'S976\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp282;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1)\'");
                temp282 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1u);
                this.Manager.Comment("reaching state \'S1993\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp282, "return of DsrGetDcNameEx, state S1993");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label55;
            }
            if ((temp284 == 2)) {
                this.Manager.Comment("reaching state \'S977\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp283;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp283 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1994\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp283, "return of DsrGetDcNameEx2, state S1994");
                this.Manager.Comment("reaching state \'S2946\'");
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS198GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S199");
        }
        
        private void Test_LocateDc_DsrGetDcNameS198GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S199");
        }
        
        private void Test_LocateDc_DsrGetDcNameS198GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S199");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS2() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS2");
            this.Manager.Comment("reaching state \'S2\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp285;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp285);
            this.Manager.AddReturn(GetPlatformInfo, null, temp285);
            this.Manager.Comment("reaching state \'S3\'");
            int temp289 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS2GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS2GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS2GetPlatformChecker2)));
            if ((temp289 == 0)) {
                this.Manager.Comment("reaching state \'S681\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp286;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,512,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp286 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 512u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1698\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp286, "return of DsrGetDcNameEx2, state S1698");
                this.Manager.Comment("reaching state \'S2715\'");
                goto label56;
            }
            if ((temp289 == 1)) {
                this.Manager.Comment("reaching state \'S682\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp287;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp287 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1699\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp287, "return of DsrGetDcNameEx2, state S1699");
                this.Manager.Comment("reaching state \'S2716\'");
                goto label56;
            }
            if ((temp289 == 2)) {
                this.Manager.Comment("reaching state \'S683\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp288;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp288 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1700\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp288, "return of DsrGetDcNameEx2, state S1700");
                this.Manager.Comment("reaching state \'S2717\'");
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS2GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_LocateDc_DsrGetDcNameS2GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_LocateDc_DsrGetDcNameS2GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS20() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS20");
            this.Manager.Comment("reaching state \'S20\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp290;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp290);
            this.Manager.AddReturn(GetPlatformInfo, null, temp290);
            this.Manager.Comment("reaching state \'S21\'");
            int temp294 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS20GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS20GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS20GetPlatformChecker2)));
            if ((temp294 == 0)) {
                this.Manager.Comment("reaching state \'S708\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp291;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Invali" +
                        "dDomainGuid,Null,0)\'");
                temp291 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1725\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp291, "return of DsrGetDcNameEx2, state S1725");
                this.Manager.Comment("reaching state \'S2742\'");
                goto label57;
            }
            if ((temp294 == 1)) {
                this.Manager.Comment("reaching state \'S709\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp292;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Invali" +
                        "dDomainGuid,Null,0)\'");
                temp292 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1726\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp292, "return of DsrGetDcNameEx2, state S1726");
                this.Manager.Comment("reaching state \'S2743\'");
                goto label57;
            }
            if ((temp294 == 2)) {
                this.Manager.Comment("reaching state \'S710\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp293;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp293 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1727\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp293, "return of DsrGetDcNameEx2, state S1727");
                this.Manager.Comment("reaching state \'S2744\'");
                goto label57;
            }
            throw new InvalidOperationException("never reached");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS20GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_LocateDc_DsrGetDcNameS20GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_LocateDc_DsrGetDcNameS20GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        #endregion
        
        #region Test Starting in S200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS200() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS200");
            this.Manager.Comment("reaching state \'S200\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp295;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp295);
            this.Manager.AddReturn(GetPlatformInfo, null, temp295);
            this.Manager.Comment("reaching state \'S201\'");
            int temp299 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS200GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS200GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS200GetPlatformChecker2)));
            if ((temp299 == 0)) {
                this.Manager.Comment("reaching state \'S978\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp296;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,32)\'" +
                        "");
                temp296 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32u);
                this.Manager.Comment("reaching state \'S1995\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp296, "return of DsrGetDcNameEx, state S1995");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label58;
            }
            if ((temp299 == 1)) {
                this.Manager.Comment("reaching state \'S979\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp297;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,16)\'" +
                        "");
                temp297 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16u);
                this.Manager.Comment("reaching state \'S1996\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp297, "return of DsrGetDcNameEx, state S1996");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label58;
            }
            if ((temp299 == 2)) {
                this.Manager.Comment("reaching state \'S980\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp298;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp298 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1997\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp298, "return of DsrGetDcNameEx2, state S1997");
                this.Manager.Comment("reaching state \'S2947\'");
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS200GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S201");
        }
        
        private void Test_LocateDc_DsrGetDcNameS200GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S201");
        }
        
        private void Test_LocateDc_DsrGetDcNameS200GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S201");
        }
        #endregion
        
        #region Test Starting in S202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS202() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS202");
            this.Manager.Comment("reaching state \'S202\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp300;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp300);
            this.Manager.AddReturn(GetPlatformInfo, null, temp300);
            this.Manager.Comment("reaching state \'S203\'");
            int temp304 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS202GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS202GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS202GetPlatformChecker2)));
            if ((temp304 == 0)) {
                this.Manager.Comment("reaching state \'S981\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp301;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,256)" +
                        "\'");
                temp301 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 256u);
                this.Manager.Comment("reaching state \'S1998\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp301, "return of DsrGetDcNameEx, state S1998");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label59;
            }
            if ((temp304 == 1)) {
                this.Manager.Comment("reaching state \'S982\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp302;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,32)\'" +
                        "");
                temp302 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32u);
                this.Manager.Comment("reaching state \'S1999\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp302, "return of DsrGetDcNameEx, state S1999");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label59;
            }
            if ((temp304 == 2)) {
                this.Manager.Comment("reaching state \'S983\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp303;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp303 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2000\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp303, "return of DsrGetDcNameEx2, state S2000");
                this.Manager.Comment("reaching state \'S2948\'");
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS202GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S203");
        }
        
        private void Test_LocateDc_DsrGetDcNameS202GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S203");
        }
        
        private void Test_LocateDc_DsrGetDcNameS202GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S203");
        }
        #endregion
        
        #region Test Starting in S204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS204() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS204");
            this.Manager.Comment("reaching state \'S204\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp305;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp305);
            this.Manager.AddReturn(GetPlatformInfo, null, temp305);
            this.Manager.Comment("reaching state \'S205\'");
            int temp309 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS204GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS204GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS204GetPlatformChecker2)));
            if ((temp309 == 0)) {
                this.Manager.Comment("reaching state \'S984\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp306;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,512)" +
                        "\'");
                temp306 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 512u);
                this.Manager.Comment("reaching state \'S2001\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp306, "return of DsrGetDcNameEx, state S2001");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label60;
            }
            if ((temp309 == 1)) {
                this.Manager.Comment("reaching state \'S985\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp307;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,256)" +
                        "\'");
                temp307 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 256u);
                this.Manager.Comment("reaching state \'S2002\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp307, "return of DsrGetDcNameEx, state S2002");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label60;
            }
            if ((temp309 == 2)) {
                this.Manager.Comment("reaching state \'S986\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp308;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp308 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2003\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp308, "return of DsrGetDcNameEx2, state S2003");
                this.Manager.Comment("reaching state \'S2949\'");
                goto label60;
            }
            throw new InvalidOperationException("never reached");
        label60:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS204GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S205");
        }
        
        private void Test_LocateDc_DsrGetDcNameS204GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S205");
        }
        
        private void Test_LocateDc_DsrGetDcNameS204GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S205");
        }
        #endregion
        
        #region Test Starting in S206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS206() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS206");
            this.Manager.Comment("reaching state \'S206\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp310;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp310);
            this.Manager.AddReturn(GetPlatformInfo, null, temp310);
            this.Manager.Comment("reaching state \'S207\'");
            int temp314 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS206GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS206GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS206GetPlatformChecker2)));
            if ((temp314 == 0)) {
                this.Manager.Comment("reaching state \'S987\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp311;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2048" +
                        ")\'");
                temp311 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2048u);
                this.Manager.Comment("reaching state \'S2004\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp311, "return of DsrGetDcNameEx, state S2004");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label61;
            }
            if ((temp314 == 1)) {
                this.Manager.Comment("reaching state \'S988\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp312;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,512)" +
                        "\'");
                temp312 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 512u);
                this.Manager.Comment("reaching state \'S2005\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp312, "return of DsrGetDcNameEx, state S2005");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label61;
            }
            if ((temp314 == 2)) {
                this.Manager.Comment("reaching state \'S989\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp313;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp313 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2006\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp313, "return of DsrGetDcNameEx2, state S2006");
                this.Manager.Comment("reaching state \'S2950\'");
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS206GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S207");
        }
        
        private void Test_LocateDc_DsrGetDcNameS206GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S207");
        }
        
        private void Test_LocateDc_DsrGetDcNameS206GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S207");
        }
        #endregion
        
        #region Test Starting in S208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS208() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS208");
            this.Manager.Comment("reaching state \'S208\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp315;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp315);
            this.Manager.AddReturn(GetPlatformInfo, null, temp315);
            this.Manager.Comment("reaching state \'S209\'");
            int temp319 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS208GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS208GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS208GetPlatformChecker2)));
            if ((temp319 == 0)) {
                this.Manager.Comment("reaching state \'S990\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp316;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,4096" +
                        ")\'");
                temp316 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 4096u);
                this.Manager.Comment("reaching state \'S2007\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp316, "return of DsrGetDcNameEx, state S2007");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label62;
            }
            if ((temp319 == 1)) {
                this.Manager.Comment("reaching state \'S991\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp317;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2048" +
                        ")\'");
                temp317 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2048u);
                this.Manager.Comment("reaching state \'S2008\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp317, "return of DsrGetDcNameEx, state S2008");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label62;
            }
            if ((temp319 == 2)) {
                this.Manager.Comment("reaching state \'S992\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp318;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp318 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2009\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp318, "return of DsrGetDcNameEx2, state S2009");
                this.Manager.Comment("reaching state \'S2951\'");
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS208GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S209");
        }
        
        private void Test_LocateDc_DsrGetDcNameS208GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S209");
        }
        
        private void Test_LocateDc_DsrGetDcNameS208GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S209");
        }
        #endregion
        
        #region Test Starting in S210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS210() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS210");
            this.Manager.Comment("reaching state \'S210\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp320;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp320);
            this.Manager.AddReturn(GetPlatformInfo, null, temp320);
            this.Manager.Comment("reaching state \'S211\'");
            int temp324 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS210GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS210GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS210GetPlatformChecker2)));
            if ((temp324 == 0)) {
                this.Manager.Comment("reaching state \'S993\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp321;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,5242" +
                        "88)\'");
                temp321 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 524288u);
                this.Manager.Comment("reaching state \'S2010\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp321, "return of DsrGetDcNameEx, state S2010");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label63;
            }
            if ((temp324 == 1)) {
                this.Manager.Comment("reaching state \'S994\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp322;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1966" +
                        "08)\'");
                temp322 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104894");
                this.Manager.Comment("reaching state \'S2011\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp322, "return of DsrGetDcNameEx, state S2011");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label63;
            }
            if ((temp324 == 2)) {
                this.Manager.Comment("reaching state \'S995\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp323;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp323 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2012\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp323, "return of DsrGetDcNameEx2, state S2012");
                this.Manager.Comment("reaching state \'S2952\'");
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS210GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S211");
        }
        
        private void Test_LocateDc_DsrGetDcNameS210GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S211");
        }
        
        private void Test_LocateDc_DsrGetDcNameS210GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S211");
        }
        #endregion
        
        #region Test Starting in S212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS212() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS212");
            this.Manager.Comment("reaching state \'S212\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp325;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp325);
            this.Manager.AddReturn(GetPlatformInfo, null, temp325);
            this.Manager.Comment("reaching state \'S213\'");
            int temp329 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS212GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS212GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS212GetPlatformChecker2)));
            if ((temp329 == 0)) {
                this.Manager.Comment("reaching state \'S996\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp326;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1638" +
                        "4)\'");
                temp326 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16384u);
                this.Manager.Comment("reaching state \'S2013\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp326, "return of DsrGetDcNameEx, state S2013");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label64;
            }
            if ((temp329 == 1)) {
                this.Manager.Comment("reaching state \'S997\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp327;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,3221" +
                        "225472)\'");
                temp327 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104895");
                this.Manager.Comment("reaching state \'S2014\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp327, "return of DsrGetDcNameEx, state S2014");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label64;
            }
            if ((temp329 == 2)) {
                this.Manager.Comment("reaching state \'S998\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp328;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp328 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2015\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp328, "return of DsrGetDcNameEx2, state S2015");
                this.Manager.Comment("reaching state \'S2953\'");
                goto label64;
            }
            throw new InvalidOperationException("never reached");
        label64:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS212GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S213");
        }
        
        private void Test_LocateDc_DsrGetDcNameS212GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S213");
        }
        
        private void Test_LocateDc_DsrGetDcNameS212GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S213");
        }
        #endregion
        
        #region Test Starting in S214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS214() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS214");
            this.Manager.Comment("reaching state \'S214\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp330;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp330);
            this.Manager.AddReturn(GetPlatformInfo, null, temp330);
            this.Manager.Comment("reaching state \'S215\'");
            int temp334 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS214GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS214GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS214GetPlatformChecker2)));
            if ((temp334 == 0)) {
                this.Manager.Comment("reaching state \'S1000\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp331;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,8192" +
                        ")\'");
                temp331 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 8192u);
                this.Manager.Comment("reaching state \'S2017\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp331, "return of DsrGetDcNameEx, state S2017");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label65;
            }
            if ((temp334 == 1)) {
                this.Manager.Comment("reaching state \'S1001\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp332;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp332 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2018\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp332, "return of DsrGetDcNameEx2, state S2018");
                this.Manager.Comment("reaching state \'S2954\'");
                goto label65;
            }
            if ((temp334 == 2)) {
                this.Manager.Comment("reaching state \'S999\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp333;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2147" +
                        "483648)\'");
                temp333 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2147483648u);
                this.Manager.Comment("reaching state \'S2016\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp333, "return of DsrGetDcNameEx, state S2016");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS214GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S215");
        }
        
        private void Test_LocateDc_DsrGetDcNameS214GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S215");
        }
        
        private void Test_LocateDc_DsrGetDcNameS214GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S215");
        }
        #endregion
        
        #region Test Starting in S216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS216() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS216");
            this.Manager.Comment("reaching state \'S216\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp335;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp335);
            this.Manager.AddReturn(GetPlatformInfo, null, temp335);
            this.Manager.Comment("reaching state \'S217\'");
            int temp339 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS216GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS216GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS216GetPlatformChecker2)));
            if ((temp339 == 0)) {
                this.Manager.Comment("reaching state \'S1002\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp336;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1966" +
                        "08)\'");
                temp336 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104894");
                this.Manager.Comment("reaching state \'S2019\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp336, "return of DsrGetDcNameEx, state S2019");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label66;
            }
            if ((temp339 == 1)) {
                this.Manager.Comment("reaching state \'S1003\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp337;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1638" +
                        "4)\'");
                temp337 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16384u);
                this.Manager.Comment("reaching state \'S2020\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp337, "return of DsrGetDcNameEx, state S2020");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label66;
            }
            if ((temp339 == 2)) {
                this.Manager.Comment("reaching state \'S1004\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp338;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp338 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2021\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp338, "return of DsrGetDcNameEx2, state S2021");
                this.Manager.Comment("reaching state \'S2955\'");
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS216GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S217");
        }
        
        private void Test_LocateDc_DsrGetDcNameS216GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S217");
        }
        
        private void Test_LocateDc_DsrGetDcNameS216GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S217");
        }
        #endregion
        
        #region Test Starting in S218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS218() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS218");
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp340;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp340);
            this.Manager.AddReturn(GetPlatformInfo, null, temp340);
            this.Manager.Comment("reaching state \'S219\'");
            int temp344 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS218GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS218GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS218GetPlatformChecker2)));
            if ((temp344 == 0)) {
                this.Manager.Comment("reaching state \'S1005\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp341;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1073" +
                        "741824)\'");
                temp341 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1073741824u);
                this.Manager.Comment("reaching state \'S2022\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp341, "return of DsrGetDcNameEx, state S2022");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label67;
            }
            if ((temp344 == 1)) {
                this.Manager.Comment("reaching state \'S1006\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp342;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2621" +
                        "44)\'");
                temp342 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 262144u);
                this.Manager.Comment("reaching state \'S2023\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp342, "return of DsrGetDcNameEx, state S2023");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label67;
            }
            if ((temp344 == 2)) {
                this.Manager.Comment("reaching state \'S1007\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp343;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp343 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2024\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp343, "return of DsrGetDcNameEx2, state S2024");
                this.Manager.Comment("reaching state \'S2956\'");
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS218GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S219");
        }
        
        private void Test_LocateDc_DsrGetDcNameS218GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S219");
        }
        
        private void Test_LocateDc_DsrGetDcNameS218GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S219");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS22() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS22");
            this.Manager.Comment("reaching state \'S22\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp345;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp345);
            this.Manager.AddReturn(GetPlatformInfo, null, temp345);
            this.Manager.Comment("reaching state \'S23\'");
            int temp349 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS22GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS22GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS22GetPlatformChecker2)));
            if ((temp349 == 0)) {
                this.Manager.Comment("reaching state \'S711\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp346;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Primar" +
                        "yDomainGuid,Null,0)\'");
                temp346 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1728\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp346, "return of DsrGetDcNameEx2, state S1728");
                this.Manager.Comment("reaching state \'S2745\'");
                goto label68;
            }
            if ((temp349 == 1)) {
                this.Manager.Comment("reaching state \'S712\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp347;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Primar" +
                        "yDomainGuid,Null,0)\'");
                temp347 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1729\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp347, "return of DsrGetDcNameEx2, state S1729");
                this.Manager.Comment("reaching state \'S2746\'");
                goto label68;
            }
            if ((temp349 == 2)) {
                this.Manager.Comment("reaching state \'S713\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp348;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp348 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1730\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp348, "return of DsrGetDcNameEx2, state S1730");
                this.Manager.Comment("reaching state \'S2747\'");
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS22GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_LocateDc_DsrGetDcNameS22GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_LocateDc_DsrGetDcNameS22GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        #endregion
        
        #region Test Starting in S220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS220() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS220");
            this.Manager.Comment("reaching state \'S220\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp350;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp350);
            this.Manager.AddReturn(GetPlatformInfo, null, temp350);
            this.Manager.Comment("reaching state \'S221\'");
            int temp354 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS220GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS220GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS220GetPlatformChecker2)));
            if ((temp354 == 0)) {
                this.Manager.Comment("reaching state \'S1008\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp351;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,3221" +
                        "225472)\'");
                temp351 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104895");
                this.Manager.Comment("reaching state \'S2025\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp351, "return of DsrGetDcNameEx, state S2025");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label69;
            }
            if ((temp354 == 1)) {
                this.Manager.Comment("reaching state \'S1009\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp352;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1073" +
                        "741824)\'");
                temp352 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1073741824u);
                this.Manager.Comment("reaching state \'S2026\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp352, "return of DsrGetDcNameEx, state S2026");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label69;
            }
            if ((temp354 == 2)) {
                this.Manager.Comment("reaching state \'S1010\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp353;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp353 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2027\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp353, "return of DsrGetDcNameEx2, state S2027");
                this.Manager.Comment("reaching state \'S2957\'");
                goto label69;
            }
            throw new InvalidOperationException("never reached");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS220GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S221");
        }
        
        private void Test_LocateDc_DsrGetDcNameS220GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S221");
        }
        
        private void Test_LocateDc_DsrGetDcNameS220GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S221");
        }
        #endregion
        
        #region Test Starting in S222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS222() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS222");
            this.Manager.Comment("reaching state \'S222\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp355;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp355);
            this.Manager.AddReturn(GetPlatformInfo, null, temp355);
            this.Manager.Comment("reaching state \'S223\'");
            int temp359 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS222GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS222GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS222GetPlatformChecker2)));
            if ((temp359 == 0)) {
                this.Manager.Comment("reaching state \'S1011\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp356;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,8192" +
                        ")\'");
                temp356 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 8192u);
                this.Manager.Comment("reaching state \'S2028\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp356, "return of DsrGetDcNameEx, state S2028");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label70;
            }
            if ((temp359 == 1)) {
                this.Manager.Comment("reaching state \'S1012\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp357;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,5242" +
                        "88)\'");
                temp357 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 524288u);
                this.Manager.Comment("reaching state \'S2029\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp357, "return of DsrGetDcNameEx, state S2029");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label70;
            }
            if ((temp359 == 2)) {
                this.Manager.Comment("reaching state \'S1013\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp358;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp358 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2030\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp358, "return of DsrGetDcNameEx2, state S2030");
                this.Manager.Comment("reaching state \'S2958\'");
                goto label70;
            }
            throw new InvalidOperationException("never reached");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS222GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S223");
        }
        
        private void Test_LocateDc_DsrGetDcNameS222GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S223");
        }
        
        private void Test_LocateDc_DsrGetDcNameS222GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S223");
        }
        #endregion
        
        #region Test Starting in S224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS224() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS224");
            this.Manager.Comment("reaching state \'S224\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp360;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp360);
            this.Manager.AddReturn(GetPlatformInfo, null, temp360);
            this.Manager.Comment("reaching state \'S225\'");
            int temp364 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS224GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS224GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS224GetPlatformChecker2)));
            if ((temp364 == 0)) {
                this.Manager.Comment("reaching state \'S1014\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp361;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,3276" +
                        "8)\'");
                temp361 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32768u);
                this.Manager.Comment("reaching state \'S2031\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp361, "return of DsrGetDcNameEx, state S2031");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label71;
            }
            if ((temp364 == 1)) {
                this.Manager.Comment("reaching state \'S1015\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp362;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2147" +
                        "483648)\'");
                temp362 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2147483648u);
                this.Manager.Comment("reaching state \'S2032\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp362, "return of DsrGetDcNameEx, state S2032");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label71;
            }
            if ((temp364 == 2)) {
                this.Manager.Comment("reaching state \'S1016\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp363;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp363 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2033\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp363, "return of DsrGetDcNameEx2, state S2033");
                this.Manager.Comment("reaching state \'S2959\'");
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS224GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S225");
        }
        
        private void Test_LocateDc_DsrGetDcNameS224GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S225");
        }
        
        private void Test_LocateDc_DsrGetDcNameS224GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S225");
        }
        #endregion
        
        #region Test Starting in S226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS226() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS226");
            this.Manager.Comment("reaching state \'S226\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp365;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp365);
            this.Manager.AddReturn(GetPlatformInfo, null, temp365);
            this.Manager.Comment("reaching state \'S227\'");
            int temp369 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS226GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS226GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS226GetPlatformChecker2)));
            if ((temp369 == 0)) {
                this.Manager.Comment("reaching state \'S1017\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp366;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,257)" +
                        "\'");
                temp366 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 257u);
                this.Manager.Comment("reaching state \'S2034\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp366, "return of DsrGetDcNameEx, state S2034");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label72;
            }
            if ((temp369 == 1)) {
                this.Manager.Comment("reaching state \'S1018\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp367;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,3276" +
                        "8)\'");
                temp367 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32768u);
                this.Manager.Comment("reaching state \'S2035\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp367, "return of DsrGetDcNameEx, state S2035");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label72;
            }
            if ((temp369 == 2)) {
                this.Manager.Comment("reaching state \'S1019\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp368;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp368 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2036\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp368, "return of DsrGetDcNameEx2, state S2036");
                this.Manager.Comment("reaching state \'S2960\'");
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS226GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S227");
        }
        
        private void Test_LocateDc_DsrGetDcNameS226GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S227");
        }
        
        private void Test_LocateDc_DsrGetDcNameS226GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S227");
        }
        #endregion
        
        #region Test Starting in S228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS228() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS228");
            this.Manager.Comment("reaching state \'S228\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp370;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp370);
            this.Manager.AddReturn(GetPlatformInfo, null, temp370);
            this.Manager.Comment("reaching state \'S229\'");
            int temp374 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS228GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS228GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS228GetPlatformChecker2)));
            if ((temp374 == 0)) {
                this.Manager.Comment("reaching state \'S1020\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp371;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,128)" +
                        "\'");
                temp371 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 128u);
                this.Manager.Comment("reaching state \'S2037\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp371, "return of DsrGetDcNameEx, state S2037");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label73;
            }
            if ((temp374 == 1)) {
                this.Manager.Comment("reaching state \'S1021\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp372;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,4096" +
                        ")\'");
                temp372 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 4096u);
                this.Manager.Comment("reaching state \'S2038\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp372, "return of DsrGetDcNameEx, state S2038");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label73;
            }
            if ((temp374 == 2)) {
                this.Manager.Comment("reaching state \'S1022\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp373;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp373 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2039\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp373, "return of DsrGetDcNameEx2, state S2039");
                this.Manager.Comment("reaching state \'S2961\'");
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS228GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S229");
        }
        
        private void Test_LocateDc_DsrGetDcNameS228GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S229");
        }
        
        private void Test_LocateDc_DsrGetDcNameS228GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S229");
        }
        #endregion
        
        #region Test Starting in S230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS230() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS230");
            this.Manager.Comment("reaching state \'S230\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp375;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp375);
            this.Manager.AddReturn(GetPlatformInfo, null, temp375);
            this.Manager.Comment("reaching state \'S231\'");
            int temp379 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS230GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS230GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS230GetPlatformChecker2)));
            if ((temp379 == 0)) {
                this.Manager.Comment("reaching state \'S1023\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp376;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,192)" +
                        "\'");
                temp376 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104892");
                this.Manager.Comment("reaching state \'S2040\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp376, "return of DsrGetDcNameEx, state S2040");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label74;
            }
            if ((temp379 == 1)) {
                this.Manager.Comment("reaching state \'S1024\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp377;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,128)" +
                        "\'");
                temp377 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 128u);
                this.Manager.Comment("reaching state \'S2041\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp377, "return of DsrGetDcNameEx, state S2041");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label74;
            }
            if ((temp379 == 2)) {
                this.Manager.Comment("reaching state \'S1025\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp378;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp378 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2042\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp378, "return of DsrGetDcNameEx2, state S2042");
                this.Manager.Comment("reaching state \'S2962\'");
                goto label74;
            }
            throw new InvalidOperationException("never reached");
        label74:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS230GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S231");
        }
        
        private void Test_LocateDc_DsrGetDcNameS230GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S231");
        }
        
        private void Test_LocateDc_DsrGetDcNameS230GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S231");
        }
        #endregion
        
        #region Test Starting in S232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS232() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS232");
            this.Manager.Comment("reaching state \'S232\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp380;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp380);
            this.Manager.AddReturn(GetPlatformInfo, null, temp380);
            this.Manager.Comment("reaching state \'S233\'");
            int temp384 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS232GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS232GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS232GetPlatformChecker2)));
            if ((temp384 == 0)) {
                this.Manager.Comment("reaching state \'S1026\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp381;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1310" +
                        "72)\'");
                temp381 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2043\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp381, "return of DsrGetDcNameEx, state S2043");
                Test_LocateDc_DsrGetDcNameS2910();
                goto label75;
            }
            if ((temp384 == 1)) {
                this.Manager.Comment("reaching state \'S1027\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp382;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,257)" +
                        "\'");
                temp382 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 257u);
                this.Manager.Comment("reaching state \'S2044\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp382, "return of DsrGetDcNameEx, state S2044");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label75;
            }
            if ((temp384 == 2)) {
                this.Manager.Comment("reaching state \'S1028\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp383;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp383 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2045\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp383, "return of DsrGetDcNameEx2, state S2045");
                this.Manager.Comment("reaching state \'S2963\'");
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS232GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S233");
        }
        
        private void Test_LocateDc_DsrGetDcNameS232GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S233");
        }
        
        private void Test_LocateDc_DsrGetDcNameS232GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S233");
        }
        #endregion
        
        #region Test Starting in S234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS234() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS234");
            this.Manager.Comment("reaching state \'S234\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp385;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp385);
            this.Manager.AddReturn(GetPlatformInfo, null, temp385);
            this.Manager.Comment("reaching state \'S235\'");
            int temp389 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS234GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS234GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS234GetPlatformChecker2)));
            if ((temp389 == 0)) {
                this.Manager.Comment("reaching state \'S1029\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp386;
                this.Manager.Comment("executing step \'call DsrGetDcName(NonDcServer,FqdnFormatDomainName,PrimaryDomainG" +
                        "uid,Null,0)\'");
                temp386 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2046\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp386, "return of DsrGetDcName, state S2046");
                this.Manager.Comment("reaching state \'S2964\'");
                goto label76;
            }
            if ((temp389 == 1)) {
                this.Manager.Comment("reaching state \'S1030\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp387;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,192)" +
                        "\'");
                temp387 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104892");
                this.Manager.Comment("reaching state \'S2047\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp387, "return of DsrGetDcNameEx, state S2047");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label76;
            }
            if ((temp389 == 2)) {
                this.Manager.Comment("reaching state \'S1031\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp388;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp388 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2048\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp388, "return of DsrGetDcNameEx2, state S2048");
                this.Manager.Comment("reaching state \'S2965\'");
                goto label76;
            }
            throw new InvalidOperationException("never reached");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS234GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S235");
        }
        
        private void Test_LocateDc_DsrGetDcNameS234GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S235");
        }
        
        private void Test_LocateDc_DsrGetDcNameS234GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S235");
        }
        #endregion
        
        #region Test Starting in S236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS236() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS236");
            this.Manager.Comment("reaching state \'S236\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp390;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp390);
            this.Manager.AddReturn(GetPlatformInfo, null, temp390);
            this.Manager.Comment("reaching state \'S237\'");
            int temp394 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS236GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS236GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS236GetPlatformChecker2)));
            if ((temp394 == 0)) {
                this.Manager.Comment("reaching state \'S1032\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp391;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,0)\'");
                temp391 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2049\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp391, "return of DsrGetDcName, state S2049");
                this.Manager.Comment("reaching state \'S2966\'");
                goto label77;
            }
            if ((temp394 == 1)) {
                this.Manager.Comment("reaching state \'S1033\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp392;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1310" +
                        "72)\'");
                temp392 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2050\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp392, "return of DsrGetDcNameEx, state S2050");
                Test_LocateDc_DsrGetDcNameS2913();
                goto label77;
            }
            if ((temp394 == 2)) {
                this.Manager.Comment("reaching state \'S1034\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp393;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp393 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2051\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp393, "return of DsrGetDcNameEx2, state S2051");
                this.Manager.Comment("reaching state \'S2967\'");
                goto label77;
            }
            throw new InvalidOperationException("never reached");
        label77:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS236GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S237");
        }
        
        private void Test_LocateDc_DsrGetDcNameS236GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S237");
        }
        
        private void Test_LocateDc_DsrGetDcNameS236GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S237");
        }
        #endregion
        
        #region Test Starting in S238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS238() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS238");
            this.Manager.Comment("reaching state \'S238\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp395;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp395);
            this.Manager.AddReturn(GetPlatformInfo, null, temp395);
            this.Manager.Comment("reaching state \'S239\'");
            int temp399 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS238GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS238GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS238GetPlatformChecker2)));
            if ((temp399 == 0)) {
                this.Manager.Comment("reaching state \'S1035\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp396;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,64)\'");
                temp396 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2052\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp396, "return of DsrGetDcName, state S2052");
                this.Manager.Comment("reaching state \'S2968\'");
                goto label78;
            }
            if ((temp399 == 1)) {
                this.Manager.Comment("reaching state \'S1036\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp397;
                this.Manager.Comment("executing step \'call DsrGetDcName(NonDcServer,FqdnFormatDomainName,PrimaryDomainG" +
                        "uid,Null,0)\'");
                temp397 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2053\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp397, "return of DsrGetDcName, state S2053");
                this.Manager.Comment("reaching state \'S2969\'");
                goto label78;
            }
            if ((temp399 == 2)) {
                this.Manager.Comment("reaching state \'S1037\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp398;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp398 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2054\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp398, "return of DsrGetDcNameEx2, state S2054");
                this.Manager.Comment("reaching state \'S2970\'");
                goto label78;
            }
            throw new InvalidOperationException("never reached");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS238GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S239");
        }
        
        private void Test_LocateDc_DsrGetDcNameS238GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S239");
        }
        
        private void Test_LocateDc_DsrGetDcNameS238GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S239");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS24() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS24");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp400;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp400);
            this.Manager.AddReturn(GetPlatformInfo, null, temp400);
            this.Manager.Comment("reaching state \'S25\'");
            int temp404 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS24GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS24GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS24GetPlatformChecker2)));
            if ((temp404 == 0)) {
                this.Manager.Comment("reaching state \'S714\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp401;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Truste" +
                        "dDomainGuid,Null,0)\'");
                temp401 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1731\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp401, "return of DsrGetDcNameEx2, state S1731");
                this.Manager.Comment("reaching state \'S2748\'");
                goto label79;
            }
            if ((temp404 == 1)) {
                this.Manager.Comment("reaching state \'S715\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp402;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Truste" +
                        "dDomainGuid,Null,0)\'");
                temp402 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1732\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp402, "return of DsrGetDcNameEx2, state S1732");
                this.Manager.Comment("reaching state \'S2749\'");
                goto label79;
            }
            if ((temp404 == 2)) {
                this.Manager.Comment("reaching state \'S716\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp403;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp403 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1733\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp403, "return of DsrGetDcNameEx2, state S1733");
                this.Manager.Comment("reaching state \'S2750\'");
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS24GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_LocateDc_DsrGetDcNameS24GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_LocateDc_DsrGetDcNameS24GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        #endregion
        
        #region Test Starting in S240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS240() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS240");
            this.Manager.Comment("reaching state \'S240\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp405;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp405);
            this.Manager.AddReturn(GetPlatformInfo, null, temp405);
            this.Manager.Comment("reaching state \'S241\'");
            int temp409 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS240GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS240GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS240GetPlatformChecker2)));
            if ((temp409 == 0)) {
                this.Manager.Comment("reaching state \'S1038\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp406;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,PrimaryDomainGui" +
                        "d,Null,0)\'");
                temp406 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2055\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp406, "return of DsrGetDcName, state S2055");
                this.Manager.Comment("reaching state \'S2971\'");
                goto label80;
            }
            if ((temp409 == 1)) {
                this.Manager.Comment("reaching state \'S1039\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp407;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,0)\'");
                temp407 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2056\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp407, "return of DsrGetDcName, state S2056");
                this.Manager.Comment("reaching state \'S2972\'");
                goto label80;
            }
            if ((temp409 == 2)) {
                this.Manager.Comment("reaching state \'S1040\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp408;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp408 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2057\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp408, "return of DsrGetDcNameEx2, state S2057");
                this.Manager.Comment("reaching state \'S2973\'");
                goto label80;
            }
            throw new InvalidOperationException("never reached");
        label80:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS240GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S241");
        }
        
        private void Test_LocateDc_DsrGetDcNameS240GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S241");
        }
        
        private void Test_LocateDc_DsrGetDcNameS240GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S241");
        }
        #endregion
        
        #region Test Starting in S242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS242() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS242");
            this.Manager.Comment("reaching state \'S242\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp410;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp410);
            this.Manager.AddReturn(GetPlatformInfo, null, temp410);
            this.Manager.Comment("reaching state \'S243\'");
            int temp414 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS242GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS242GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS242GetPlatformChecker2)));
            if ((temp414 == 0)) {
                this.Manager.Comment("reaching state \'S1041\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp411;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,NonNull,0)\'" +
                        "");
                temp411 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(1)), 0u);
                this.Manager.Comment("reaching state \'S2058\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp411, "return of DsrGetDcName, state S2058");
                this.Manager.Comment("reaching state \'S2974\'");
                goto label81;
            }
            if ((temp414 == 1)) {
                this.Manager.Comment("reaching state \'S1042\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp412;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,64)\'");
                temp412 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2059\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp412, "return of DsrGetDcName, state S2059");
                this.Manager.Comment("reaching state \'S2975\'");
                goto label81;
            }
            if ((temp414 == 2)) {
                this.Manager.Comment("reaching state \'S1043\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp413;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp413 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2060\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp413, "return of DsrGetDcNameEx2, state S2060");
                this.Manager.Comment("reaching state \'S2976\'");
                goto label81;
            }
            throw new InvalidOperationException("never reached");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS242GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S243");
        }
        
        private void Test_LocateDc_DsrGetDcNameS242GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S243");
        }
        
        private void Test_LocateDc_DsrGetDcNameS242GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S243");
        }
        #endregion
        
        #region Test Starting in S244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS244() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS244");
            this.Manager.Comment("reaching state \'S244\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp415;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp415);
            this.Manager.AddReturn(GetPlatformInfo, null, temp415);
            this.Manager.Comment("reaching state \'S245\'");
            int temp419 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS244GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS244GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS244GetPlatformChecker2)));
            if ((temp419 == 0)) {
                this.Manager.Comment("reaching state \'S1044\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp416;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,0)\'" +
                        "");
                temp416 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2061\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp416, "return of DsrGetDcName, state S2061");
                this.Manager.Comment("reaching state \'S2977\'");
                goto label82;
            }
            if ((temp419 == 1)) {
                this.Manager.Comment("reaching state \'S1045\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp417;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,PrimaryDomainGui" +
                        "d,Null,0)\'");
                temp417 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2062\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp417, "return of DsrGetDcName, state S2062");
                this.Manager.Comment("reaching state \'S2978\'");
                goto label82;
            }
            if ((temp419 == 2)) {
                this.Manager.Comment("reaching state \'S1046\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp418;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp418 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2063\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp418, "return of DsrGetDcNameEx2, state S2063");
                this.Manager.Comment("reaching state \'S2979\'");
                goto label82;
            }
            throw new InvalidOperationException("never reached");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS244GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S245");
        }
        
        private void Test_LocateDc_DsrGetDcNameS244GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S245");
        }
        
        private void Test_LocateDc_DsrGetDcNameS244GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S245");
        }
        #endregion
        
        #region Test Starting in S246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS246() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS246");
            this.Manager.Comment("reaching state \'S246\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp420;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp420);
            this.Manager.AddReturn(GetPlatformInfo, null, temp420);
            this.Manager.Comment("reaching state \'S247\'");
            int temp424 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS246GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS246GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS246GetPlatformChecker2)));
            if ((temp424 == 0)) {
                this.Manager.Comment("reaching state \'S1047\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp421;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,0)\'");
                temp421 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2064\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp421, "return of DsrGetDcName, state S2064");
                this.Manager.Comment("reaching state \'S2980\'");
                goto label83;
            }
            if ((temp424 == 1)) {
                this.Manager.Comment("reaching state \'S1048\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp422;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,NonNull,0)\'" +
                        "");
                temp422 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(1)), 0u);
                this.Manager.Comment("reaching state \'S2065\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp422, "return of DsrGetDcName, state S2065");
                this.Manager.Comment("reaching state \'S2981\'");
                goto label83;
            }
            if ((temp424 == 2)) {
                this.Manager.Comment("reaching state \'S1049\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp423;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp423 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2066\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp423, "return of DsrGetDcNameEx2, state S2066");
                this.Manager.Comment("reaching state \'S2982\'");
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS246GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S247");
        }
        
        private void Test_LocateDc_DsrGetDcNameS246GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S247");
        }
        
        private void Test_LocateDc_DsrGetDcNameS246GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S247");
        }
        #endregion
        
        #region Test Starting in S248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS248() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS248");
            this.Manager.Comment("reaching state \'S248\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp425;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp425);
            this.Manager.AddReturn(GetPlatformInfo, null, temp425);
            this.Manager.Comment("reaching state \'S249\'");
            int temp429 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS248GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS248GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS248GetPlatformChecker2)));
            if ((temp429 == 0)) {
                this.Manager.Comment("reaching state \'S1050\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp426;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,0)\'");
                temp426 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2067\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp426, "return of DsrGetDcName, state S2067");
                this.Manager.Comment("reaching state \'S2983\'");
                goto label84;
            }
            if ((temp429 == 1)) {
                this.Manager.Comment("reaching state \'S1051\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp427;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,0)\'" +
                        "");
                temp427 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2068\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp427, "return of DsrGetDcName, state S2068");
                this.Manager.Comment("reaching state \'S2984\'");
                goto label84;
            }
            if ((temp429 == 2)) {
                this.Manager.Comment("reaching state \'S1052\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp428;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp428 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2069\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp428, "return of DsrGetDcNameEx2, state S2069");
                this.Manager.Comment("reaching state \'S2985\'");
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS248GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S249");
        }
        
        private void Test_LocateDc_DsrGetDcNameS248GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S249");
        }
        
        private void Test_LocateDc_DsrGetDcNameS248GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S249");
        }
        #endregion
        
        #region Test Starting in S250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS250() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS250");
            this.Manager.Comment("reaching state \'S250\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp430;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp430);
            this.Manager.AddReturn(GetPlatformInfo, null, temp430);
            this.Manager.Comment("reaching state \'S251\'");
            int temp434 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS250GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS250GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS250GetPlatformChecker2)));
            if ((temp434 == 0)) {
                this.Manager.Comment("reaching state \'S1053\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp431;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,0)\'" +
                        "");
                temp431 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103164");
                this.Manager.Comment("reaching state \'S2070\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp431, "return of DsrGetDcName, state S2070");
                this.Manager.Comment("reaching state \'S2986\'");
                goto label85;
            }
            if ((temp434 == 1)) {
                this.Manager.Comment("reaching state \'S1054\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp432;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,0)\'");
                temp432 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2071\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp432, "return of DsrGetDcName, state S2071");
                this.Manager.Comment("reaching state \'S2987\'");
                goto label85;
            }
            if ((temp434 == 2)) {
                this.Manager.Comment("reaching state \'S1055\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp433;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp433 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2072\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp433, "return of DsrGetDcNameEx2, state S2072");
                this.Manager.Comment("reaching state \'S2988\'");
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS250GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S251");
        }
        
        private void Test_LocateDc_DsrGetDcNameS250GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S251");
        }
        
        private void Test_LocateDc_DsrGetDcNameS250GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S251");
        }
        #endregion
        
        #region Test Starting in S252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS252() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS252");
            this.Manager.Comment("reaching state \'S252\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp435;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp435);
            this.Manager.AddReturn(GetPlatformInfo, null, temp435);
            this.Manager.Comment("reaching state \'S253\'");
            int temp439 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS252GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS252GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS252GetPlatformChecker2)));
            if ((temp439 == 0)) {
                this.Manager.Comment("reaching state \'S1056\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp436;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,65536)\'");
                temp436 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2073\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp436, "return of DsrGetDcName, state S2073");
                this.Manager.Comment("reaching state \'S2989\'");
                goto label86;
            }
            if ((temp439 == 1)) {
                this.Manager.Comment("reaching state \'S1057\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp437;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,0)\'");
                temp437 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2074\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp437, "return of DsrGetDcName, state S2074");
                this.Manager.Comment("reaching state \'S2990\'");
                goto label86;
            }
            if ((temp439 == 2)) {
                this.Manager.Comment("reaching state \'S1058\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp438;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp438 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2075\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp438, "return of DsrGetDcNameEx2, state S2075");
                this.Manager.Comment("reaching state \'S2991\'");
                goto label86;
            }
            throw new InvalidOperationException("never reached");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS252GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S253");
        }
        
        private void Test_LocateDc_DsrGetDcNameS252GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S253");
        }
        
        private void Test_LocateDc_DsrGetDcNameS252GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S253");
        }
        #endregion
        
        #region Test Starting in S254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS254() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS254");
            this.Manager.Comment("reaching state \'S254\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp440;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp440);
            this.Manager.AddReturn(GetPlatformInfo, null, temp440);
            this.Manager.Comment("reaching state \'S255\'");
            int temp444 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS254GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS254GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS254GetPlatformChecker2)));
            if ((temp444 == 0)) {
                this.Manager.Comment("reaching state \'S1059\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp441;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,InvalidDomainGui" +
                        "d,Null,0)\'");
                temp441 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2076\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp441, "return of DsrGetDcName, state S2076");
                this.Manager.Comment("reaching state \'S2992\'");
                goto label87;
            }
            if ((temp444 == 1)) {
                this.Manager.Comment("reaching state \'S1060\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp442;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,0)\'" +
                        "");
                temp442 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103164");
                this.Manager.Comment("reaching state \'S2077\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp442, "return of DsrGetDcName, state S2077");
                this.Manager.Comment("reaching state \'S2993\'");
                goto label87;
            }
            if ((temp444 == 2)) {
                this.Manager.Comment("reaching state \'S1061\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp443;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp443 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2078\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp443, "return of DsrGetDcNameEx2, state S2078");
                this.Manager.Comment("reaching state \'S2994\'");
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS254GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S255");
        }
        
        private void Test_LocateDc_DsrGetDcNameS254GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S255");
        }
        
        private void Test_LocateDc_DsrGetDcNameS254GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S255");
        }
        #endregion
        
        #region Test Starting in S256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS256() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS256");
            this.Manager.Comment("reaching state \'S256\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp445;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp445);
            this.Manager.AddReturn(GetPlatformInfo, null, temp445);
            this.Manager.Comment("reaching state \'S257\'");
            int temp449 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS256GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS256GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS256GetPlatformChecker2)));
            if ((temp449 == 0)) {
                this.Manager.Comment("reaching state \'S1062\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp446;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,TrustedDomainGui" +
                        "d,Null,0)\'");
                temp446 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2079\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp446, "return of DsrGetDcName, state S2079");
                this.Manager.Comment("reaching state \'S2995\'");
                goto label88;
            }
            if ((temp449 == 1)) {
                this.Manager.Comment("reaching state \'S1063\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp447;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,65536)\'");
                temp447 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2080\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp447, "return of DsrGetDcName, state S2080");
                this.Manager.Comment("reaching state \'S2996\'");
                goto label88;
            }
            if ((temp449 == 2)) {
                this.Manager.Comment("reaching state \'S1064\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp448;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp448 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2081\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp448, "return of DsrGetDcNameEx2, state S2081");
                this.Manager.Comment("reaching state \'S2997\'");
                goto label88;
            }
            throw new InvalidOperationException("never reached");
        label88:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS256GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S257");
        }
        
        private void Test_LocateDc_DsrGetDcNameS256GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S257");
        }
        
        private void Test_LocateDc_DsrGetDcNameS256GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S257");
        }
        #endregion
        
        #region Test Starting in S258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS258() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS258");
            this.Manager.Comment("reaching state \'S258\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp450;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp450);
            this.Manager.AddReturn(GetPlatformInfo, null, temp450);
            this.Manager.Comment("reaching state \'S259\'");
            int temp454 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS258GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS258GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS258GetPlatformChecker2)));
            if ((temp454 == 0)) {
                this.Manager.Comment("reaching state \'S1065\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp451;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp451 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2082\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp451, "return of DsrGetDcName, state S2082");
                this.Manager.Comment("reaching state \'S2998\'");
                goto label89;
            }
            if ((temp454 == 1)) {
                this.Manager.Comment("reaching state \'S1066\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp452;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,InvalidDomainGui" +
                        "d,Null,0)\'");
                temp452 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2083\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp452, "return of DsrGetDcName, state S2083");
                this.Manager.Comment("reaching state \'S2999\'");
                goto label89;
            }
            if ((temp454 == 2)) {
                this.Manager.Comment("reaching state \'S1067\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp453;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp453 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2084\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp453, "return of DsrGetDcNameEx2, state S2084");
                this.Manager.Comment("reaching state \'S3000\'");
                goto label89;
            }
            throw new InvalidOperationException("never reached");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS258GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S259");
        }
        
        private void Test_LocateDc_DsrGetDcNameS258GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S259");
        }
        
        private void Test_LocateDc_DsrGetDcNameS258GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S259");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS26() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS26");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp455;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp455);
            this.Manager.AddReturn(GetPlatformInfo, null, temp455);
            this.Manager.Comment("reaching state \'S27\'");
            int temp459 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS26GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS26GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS26GetPlatformChecker2)));
            if ((temp459 == 0)) {
                this.Manager.Comment("reaching state \'S717\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp456;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp456 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1734\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp456, "return of DsrGetDcNameEx2, state S1734");
                this.Manager.Comment("reaching state \'S2751\'");
                goto label90;
            }
            if ((temp459 == 1)) {
                this.Manager.Comment("reaching state \'S718\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp457;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp457 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1735\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp457, "return of DsrGetDcNameEx2, state S1735");
                this.Manager.Comment("reaching state \'S2752\'");
                goto label90;
            }
            if ((temp459 == 2)) {
                this.Manager.Comment("reaching state \'S719\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp458;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp458 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1736\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp458, "return of DsrGetDcNameEx2, state S1736");
                this.Manager.Comment("reaching state \'S2753\'");
                goto label90;
            }
            throw new InvalidOperationException("never reached");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS26GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_LocateDc_DsrGetDcNameS26GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_LocateDc_DsrGetDcNameS26GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        #endregion
        
        #region Test Starting in S260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS260() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS260");
            this.Manager.Comment("reaching state \'S260\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp460;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp460);
            this.Manager.AddReturn(GetPlatformInfo, null, temp460);
            this.Manager.Comment("reaching state \'S261\'");
            int temp464 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS260GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS260GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS260GetPlatformChecker2)));
            if ((temp464 == 0)) {
                this.Manager.Comment("reaching state \'S1068\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp461;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,64)" +
                        "\'");
                temp461 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2085\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp461, "return of DsrGetDcName, state S2085");
                this.Manager.Comment("reaching state \'S3001\'");
                goto label91;
            }
            if ((temp464 == 1)) {
                this.Manager.Comment("reaching state \'S1069\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp462;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,TrustedDomainGui" +
                        "d,Null,0)\'");
                temp462 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2086\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp462, "return of DsrGetDcName, state S2086");
                this.Manager.Comment("reaching state \'S3002\'");
                goto label91;
            }
            if ((temp464 == 2)) {
                this.Manager.Comment("reaching state \'S1070\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp463;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp463 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2087\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp463, "return of DsrGetDcNameEx2, state S2087");
                this.Manager.Comment("reaching state \'S3003\'");
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS260GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S261");
        }
        
        private void Test_LocateDc_DsrGetDcNameS260GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S261");
        }
        
        private void Test_LocateDc_DsrGetDcNameS260GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S261");
        }
        #endregion
        
        #region Test Starting in S262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS262() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS262");
            this.Manager.Comment("reaching state \'S262\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp465;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp465);
            this.Manager.AddReturn(GetPlatformInfo, null, temp465);
            this.Manager.Comment("reaching state \'S263\'");
            int temp469 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS262GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS262GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS262GetPlatformChecker2)));
            if ((temp469 == 0)) {
                this.Manager.Comment("reaching state \'S1071\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp466;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,64)\'");
                temp466 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2088\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp466, "return of DsrGetDcName, state S2088");
                this.Manager.Comment("reaching state \'S3004\'");
                goto label92;
            }
            if ((temp469 == 1)) {
                this.Manager.Comment("reaching state \'S1072\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp467;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp467 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2089\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp467, "return of DsrGetDcName, state S2089");
                this.Manager.Comment("reaching state \'S3005\'");
                goto label92;
            }
            if ((temp469 == 2)) {
                this.Manager.Comment("reaching state \'S1073\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp468;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp468 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2090\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp468, "return of DsrGetDcNameEx2, state S2090");
                this.Manager.Comment("reaching state \'S3006\'");
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS262GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S263");
        }
        
        private void Test_LocateDc_DsrGetDcNameS262GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S263");
        }
        
        private void Test_LocateDc_DsrGetDcNameS262GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S263");
        }
        #endregion
        
        #region Test Starting in S264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS264() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS264");
            this.Manager.Comment("reaching state \'S264\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp470;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp470);
            this.Manager.AddReturn(GetPlatformInfo, null, temp470);
            this.Manager.Comment("reaching state \'S265\'");
            int temp474 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS264GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS264GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS264GetPlatformChecker2)));
            if ((temp474 == 0)) {
                this.Manager.Comment("reaching state \'S1074\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp471;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,64)\'");
                temp471 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103161");
                this.Manager.Comment("reaching state \'S2091\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp471, "return of DsrGetDcName, state S2091");
                this.Manager.Comment("reaching state \'S3007\'");
                goto label93;
            }
            if ((temp474 == 1)) {
                this.Manager.Comment("reaching state \'S1075\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp472;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,64)" +
                        "\'");
                temp472 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2092\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp472, "return of DsrGetDcName, state S2092");
                this.Manager.Comment("reaching state \'S3008\'");
                goto label93;
            }
            if ((temp474 == 2)) {
                this.Manager.Comment("reaching state \'S1076\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp473;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp473 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2093\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp473, "return of DsrGetDcNameEx2, state S2093");
                this.Manager.Comment("reaching state \'S3009\'");
                goto label93;
            }
            throw new InvalidOperationException("never reached");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS264GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S265");
        }
        
        private void Test_LocateDc_DsrGetDcNameS264GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S265");
        }
        
        private void Test_LocateDc_DsrGetDcNameS264GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S265");
        }
        #endregion
        
        #region Test Starting in S266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS266() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS266");
            this.Manager.Comment("reaching state \'S266\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp475;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp475);
            this.Manager.AddReturn(GetPlatformInfo, null, temp475);
            this.Manager.Comment("reaching state \'S267\'");
            int temp479 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS266GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS266GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS266GetPlatformChecker2)));
            if ((temp479 == 0)) {
                this.Manager.Comment("reaching state \'S1077\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp476;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,64)" +
                        "\'");
                temp476 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103164");
                this.Manager.Comment("reaching state \'S2094\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp476, "return of DsrGetDcName, state S2094");
                this.Manager.Comment("reaching state \'S3010\'");
                goto label94;
            }
            if ((temp479 == 1)) {
                this.Manager.Comment("reaching state \'S1078\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp477;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,64)\'");
                temp477 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2095\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp477, "return of DsrGetDcName, state S2095");
                this.Manager.Comment("reaching state \'S3011\'");
                goto label94;
            }
            if ((temp479 == 2)) {
                this.Manager.Comment("reaching state \'S1079\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp478;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp478 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2096\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp478, "return of DsrGetDcNameEx2, state S2096");
                this.Manager.Comment("reaching state \'S3012\'");
                goto label94;
            }
            throw new InvalidOperationException("never reached");
        label94:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS266GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S267");
        }
        
        private void Test_LocateDc_DsrGetDcNameS266GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S267");
        }
        
        private void Test_LocateDc_DsrGetDcNameS266GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S267");
        }
        #endregion
        
        #region Test Starting in S268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS268() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS268");
            this.Manager.Comment("reaching state \'S268\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp480;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp480);
            this.Manager.AddReturn(GetPlatformInfo, null, temp480);
            this.Manager.Comment("reaching state \'S269\'");
            int temp484 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS268GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS268GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS268GetPlatformChecker2)));
            if ((temp484 == 0)) {
                this.Manager.Comment("reaching state \'S1080\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp481;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,64)\'");
                temp481 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2097\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp481, "return of DsrGetDcName, state S2097");
                this.Manager.Comment("reaching state \'S3013\'");
                goto label95;
            }
            if ((temp484 == 1)) {
                this.Manager.Comment("reaching state \'S1081\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp482;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,64)\'");
                temp482 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103161");
                this.Manager.Comment("reaching state \'S2098\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp482, "return of DsrGetDcName, state S2098");
                this.Manager.Comment("reaching state \'S3014\'");
                goto label95;
            }
            if ((temp484 == 2)) {
                this.Manager.Comment("reaching state \'S1082\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp483;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp483 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2099\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp483, "return of DsrGetDcNameEx2, state S2099");
                this.Manager.Comment("reaching state \'S3015\'");
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS268GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S269");
        }
        
        private void Test_LocateDc_DsrGetDcNameS268GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S269");
        }
        
        private void Test_LocateDc_DsrGetDcNameS268GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S269");
        }
        #endregion
        
        #region Test Starting in S270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS270() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS270");
            this.Manager.Comment("reaching state \'S270\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp485;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp485);
            this.Manager.AddReturn(GetPlatformInfo, null, temp485);
            this.Manager.Comment("reaching state \'S271\'");
            int temp489 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS270GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS270GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS270GetPlatformChecker2)));
            if ((temp489 == 0)) {
                this.Manager.Comment("reaching state \'S1083\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp486;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,655" +
                        "36)\'");
                temp486 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2100\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp486, "return of DsrGetDcName, state S2100");
                this.Manager.Comment("reaching state \'S3016\'");
                goto label96;
            }
            if ((temp489 == 1)) {
                this.Manager.Comment("reaching state \'S1084\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp487;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,64)" +
                        "\'");
                temp487 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103164");
                this.Manager.Comment("reaching state \'S2101\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp487, "return of DsrGetDcName, state S2101");
                this.Manager.Comment("reaching state \'S3017\'");
                goto label96;
            }
            if ((temp489 == 2)) {
                this.Manager.Comment("reaching state \'S1085\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp488;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp488 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2102\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp488, "return of DsrGetDcNameEx2, state S2102");
                this.Manager.Comment("reaching state \'S3018\'");
                goto label96;
            }
            throw new InvalidOperationException("never reached");
        label96:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS270GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S271");
        }
        
        private void Test_LocateDc_DsrGetDcNameS270GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S271");
        }
        
        private void Test_LocateDc_DsrGetDcNameS270GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S271");
        }
        #endregion
        
        #region Test Starting in S272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS272() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS272");
            this.Manager.Comment("reaching state \'S272\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp490;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp490);
            this.Manager.AddReturn(GetPlatformInfo, null, temp490);
            this.Manager.Comment("reaching state \'S273\'");
            int temp494 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS272GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS272GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS272GetPlatformChecker2)));
            if ((temp494 == 0)) {
                this.Manager.Comment("reaching state \'S1086\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp491;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,65536)\'");
                temp491 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2103\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp491, "return of DsrGetDcName, state S2103");
                this.Manager.Comment("reaching state \'S3019\'");
                goto label97;
            }
            if ((temp494 == 1)) {
                this.Manager.Comment("reaching state \'S1087\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp492;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,64)\'");
                temp492 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2104\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp492, "return of DsrGetDcName, state S2104");
                this.Manager.Comment("reaching state \'S3020\'");
                goto label97;
            }
            if ((temp494 == 2)) {
                this.Manager.Comment("reaching state \'S1088\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp493;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp493 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2105\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp493, "return of DsrGetDcNameEx2, state S2105");
                this.Manager.Comment("reaching state \'S3021\'");
                goto label97;
            }
            throw new InvalidOperationException("never reached");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS272GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S273");
        }
        
        private void Test_LocateDc_DsrGetDcNameS272GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S273");
        }
        
        private void Test_LocateDc_DsrGetDcNameS272GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S273");
        }
        #endregion
        
        #region Test Starting in S274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS274() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS274");
            this.Manager.Comment("reaching state \'S274\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp495;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp495);
            this.Manager.AddReturn(GetPlatformInfo, null, temp495);
            this.Manager.Comment("reaching state \'S275\'");
            int temp499 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS274GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS274GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS274GetPlatformChecker2)));
            if ((temp499 == 0)) {
                this.Manager.Comment("reaching state \'S1089\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp496;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,65536)\'");
                temp496 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2106\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp496, "return of DsrGetDcName, state S2106");
                this.Manager.Comment("reaching state \'S3022\'");
                goto label98;
            }
            if ((temp499 == 1)) {
                this.Manager.Comment("reaching state \'S1090\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp497;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,655" +
                        "36)\'");
                temp497 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2107\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp497, "return of DsrGetDcName, state S2107");
                this.Manager.Comment("reaching state \'S3023\'");
                goto label98;
            }
            if ((temp499 == 2)) {
                this.Manager.Comment("reaching state \'S1091\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp498;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp498 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2108\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp498, "return of DsrGetDcNameEx2, state S2108");
                this.Manager.Comment("reaching state \'S3024\'");
                goto label98;
            }
            throw new InvalidOperationException("never reached");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS274GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S275");
        }
        
        private void Test_LocateDc_DsrGetDcNameS274GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S275");
        }
        
        private void Test_LocateDc_DsrGetDcNameS274GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S275");
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS276() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS276");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp500;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp500);
            this.Manager.AddReturn(GetPlatformInfo, null, temp500);
            this.Manager.Comment("reaching state \'S277\'");
            int temp504 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS276GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS276GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS276GetPlatformChecker2)));
            if ((temp504 == 0)) {
                this.Manager.Comment("reaching state \'S1092\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp501;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,655" +
                        "36)\'");
                temp501 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2109\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp501, "return of DsrGetDcName, state S2109");
                this.Manager.Comment("reaching state \'S3025\'");
                goto label99;
            }
            if ((temp504 == 1)) {
                this.Manager.Comment("reaching state \'S1093\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp502;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,65536)\'");
                temp502 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2110\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp502, "return of DsrGetDcName, state S2110");
                this.Manager.Comment("reaching state \'S3026\'");
                goto label99;
            }
            if ((temp504 == 2)) {
                this.Manager.Comment("reaching state \'S1094\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp503;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp503 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2111\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp503, "return of DsrGetDcNameEx2, state S2111");
                this.Manager.Comment("reaching state \'S3027\'");
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS276GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S277");
        }
        
        private void Test_LocateDc_DsrGetDcNameS276GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S277");
        }
        
        private void Test_LocateDc_DsrGetDcNameS276GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S277");
        }
        #endregion
        
        #region Test Starting in S278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS278() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS278");
            this.Manager.Comment("reaching state \'S278\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp505;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp505);
            this.Manager.AddReturn(GetPlatformInfo, null, temp505);
            this.Manager.Comment("reaching state \'S279\'");
            int temp509 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS278GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS278GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS278GetPlatformChecker2)));
            if ((temp509 == 0)) {
                this.Manager.Comment("reaching state \'S1095\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp506;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,PrimaryDomainGuid,N" +
                        "ull,0)\'");
                temp506 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2112\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp506, "return of DsrGetDcName, state S2112");
                this.Manager.Comment("reaching state \'S3028\'");
                goto label100;
            }
            if ((temp509 == 1)) {
                this.Manager.Comment("reaching state \'S1096\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp507;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,65536)\'");
                temp507 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2113\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp507, "return of DsrGetDcName, state S2113");
                this.Manager.Comment("reaching state \'S3029\'");
                goto label100;
            }
            if ((temp509 == 2)) {
                this.Manager.Comment("reaching state \'S1097\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp508;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp508 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2114\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp508, "return of DsrGetDcNameEx2, state S2114");
                this.Manager.Comment("reaching state \'S3030\'");
                goto label100;
            }
            throw new InvalidOperationException("never reached");
        label100:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS278GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S279");
        }
        
        private void Test_LocateDc_DsrGetDcNameS278GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S279");
        }
        
        private void Test_LocateDc_DsrGetDcNameS278GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S279");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS28() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS28");
            this.Manager.Comment("reaching state \'S28\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp510;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp510);
            this.Manager.AddReturn(GetPlatformInfo, null, temp510);
            this.Manager.Comment("reaching state \'S29\'");
            int temp514 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS28GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS28GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS28GetPlatformChecker2)));
            if ((temp514 == 0)) {
                this.Manager.Comment("reaching state \'S720\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp511;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",0)\'");
                temp511 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1737\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp511, "return of DsrGetDcNameEx2, state S1737");
                this.Manager.Comment("reaching state \'S2754\'");
                goto label101;
            }
            if ((temp514 == 1)) {
                this.Manager.Comment("reaching state \'S721\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp512;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",0)\'");
                temp512 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1738\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp512, "return of DsrGetDcNameEx2, state S1738");
                this.Manager.Comment("reaching state \'S2755\'");
                goto label101;
            }
            if ((temp514 == 2)) {
                this.Manager.Comment("reaching state \'S722\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp513;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp513 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1739\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp513, "return of DsrGetDcNameEx2, state S1739");
                this.Manager.Comment("reaching state \'S2756\'");
                goto label101;
            }
            throw new InvalidOperationException("never reached");
        label101:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS28GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_LocateDc_DsrGetDcNameS28GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_LocateDc_DsrGetDcNameS28GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        #endregion
        
        #region Test Starting in S280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS280() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS280");
            this.Manager.Comment("reaching state \'S280\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp515;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp515);
            this.Manager.AddReturn(GetPlatformInfo, null, temp515);
            this.Manager.Comment("reaching state \'S281\'");
            int temp519 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS280GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS280GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS280GetPlatformChecker2)));
            if ((temp519 == 0)) {
                this.Manager.Comment("reaching state \'S1098\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp516;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,65536)" +
                        "\'");
                temp516 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2115\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp516, "return of DsrGetDcName, state S2115");
                this.Manager.Comment("reaching state \'S3031\'");
                goto label102;
            }
            if ((temp519 == 1)) {
                this.Manager.Comment("reaching state \'S1099\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp517;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,655" +
                        "36)\'");
                temp517 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2116\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp517, "return of DsrGetDcName, state S2116");
                this.Manager.Comment("reaching state \'S3032\'");
                goto label102;
            }
            if ((temp519 == 2)) {
                this.Manager.Comment("reaching state \'S1100\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp518;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp518 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2117\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp518, "return of DsrGetDcNameEx2, state S2117");
                this.Manager.Comment("reaching state \'S3033\'");
                goto label102;
            }
            throw new InvalidOperationException("never reached");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS280GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S281");
        }
        
        private void Test_LocateDc_DsrGetDcNameS280GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S281");
        }
        
        private void Test_LocateDc_DsrGetDcNameS280GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S281");
        }
        #endregion
        
        #region Test Starting in S282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS282() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS282");
            this.Manager.Comment("reaching state \'S282\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp520;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp520);
            this.Manager.AddReturn(GetPlatformInfo, null, temp520);
            this.Manager.Comment("reaching state \'S283\'");
            int temp524 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS282GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS282GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS282GetPlatformChecker2)));
            if ((temp524 == 0)) {
                this.Manager.Comment("reaching state \'S1101\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp521;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,131" +
                        "072)\'");
                temp521 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2118\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp521, "return of DsrGetDcName, state S2118");
                this.Manager.Comment("reaching state \'S3034\'");
                goto label103;
            }
            if ((temp524 == 1)) {
                this.Manager.Comment("reaching state \'S1102\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp522;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,PrimaryDomainGuid,N" +
                        "ull,0)\'");
                temp522 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2119\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp522, "return of DsrGetDcName, state S2119");
                this.Manager.Comment("reaching state \'S3035\'");
                goto label103;
            }
            if ((temp524 == 2)) {
                this.Manager.Comment("reaching state \'S1103\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp523;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp523 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2120\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp523, "return of DsrGetDcNameEx2, state S2120");
                this.Manager.Comment("reaching state \'S3036\'");
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS282GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S283");
        }
        
        private void Test_LocateDc_DsrGetDcNameS282GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S283");
        }
        
        private void Test_LocateDc_DsrGetDcNameS282GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S283");
        }
        #endregion
        
        #region Test Starting in S284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS284() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS284");
            this.Manager.Comment("reaching state \'S284\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp525;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp525);
            this.Manager.AddReturn(GetPlatformInfo, null, temp525);
            this.Manager.Comment("reaching state \'S285\'");
            int temp529 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS284GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS284GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS284GetPlatformChecker2)));
            if ((temp529 == 0)) {
                this.Manager.Comment("reaching state \'S1104\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp526;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,131" +
                        "072)\'");
                temp526 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2121\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp526, "return of DsrGetDcName, state S2121");
                this.Manager.Comment("reaching state \'S3037\'");
                goto label104;
            }
            if ((temp529 == 1)) {
                this.Manager.Comment("reaching state \'S1105\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp527;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,65536)" +
                        "\'");
                temp527 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2122\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp527, "return of DsrGetDcName, state S2122");
                this.Manager.Comment("reaching state \'S3038\'");
                goto label104;
            }
            if ((temp529 == 2)) {
                this.Manager.Comment("reaching state \'S1106\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp528;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp528 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2123\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp528, "return of DsrGetDcNameEx2, state S2123");
                this.Manager.Comment("reaching state \'S3039\'");
                goto label104;
            }
            throw new InvalidOperationException("never reached");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS284GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S285");
        }
        
        private void Test_LocateDc_DsrGetDcNameS284GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S285");
        }
        
        private void Test_LocateDc_DsrGetDcNameS284GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S285");
        }
        #endregion
        
        #region Test Starting in S286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS286() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS286");
            this.Manager.Comment("reaching state \'S286\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp530;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp530);
            this.Manager.AddReturn(GetPlatformInfo, null, temp530);
            this.Manager.Comment("reaching state \'S287\'");
            int temp534 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS286GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS286GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS286GetPlatformChecker2)));
            if ((temp534 == 0)) {
                this.Manager.Comment("reaching state \'S1107\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp531;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,131072)\'");
                temp531 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2124\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp531, "return of DsrGetDcName, state S2124");
                this.Manager.Comment("reaching state \'S3040\'");
                goto label105;
            }
            if ((temp534 == 1)) {
                this.Manager.Comment("reaching state \'S1108\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp532;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,131" +
                        "072)\'");
                temp532 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2125\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp532, "return of DsrGetDcName, state S2125");
                this.Manager.Comment("reaching state \'S3041\'");
                goto label105;
            }
            if ((temp534 == 2)) {
                this.Manager.Comment("reaching state \'S1109\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp533;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp533 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2126\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp533, "return of DsrGetDcNameEx2, state S2126");
                this.Manager.Comment("reaching state \'S3042\'");
                goto label105;
            }
            throw new InvalidOperationException("never reached");
        label105:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS286GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S287");
        }
        
        private void Test_LocateDc_DsrGetDcNameS286GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S287");
        }
        
        private void Test_LocateDc_DsrGetDcNameS286GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S287");
        }
        #endregion
        
        #region Test Starting in S288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS288() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS288");
            this.Manager.Comment("reaching state \'S288\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp535;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp535);
            this.Manager.AddReturn(GetPlatformInfo, null, temp535);
            this.Manager.Comment("reaching state \'S289\'");
            int temp539 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS288GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS288GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS288GetPlatformChecker2)));
            if ((temp539 == 0)) {
                this.Manager.Comment("reaching state \'S1110\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp536;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,131072)\'");
                temp536 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2127\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp536, "return of DsrGetDcName, state S2127");
                this.Manager.Comment("reaching state \'S3043\'");
                goto label106;
            }
            if ((temp539 == 1)) {
                this.Manager.Comment("reaching state \'S1111\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp537;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,131" +
                        "072)\'");
                temp537 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2128\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp537, "return of DsrGetDcName, state S2128");
                this.Manager.Comment("reaching state \'S3044\'");
                goto label106;
            }
            if ((temp539 == 2)) {
                this.Manager.Comment("reaching state \'S1112\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp538;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp538 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2129\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp538, "return of DsrGetDcNameEx2, state S2129");
                this.Manager.Comment("reaching state \'S3045\'");
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS288GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S289");
        }
        
        private void Test_LocateDc_DsrGetDcNameS288GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S289");
        }
        
        private void Test_LocateDc_DsrGetDcNameS288GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S289");
        }
        #endregion
        
        #region Test Starting in S290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS290() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS290");
            this.Manager.Comment("reaching state \'S290\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp540;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp540);
            this.Manager.AddReturn(GetPlatformInfo, null, temp540);
            this.Manager.Comment("reaching state \'S291\'");
            int temp544 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS290GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS290GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS290GetPlatformChecker2)));
            if ((temp544 == 0)) {
                this.Manager.Comment("reaching state \'S1113\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp541;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1024)\'" +
                        "");
                temp541 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1024u);
                this.Manager.Comment("reaching state \'S2130\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp541, "return of DsrGetDcName, state S2130");
                this.Manager.Comment("reaching state \'S3046\'");
                goto label107;
            }
            if ((temp544 == 1)) {
                this.Manager.Comment("reaching state \'S1114\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp542;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,131072)\'");
                temp542 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2131\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp542, "return of DsrGetDcName, state S2131");
                this.Manager.Comment("reaching state \'S3047\'");
                goto label107;
            }
            if ((temp544 == 2)) {
                this.Manager.Comment("reaching state \'S1115\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp543;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp543 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2132\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp543, "return of DsrGetDcNameEx2, state S2132");
                this.Manager.Comment("reaching state \'S3048\'");
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS290GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S291");
        }
        
        private void Test_LocateDc_DsrGetDcNameS290GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S291");
        }
        
        private void Test_LocateDc_DsrGetDcNameS290GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S291");
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS292() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS292");
            this.Manager.Comment("reaching state \'S292\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp545;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp545);
            this.Manager.AddReturn(GetPlatformInfo, null, temp545);
            this.Manager.Comment("reaching state \'S293\'");
            int temp549 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS292GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS292GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS292GetPlatformChecker2)));
            if ((temp549 == 0)) {
                this.Manager.Comment("reaching state \'S1116\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp546;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1152)\'" +
                        "");
                temp546 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104824");
                this.Manager.Comment("reaching state \'S2133\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp546, "return of DsrGetDcName, state S2133");
                this.Manager.Comment("reaching state \'S3049\'");
                goto label108;
            }
            if ((temp549 == 1)) {
                this.Manager.Comment("reaching state \'S1117\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp547;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,131072)\'");
                temp547 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2134\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp547, "return of DsrGetDcName, state S2134");
                this.Manager.Comment("reaching state \'S3050\'");
                goto label108;
            }
            if ((temp549 == 2)) {
                this.Manager.Comment("reaching state \'S1118\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp548;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp548 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2135\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp548, "return of DsrGetDcNameEx2, state S2135");
                this.Manager.Comment("reaching state \'S3051\'");
                goto label108;
            }
            throw new InvalidOperationException("never reached");
        label108:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS292GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S293");
        }
        
        private void Test_LocateDc_DsrGetDcNameS292GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S293");
        }
        
        private void Test_LocateDc_DsrGetDcNameS292GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S293");
        }
        #endregion
        
        #region Test Starting in S294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS294() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS294");
            this.Manager.Comment("reaching state \'S294\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp550;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp550);
            this.Manager.AddReturn(GetPlatformInfo, null, temp550);
            this.Manager.Comment("reaching state \'S295\'");
            int temp554 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS294GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS294GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS294GetPlatformChecker2)));
            if ((temp554 == 0)) {
                this.Manager.Comment("reaching state \'S1119\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp551;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1088)\'" +
                        "");
                temp551 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104822");
                this.Manager.Comment("reaching state \'S2136\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp551, "return of DsrGetDcName, state S2136");
                this.Manager.Comment("reaching state \'S3052\'");
                goto label109;
            }
            if ((temp554 == 1)) {
                this.Manager.Comment("reaching state \'S1120\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp552;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1024)\'" +
                        "");
                temp552 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1024u);
                this.Manager.Comment("reaching state \'S2137\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp552, "return of DsrGetDcName, state S2137");
                this.Manager.Comment("reaching state \'S3053\'");
                goto label109;
            }
            if ((temp554 == 2)) {
                this.Manager.Comment("reaching state \'S1121\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp553;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp553 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2138\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp553, "return of DsrGetDcNameEx2, state S2138");
                this.Manager.Comment("reaching state \'S3054\'");
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS294GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S295");
        }
        
        private void Test_LocateDc_DsrGetDcNameS294GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S295");
        }
        
        private void Test_LocateDc_DsrGetDcNameS294GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S295");
        }
        #endregion
        
        #region Test Starting in S296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS296() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS296");
            this.Manager.Comment("reaching state \'S296\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp555;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp555);
            this.Manager.AddReturn(GetPlatformInfo, null, temp555);
            this.Manager.Comment("reaching state \'S297\'");
            int temp559 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS296GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS296GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS296GetPlatformChecker2)));
            if ((temp559 == 0)) {
                this.Manager.Comment("reaching state \'S1122\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp556;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1)\'");
                temp556 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1u);
                this.Manager.Comment("reaching state \'S2139\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp556, "return of DsrGetDcName, state S2139");
                this.Manager.Comment("reaching state \'S3055\'");
                goto label110;
            }
            if ((temp559 == 1)) {
                this.Manager.Comment("reaching state \'S1123\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp557;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1152)\'" +
                        "");
                temp557 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104824");
                this.Manager.Comment("reaching state \'S2140\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp557, "return of DsrGetDcName, state S2140");
                this.Manager.Comment("reaching state \'S3056\'");
                goto label110;
            }
            if ((temp559 == 2)) {
                this.Manager.Comment("reaching state \'S1124\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp558;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp558 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2141\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp558, "return of DsrGetDcNameEx2, state S2141");
                this.Manager.Comment("reaching state \'S3057\'");
                goto label110;
            }
            throw new InvalidOperationException("never reached");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS296GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S297");
        }
        
        private void Test_LocateDc_DsrGetDcNameS296GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S297");
        }
        
        private void Test_LocateDc_DsrGetDcNameS296GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S297");
        }
        #endregion
        
        #region Test Starting in S298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS298() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS298");
            this.Manager.Comment("reaching state \'S298\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp560;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp560);
            this.Manager.AddReturn(GetPlatformInfo, null, temp560);
            this.Manager.Comment("reaching state \'S299\'");
            int temp564 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS298GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS298GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS298GetPlatformChecker2)));
            if ((temp564 == 0)) {
                this.Manager.Comment("reaching state \'S1125\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp561;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,16)\'");
                temp561 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 16u);
                this.Manager.Comment("reaching state \'S2142\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp561, "return of DsrGetDcName, state S2142");
                this.Manager.Comment("reaching state \'S3058\'");
                goto label111;
            }
            if ((temp564 == 1)) {
                this.Manager.Comment("reaching state \'S1126\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp562;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1088)\'" +
                        "");
                temp562 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104822");
                this.Manager.Comment("reaching state \'S2143\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp562, "return of DsrGetDcName, state S2143");
                this.Manager.Comment("reaching state \'S3059\'");
                goto label111;
            }
            if ((temp564 == 2)) {
                this.Manager.Comment("reaching state \'S1127\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp563;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp563 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2144\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp563, "return of DsrGetDcNameEx2, state S2144");
                this.Manager.Comment("reaching state \'S3060\'");
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS298GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S299");
        }
        
        private void Test_LocateDc_DsrGetDcNameS298GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S299");
        }
        
        private void Test_LocateDc_DsrGetDcNameS298GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S299");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS30() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp565;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp565);
            this.Manager.AddReturn(GetPlatformInfo, null, temp565);
            this.Manager.Comment("reaching state \'S31\'");
            int temp569 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS30GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS30GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS30GetPlatformChecker2)));
            if ((temp569 == 0)) {
                this.Manager.Comment("reaching state \'S723\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp566;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,0)\'");
                temp566 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1740\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp566, "return of DsrGetDcNameEx2, state S1740");
                this.Manager.Comment("reaching state \'S2757\'");
                goto label112;
            }
            if ((temp569 == 1)) {
                this.Manager.Comment("reaching state \'S724\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp567;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,0)\'");
                temp567 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1741\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp567, "return of DsrGetDcNameEx2, state S1741");
                this.Manager.Comment("reaching state \'S2758\'");
                goto label112;
            }
            if ((temp569 == 2)) {
                this.Manager.Comment("reaching state \'S725\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp568;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp568 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1742\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp568, "return of DsrGetDcNameEx2, state S1742");
                this.Manager.Comment("reaching state \'S2759\'");
                goto label112;
            }
            throw new InvalidOperationException("never reached");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS30GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_LocateDc_DsrGetDcNameS30GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_LocateDc_DsrGetDcNameS30GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS300() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS300");
            this.Manager.Comment("reaching state \'S300\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp570;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp570);
            this.Manager.AddReturn(GetPlatformInfo, null, temp570);
            this.Manager.Comment("reaching state \'S301\'");
            int temp574 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS300GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS300GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS300GetPlatformChecker2)));
            if ((temp574 == 0)) {
                this.Manager.Comment("reaching state \'S1128\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp571;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,32)\'");
                temp571 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 32u);
                this.Manager.Comment("reaching state \'S2145\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp571, "return of DsrGetDcName, state S2145");
                this.Manager.Comment("reaching state \'S3061\'");
                goto label113;
            }
            if ((temp574 == 1)) {
                this.Manager.Comment("reaching state \'S1129\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp572;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1)\'");
                temp572 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1u);
                this.Manager.Comment("reaching state \'S2146\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp572, "return of DsrGetDcName, state S2146");
                this.Manager.Comment("reaching state \'S3062\'");
                goto label113;
            }
            if ((temp574 == 2)) {
                this.Manager.Comment("reaching state \'S1130\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp573;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp573 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2147\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp573, "return of DsrGetDcNameEx2, state S2147");
                this.Manager.Comment("reaching state \'S3063\'");
                goto label113;
            }
            throw new InvalidOperationException("never reached");
        label113:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS300GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S301");
        }
        
        private void Test_LocateDc_DsrGetDcNameS300GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S301");
        }
        
        private void Test_LocateDc_DsrGetDcNameS300GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S301");
        }
        #endregion
        
        #region Test Starting in S302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS302() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS302");
            this.Manager.Comment("reaching state \'S302\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp575;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp575);
            this.Manager.AddReturn(GetPlatformInfo, null, temp575);
            this.Manager.Comment("reaching state \'S303\'");
            int temp579 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS302GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS302GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS302GetPlatformChecker2)));
            if ((temp579 == 0)) {
                this.Manager.Comment("reaching state \'S1131\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp576;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,256)\'");
                temp576 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 256u);
                this.Manager.Comment("reaching state \'S2148\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp576, "return of DsrGetDcName, state S2148");
                this.Manager.Comment("reaching state \'S3064\'");
                goto label114;
            }
            if ((temp579 == 1)) {
                this.Manager.Comment("reaching state \'S1132\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp577;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,16)\'");
                temp577 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 16u);
                this.Manager.Comment("reaching state \'S2149\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp577, "return of DsrGetDcName, state S2149");
                this.Manager.Comment("reaching state \'S3065\'");
                goto label114;
            }
            if ((temp579 == 2)) {
                this.Manager.Comment("reaching state \'S1133\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp578;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp578 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2150\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp578, "return of DsrGetDcNameEx2, state S2150");
                this.Manager.Comment("reaching state \'S3066\'");
                goto label114;
            }
            throw new InvalidOperationException("never reached");
        label114:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS302GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S303");
        }
        
        private void Test_LocateDc_DsrGetDcNameS302GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S303");
        }
        
        private void Test_LocateDc_DsrGetDcNameS302GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S303");
        }
        #endregion
        
        #region Test Starting in S304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS304() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS304");
            this.Manager.Comment("reaching state \'S304\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp580;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp580);
            this.Manager.AddReturn(GetPlatformInfo, null, temp580);
            this.Manager.Comment("reaching state \'S305\'");
            int temp584 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS304GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS304GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS304GetPlatformChecker2)));
            if ((temp584 == 0)) {
                this.Manager.Comment("reaching state \'S1134\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp581;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,512)\'");
                temp581 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 512u);
                this.Manager.Comment("reaching state \'S2151\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp581, "return of DsrGetDcName, state S2151");
                this.Manager.Comment("reaching state \'S3067\'");
                goto label115;
            }
            if ((temp584 == 1)) {
                this.Manager.Comment("reaching state \'S1135\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp582;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,32)\'");
                temp582 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 32u);
                this.Manager.Comment("reaching state \'S2152\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp582, "return of DsrGetDcName, state S2152");
                this.Manager.Comment("reaching state \'S3068\'");
                goto label115;
            }
            if ((temp584 == 2)) {
                this.Manager.Comment("reaching state \'S1136\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp583;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp583 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2153\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp583, "return of DsrGetDcNameEx2, state S2153");
                this.Manager.Comment("reaching state \'S3069\'");
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS304GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S305");
        }
        
        private void Test_LocateDc_DsrGetDcNameS304GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S305");
        }
        
        private void Test_LocateDc_DsrGetDcNameS304GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S305");
        }
        #endregion
        
        #region Test Starting in S306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS306() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS306");
            this.Manager.Comment("reaching state \'S306\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp585;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp585);
            this.Manager.AddReturn(GetPlatformInfo, null, temp585);
            this.Manager.Comment("reaching state \'S307\'");
            int temp589 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS306GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS306GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS306GetPlatformChecker2)));
            if ((temp589 == 0)) {
                this.Manager.Comment("reaching state \'S1137\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp586;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,2048)\'" +
                        "");
                temp586 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 2048u);
                this.Manager.Comment("reaching state \'S2154\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp586, "return of DsrGetDcName, state S2154");
                this.Manager.Comment("reaching state \'S3070\'");
                goto label116;
            }
            if ((temp589 == 1)) {
                this.Manager.Comment("reaching state \'S1138\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp587;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,256)\'");
                temp587 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 256u);
                this.Manager.Comment("reaching state \'S2155\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp587, "return of DsrGetDcName, state S2155");
                this.Manager.Comment("reaching state \'S3071\'");
                goto label116;
            }
            if ((temp589 == 2)) {
                this.Manager.Comment("reaching state \'S1139\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp588;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp588 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2156\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp588, "return of DsrGetDcNameEx2, state S2156");
                this.Manager.Comment("reaching state \'S3072\'");
                goto label116;
            }
            throw new InvalidOperationException("never reached");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS306GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S307");
        }
        
        private void Test_LocateDc_DsrGetDcNameS306GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S307");
        }
        
        private void Test_LocateDc_DsrGetDcNameS306GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S307");
        }
        #endregion
        
        #region Test Starting in S308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS308() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS308");
            this.Manager.Comment("reaching state \'S308\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp590;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp590);
            this.Manager.AddReturn(GetPlatformInfo, null, temp590);
            this.Manager.Comment("reaching state \'S309\'");
            int temp594 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS308GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS308GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS308GetPlatformChecker2)));
            if ((temp594 == 0)) {
                this.Manager.Comment("reaching state \'S1140\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp591;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,4096)\'" +
                        "");
                temp591 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 4096u);
                this.Manager.Comment("reaching state \'S2157\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp591, "return of DsrGetDcName, state S2157");
                this.Manager.Comment("reaching state \'S3073\'");
                goto label117;
            }
            if ((temp594 == 1)) {
                this.Manager.Comment("reaching state \'S1141\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp592;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,512)\'");
                temp592 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 512u);
                this.Manager.Comment("reaching state \'S2158\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp592, "return of DsrGetDcName, state S2158");
                this.Manager.Comment("reaching state \'S3074\'");
                goto label117;
            }
            if ((temp594 == 2)) {
                this.Manager.Comment("reaching state \'S1142\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp593;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp593 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2159\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp593, "return of DsrGetDcNameEx2, state S2159");
                this.Manager.Comment("reaching state \'S3075\'");
                goto label117;
            }
            throw new InvalidOperationException("never reached");
        label117:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS308GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S309");
        }
        
        private void Test_LocateDc_DsrGetDcNameS308GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S309");
        }
        
        private void Test_LocateDc_DsrGetDcNameS308GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S309");
        }
        #endregion
        
        #region Test Starting in S310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS310() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS310");
            this.Manager.Comment("reaching state \'S310\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp595;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp595);
            this.Manager.AddReturn(GetPlatformInfo, null, temp595);
            this.Manager.Comment("reaching state \'S311\'");
            int temp599 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS310GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS310GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS310GetPlatformChecker2)));
            if ((temp599 == 0)) {
                this.Manager.Comment("reaching state \'S1143\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp596;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,524288" +
                        ")\'");
                temp596 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 524288u);
                this.Manager.Comment("reaching state \'S2160\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp596, "return of DsrGetDcName, state S2160");
                this.Manager.Comment("reaching state \'S3076\'");
                goto label118;
            }
            if ((temp599 == 1)) {
                this.Manager.Comment("reaching state \'S1144\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp597;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,2048)\'" +
                        "");
                temp597 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 2048u);
                this.Manager.Comment("reaching state \'S2161\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp597, "return of DsrGetDcName, state S2161");
                this.Manager.Comment("reaching state \'S3077\'");
                goto label118;
            }
            if ((temp599 == 2)) {
                this.Manager.Comment("reaching state \'S1145\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp598;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp598 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2162\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp598, "return of DsrGetDcNameEx2, state S2162");
                this.Manager.Comment("reaching state \'S3078\'");
                goto label118;
            }
            throw new InvalidOperationException("never reached");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS310GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S311");
        }
        
        private void Test_LocateDc_DsrGetDcNameS310GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S311");
        }
        
        private void Test_LocateDc_DsrGetDcNameS310GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S311");
        }
        #endregion
        
        #region Test Starting in S312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS312() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS312");
            this.Manager.Comment("reaching state \'S312\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp600;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp600);
            this.Manager.AddReturn(GetPlatformInfo, null, temp600);
            this.Manager.Comment("reaching state \'S313\'");
            int temp604 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS312GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS312GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS312GetPlatformChecker2)));
            if ((temp604 == 0)) {
                this.Manager.Comment("reaching state \'S1146\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp601;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,322122" +
                        "5472)\'");
                temp601 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104826");
                this.Manager.Comment("reaching state \'S2163\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp601, "return of DsrGetDcName, state S2163");
                this.Manager.Comment("reaching state \'S3079\'");
                goto label119;
            }
            if ((temp604 == 1)) {
                this.Manager.Comment("reaching state \'S1147\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp602;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,196608" +
                        ")\'");
                temp602 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104825");
                this.Manager.Comment("reaching state \'S2164\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp602, "return of DsrGetDcName, state S2164");
                this.Manager.Comment("reaching state \'S3080\'");
                goto label119;
            }
            if ((temp604 == 2)) {
                this.Manager.Comment("reaching state \'S1148\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp603;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp603 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2165\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp603, "return of DsrGetDcNameEx2, state S2165");
                this.Manager.Comment("reaching state \'S3081\'");
                goto label119;
            }
            throw new InvalidOperationException("never reached");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS312GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S313");
        }
        
        private void Test_LocateDc_DsrGetDcNameS312GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S313");
        }
        
        private void Test_LocateDc_DsrGetDcNameS312GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S313");
        }
        #endregion
        
        #region Test Starting in S314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS314() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS314");
            this.Manager.Comment("reaching state \'S314\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp605;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp605);
            this.Manager.AddReturn(GetPlatformInfo, null, temp605);
            this.Manager.Comment("reaching state \'S315\'");
            int temp609 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS314GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS314GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS314GetPlatformChecker2)));
            if ((temp609 == 0)) {
                this.Manager.Comment("reaching state \'S1149\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp606;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,214748" +
                        "3648)\'");
                temp606 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 2147483648u);
                this.Manager.Comment("reaching state \'S2166\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp606, "return of DsrGetDcName, state S2166");
                this.Manager.Comment("reaching state \'S3082\'");
                goto label120;
            }
            if ((temp609 == 1)) {
                this.Manager.Comment("reaching state \'S1150\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp607;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,322122" +
                        "5472)\'");
                temp607 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104826");
                this.Manager.Comment("reaching state \'S2167\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp607, "return of DsrGetDcName, state S2167");
                this.Manager.Comment("reaching state \'S3083\'");
                goto label120;
            }
            if ((temp609 == 2)) {
                this.Manager.Comment("reaching state \'S1151\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp608;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp608 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2168\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp608, "return of DsrGetDcNameEx2, state S2168");
                this.Manager.Comment("reaching state \'S3084\'");
                goto label120;
            }
            throw new InvalidOperationException("never reached");
        label120:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS314GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S315");
        }
        
        private void Test_LocateDc_DsrGetDcNameS314GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S315");
        }
        
        private void Test_LocateDc_DsrGetDcNameS314GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S315");
        }
        #endregion
        
        #region Test Starting in S316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS316() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS316");
            this.Manager.Comment("reaching state \'S316\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp610;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp610);
            this.Manager.AddReturn(GetPlatformInfo, null, temp610);
            this.Manager.Comment("reaching state \'S317\'");
            int temp614 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS316GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS316GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS316GetPlatformChecker2)));
            if ((temp614 == 0)) {
                this.Manager.Comment("reaching state \'S1152\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp611;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,107374" +
                        "1824)\'");
                temp611 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1073741824u);
                this.Manager.Comment("reaching state \'S2169\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp611, "return of DsrGetDcName, state S2169");
                this.Manager.Comment("reaching state \'S3085\'");
                goto label121;
            }
            if ((temp614 == 1)) {
                this.Manager.Comment("reaching state \'S1153\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp612;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,8192)\'" +
                        "");
                temp612 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 8192u);
                this.Manager.Comment("reaching state \'S2170\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp612, "return of DsrGetDcName, state S2170");
                this.Manager.Comment("reaching state \'S3086\'");
                goto label121;
            }
            if ((temp614 == 2)) {
                this.Manager.Comment("reaching state \'S1154\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp613;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp613 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2171\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp613, "return of DsrGetDcNameEx2, state S2171");
                this.Manager.Comment("reaching state \'S3087\'");
                goto label121;
            }
            throw new InvalidOperationException("never reached");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS316GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S317");
        }
        
        private void Test_LocateDc_DsrGetDcNameS316GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S317");
        }
        
        private void Test_LocateDc_DsrGetDcNameS316GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S317");
        }
        #endregion
        
        #region Test Starting in S318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS318() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS318");
            this.Manager.Comment("reaching state \'S318\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp615;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp615);
            this.Manager.AddReturn(GetPlatformInfo, null, temp615);
            this.Manager.Comment("reaching state \'S319\'");
            int temp619 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS318GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS318GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS318GetPlatformChecker2)));
            if ((temp619 == 0)) {
                this.Manager.Comment("reaching state \'S1155\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp616;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,196608" +
                        ")\'");
                temp616 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104825");
                this.Manager.Comment("reaching state \'S2172\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp616, "return of DsrGetDcName, state S2172");
                this.Manager.Comment("reaching state \'S3088\'");
                goto label122;
            }
            if ((temp619 == 1)) {
                this.Manager.Comment("reaching state \'S1156\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp617;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,16384)" +
                        "\'");
                temp617 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 16384u);
                this.Manager.Comment("reaching state \'S2173\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp617, "return of DsrGetDcName, state S2173");
                this.Manager.Comment("reaching state \'S3089\'");
                goto label122;
            }
            if ((temp619 == 2)) {
                this.Manager.Comment("reaching state \'S1157\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp618;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp618 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2174\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp618, "return of DsrGetDcNameEx2, state S2174");
                this.Manager.Comment("reaching state \'S3090\'");
                goto label122;
            }
            throw new InvalidOperationException("never reached");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS318GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S319");
        }
        
        private void Test_LocateDc_DsrGetDcNameS318GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S319");
        }
        
        private void Test_LocateDc_DsrGetDcNameS318GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S319");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS32() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS32");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp620;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp620);
            this.Manager.AddReturn(GetPlatformInfo, null, temp620);
            this.Manager.Comment("reaching state \'S33\'");
            int temp624 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS32GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS32GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS32GetPlatformChecker2)));
            if ((temp624 == 0)) {
                this.Manager.Comment("reaching state \'S726\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp621;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp621 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R104886");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1743\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp621, "return of DsrGetDcNameEx2, state S1743");
                this.Manager.Comment("reaching state \'S2760\'");
                goto label123;
            }
            if ((temp624 == 1)) {
                this.Manager.Comment("reaching state \'S727\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp622;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp622 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R104886");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1744\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp622, "return of DsrGetDcNameEx2, state S1744");
                this.Manager.Comment("reaching state \'S2761\'");
                goto label123;
            }
            if ((temp624 == 2)) {
                this.Manager.Comment("reaching state \'S728\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp623;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp623 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1745\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp623, "return of DsrGetDcNameEx2, state S1745");
                this.Manager.Comment("reaching state \'S2762\'");
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS32GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_LocateDc_DsrGetDcNameS32GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_LocateDc_DsrGetDcNameS32GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        #endregion
        
        #region Test Starting in S320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS320() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS320");
            this.Manager.Comment("reaching state \'S320\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp625;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp625);
            this.Manager.AddReturn(GetPlatformInfo, null, temp625);
            this.Manager.Comment("reaching state \'S321\'");
            int temp629 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS320GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS320GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS320GetPlatformChecker2)));
            if ((temp629 == 0)) {
                this.Manager.Comment("reaching state \'S1158\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp626;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,16384)" +
                        "\'");
                temp626 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 16384u);
                this.Manager.Comment("reaching state \'S2175\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp626, "return of DsrGetDcName, state S2175");
                this.Manager.Comment("reaching state \'S3091\'");
                goto label124;
            }
            if ((temp629 == 1)) {
                this.Manager.Comment("reaching state \'S1159\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp627;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,262144" +
                        ")\'");
                temp627 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 262144u);
                this.Manager.Comment("reaching state \'S2176\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp627, "return of DsrGetDcName, state S2176");
                this.Manager.Comment("reaching state \'S3092\'");
                goto label124;
            }
            if ((temp629 == 2)) {
                this.Manager.Comment("reaching state \'S1160\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp628;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp628 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2177\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp628, "return of DsrGetDcNameEx2, state S2177");
                this.Manager.Comment("reaching state \'S3093\'");
                goto label124;
            }
            throw new InvalidOperationException("never reached");
        label124:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS320GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S321");
        }
        
        private void Test_LocateDc_DsrGetDcNameS320GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S321");
        }
        
        private void Test_LocateDc_DsrGetDcNameS320GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S321");
        }
        #endregion
        
        #region Test Starting in S322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS322() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS322");
            this.Manager.Comment("reaching state \'S322\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp630;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp630);
            this.Manager.AddReturn(GetPlatformInfo, null, temp630);
            this.Manager.Comment("reaching state \'S323\'");
            int temp634 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS322GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS322GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS322GetPlatformChecker2)));
            if ((temp634 == 0)) {
                this.Manager.Comment("reaching state \'S1161\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp631;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,32768)" +
                        "\'");
                temp631 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 32768u);
                this.Manager.Comment("reaching state \'S2178\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp631, "return of DsrGetDcName, state S2178");
                this.Manager.Comment("reaching state \'S3094\'");
                goto label125;
            }
            if ((temp634 == 1)) {
                this.Manager.Comment("reaching state \'S1162\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp632;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,107374" +
                        "1824)\'");
                temp632 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1073741824u);
                this.Manager.Comment("reaching state \'S2179\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp632, "return of DsrGetDcName, state S2179");
                this.Manager.Comment("reaching state \'S3095\'");
                goto label125;
            }
            if ((temp634 == 2)) {
                this.Manager.Comment("reaching state \'S1163\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp633;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp633 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2180\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp633, "return of DsrGetDcNameEx2, state S2180");
                this.Manager.Comment("reaching state \'S3096\'");
                goto label125;
            }
            throw new InvalidOperationException("never reached");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS322GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S323");
        }
        
        private void Test_LocateDc_DsrGetDcNameS322GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S323");
        }
        
        private void Test_LocateDc_DsrGetDcNameS322GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S323");
        }
        #endregion
        
        #region Test Starting in S324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS324() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS324");
            this.Manager.Comment("reaching state \'S324\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp635;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp635);
            this.Manager.AddReturn(GetPlatformInfo, null, temp635);
            this.Manager.Comment("reaching state \'S325\'");
            int temp639 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS324GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS324GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS324GetPlatformChecker2)));
            if ((temp639 == 0)) {
                this.Manager.Comment("reaching state \'S1164\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp636;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,8192)\'" +
                        "");
                temp636 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 8192u);
                this.Manager.Comment("reaching state \'S2181\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp636, "return of DsrGetDcName, state S2181");
                this.Manager.Comment("reaching state \'S3097\'");
                goto label126;
            }
            if ((temp639 == 1)) {
                this.Manager.Comment("reaching state \'S1165\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp637;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,524288" +
                        ")\'");
                temp637 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 524288u);
                this.Manager.Comment("reaching state \'S2182\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp637, "return of DsrGetDcName, state S2182");
                this.Manager.Comment("reaching state \'S3098\'");
                goto label126;
            }
            if ((temp639 == 2)) {
                this.Manager.Comment("reaching state \'S1166\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp638;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp638 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2183\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp638, "return of DsrGetDcNameEx2, state S2183");
                this.Manager.Comment("reaching state \'S3099\'");
                goto label126;
            }
            throw new InvalidOperationException("never reached");
        label126:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS324GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S325");
        }
        
        private void Test_LocateDc_DsrGetDcNameS324GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S325");
        }
        
        private void Test_LocateDc_DsrGetDcNameS324GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S325");
        }
        #endregion
        
        #region Test Starting in S326
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS326() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS326");
            this.Manager.Comment("reaching state \'S326\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp640;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp640);
            this.Manager.AddReturn(GetPlatformInfo, null, temp640);
            this.Manager.Comment("reaching state \'S327\'");
            int temp644 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS326GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS326GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS326GetPlatformChecker2)));
            if ((temp644 == 0)) {
                this.Manager.Comment("reaching state \'S1167\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp641;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,257)\'");
                temp641 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 257u);
                this.Manager.Comment("reaching state \'S2184\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp641, "return of DsrGetDcName, state S2184");
                this.Manager.Comment("reaching state \'S3100\'");
                goto label127;
            }
            if ((temp644 == 1)) {
                this.Manager.Comment("reaching state \'S1168\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp642;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,214748" +
                        "3648)\'");
                temp642 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 2147483648u);
                this.Manager.Comment("reaching state \'S2185\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp642, "return of DsrGetDcName, state S2185");
                this.Manager.Comment("reaching state \'S3101\'");
                goto label127;
            }
            if ((temp644 == 2)) {
                this.Manager.Comment("reaching state \'S1169\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp643;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp643 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2186\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp643, "return of DsrGetDcNameEx2, state S2186");
                this.Manager.Comment("reaching state \'S3102\'");
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS326GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S327");
        }
        
        private void Test_LocateDc_DsrGetDcNameS326GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S327");
        }
        
        private void Test_LocateDc_DsrGetDcNameS326GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S327");
        }
        #endregion
        
        #region Test Starting in S328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS328() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS328");
            this.Manager.Comment("reaching state \'S328\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp645;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp645);
            this.Manager.AddReturn(GetPlatformInfo, null, temp645);
            this.Manager.Comment("reaching state \'S329\'");
            int temp649 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS328GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS328GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS328GetPlatformChecker2)));
            if ((temp649 == 0)) {
                this.Manager.Comment("reaching state \'S1170\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp646;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,128)\'");
                temp646 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 128u);
                this.Manager.Comment("reaching state \'S2187\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp646, "return of DsrGetDcName, state S2187");
                this.Manager.Comment("reaching state \'S3103\'");
                goto label128;
            }
            if ((temp649 == 1)) {
                this.Manager.Comment("reaching state \'S1171\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp647;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,32768)" +
                        "\'");
                temp647 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 32768u);
                this.Manager.Comment("reaching state \'S2188\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp647, "return of DsrGetDcName, state S2188");
                this.Manager.Comment("reaching state \'S3104\'");
                goto label128;
            }
            if ((temp649 == 2)) {
                this.Manager.Comment("reaching state \'S1172\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp648;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp648 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2189\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp648, "return of DsrGetDcNameEx2, state S2189");
                this.Manager.Comment("reaching state \'S3105\'");
                goto label128;
            }
            throw new InvalidOperationException("never reached");
        label128:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS328GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S329");
        }
        
        private void Test_LocateDc_DsrGetDcNameS328GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S329");
        }
        
        private void Test_LocateDc_DsrGetDcNameS328GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S329");
        }
        #endregion
        
        #region Test Starting in S330
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS330() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS330");
            this.Manager.Comment("reaching state \'S330\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp650;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp650);
            this.Manager.AddReturn(GetPlatformInfo, null, temp650);
            this.Manager.Comment("reaching state \'S331\'");
            int temp654 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS330GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS330GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS330GetPlatformChecker2)));
            if ((temp654 == 0)) {
                this.Manager.Comment("reaching state \'S1173\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp651;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,192)\'");
                temp651 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104823");
                this.Manager.Comment("reaching state \'S2190\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp651, "return of DsrGetDcName, state S2190");
                this.Manager.Comment("reaching state \'S3106\'");
                goto label129;
            }
            if ((temp654 == 1)) {
                this.Manager.Comment("reaching state \'S1174\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp652;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,4096)\'" +
                        "");
                temp652 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 4096u);
                this.Manager.Comment("reaching state \'S2191\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp652, "return of DsrGetDcName, state S2191");
                this.Manager.Comment("reaching state \'S3107\'");
                goto label129;
            }
            if ((temp654 == 2)) {
                this.Manager.Comment("reaching state \'S1175\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp653;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp653 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2192\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp653, "return of DsrGetDcNameEx2, state S2192");
                this.Manager.Comment("reaching state \'S3108\'");
                goto label129;
            }
            throw new InvalidOperationException("never reached");
        label129:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS330GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S331");
        }
        
        private void Test_LocateDc_DsrGetDcNameS330GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S331");
        }
        
        private void Test_LocateDc_DsrGetDcNameS330GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S331");
        }
        #endregion
        
        #region Test Starting in S332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS332() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS332");
            this.Manager.Comment("reaching state \'S332\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp655;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp655);
            this.Manager.AddReturn(GetPlatformInfo, null, temp655);
            this.Manager.Comment("reaching state \'S333\'");
            int temp659 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS332GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS332GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS332GetPlatformChecker2)));
            if ((temp659 == 0)) {
                this.Manager.Comment("reaching state \'S1176\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp656;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,131072" +
                        ")\'");
                temp656 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2193\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp656, "return of DsrGetDcName, state S2193");
                this.Manager.Comment("reaching state \'S3109\'");
                goto label130;
            }
            if ((temp659 == 1)) {
                this.Manager.Comment("reaching state \'S1177\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp657;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,128)\'");
                temp657 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 128u);
                this.Manager.Comment("reaching state \'S2194\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp657, "return of DsrGetDcName, state S2194");
                this.Manager.Comment("reaching state \'S3110\'");
                goto label130;
            }
            if ((temp659 == 2)) {
                this.Manager.Comment("reaching state \'S1178\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp658;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp658 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2195\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp658, "return of DsrGetDcNameEx2, state S2195");
                this.Manager.Comment("reaching state \'S3111\'");
                goto label130;
            }
            throw new InvalidOperationException("never reached");
        label130:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS332GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S333");
        }
        
        private void Test_LocateDc_DsrGetDcNameS332GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S333");
        }
        
        private void Test_LocateDc_DsrGetDcNameS332GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S333");
        }
        #endregion
        
        #region Test Starting in S334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS334() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS334");
            this.Manager.Comment("reaching state \'S334\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp660;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp660);
            this.Manager.AddReturn(GetPlatformInfo, null, temp660);
            this.Manager.Comment("reaching state \'S335\'");
            int temp664 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS334GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS334GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS334GetPlatformChecker2)));
            if ((temp664 == 0)) {
                this.Manager.Comment("reaching state \'S1179\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp661;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,257)\'");
                temp661 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 257u);
                this.Manager.Comment("reaching state \'S2196\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp661, "return of DsrGetDcName, state S2196");
                this.Manager.Comment("reaching state \'S3112\'");
                goto label131;
            }
            if ((temp664 == 1)) {
                this.Manager.Comment("reaching state \'S1180\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp662;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp662 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2197\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp662, "return of DsrGetDcNameEx2, state S2197");
                this.Manager.Comment("reaching state \'S3113\'");
                goto label131;
            }
            if ((temp664 == 2)) {
                this.Manager.Comment("reaching state \'S1181\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp663;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp663 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2198\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp663, "return of DsrGetDcNameEx2, state S2198");
                this.Manager.Comment("reaching state \'S3114\'");
                goto label131;
            }
            throw new InvalidOperationException("never reached");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS334GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S335");
        }
        
        private void Test_LocateDc_DsrGetDcNameS334GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S335");
        }
        
        private void Test_LocateDc_DsrGetDcNameS334GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S335");
        }
        #endregion
        
        #region Test Starting in S336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS336() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS336");
            this.Manager.Comment("reaching state \'S336\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp665;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp665);
            this.Manager.AddReturn(GetPlatformInfo, null, temp665);
            this.Manager.Comment("reaching state \'S337\'");
            int temp669 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS336GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS336GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS336GetPlatformChecker2)));
            if ((temp669 == 0)) {
                this.Manager.Comment("reaching state \'S1182\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp666;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,192)\'");
                temp666 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104823");
                this.Manager.Comment("reaching state \'S2199\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp666, "return of DsrGetDcName, state S2199");
                this.Manager.Comment("reaching state \'S3115\'");
                goto label132;
            }
            if ((temp669 == 1)) {
                this.Manager.Comment("reaching state \'S1183\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp667;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,512,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp667 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 512u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2200\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp667, "return of DsrGetDcNameEx2, state S2200");
                this.Manager.Comment("reaching state \'S3116\'");
                goto label132;
            }
            if ((temp669 == 2)) {
                this.Manager.Comment("reaching state \'S1184\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp668;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp668 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2201\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp668, "return of DsrGetDcNameEx2, state S2201");
                this.Manager.Comment("reaching state \'S3117\'");
                goto label132;
            }
            throw new InvalidOperationException("never reached");
        label132:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS336GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S337");
        }
        
        private void Test_LocateDc_DsrGetDcNameS336GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S337");
        }
        
        private void Test_LocateDc_DsrGetDcNameS336GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S337");
        }
        #endregion
        
        #region Test Starting in S338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS338() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS338");
            this.Manager.Comment("reaching state \'S338\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp670;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp670);
            this.Manager.AddReturn(GetPlatformInfo, null, temp670);
            this.Manager.Comment("reaching state \'S339\'");
            int temp674 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS338GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS338GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS338GetPlatformChecker2)));
            if ((temp674 == 0)) {
                this.Manager.Comment("reaching state \'S1185\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp671;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,131072" +
                        ")\'");
                temp671 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2202\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp671, "return of DsrGetDcName, state S2202");
                this.Manager.Comment("reaching state \'S3118\'");
                goto label133;
            }
            if ((temp674 == 1)) {
                this.Manager.Comment("reaching state \'S1186\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp672;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,4096,FqdnFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp672 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 4096u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2203\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp672, "return of DsrGetDcNameEx2, state S2203");
                this.Manager.Comment("reaching state \'S3119\'");
                goto label133;
            }
            if ((temp674 == 2)) {
                this.Manager.Comment("reaching state \'S1187\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp673;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp673 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2204\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp673, "return of DsrGetDcNameEx2, state S2204");
                this.Manager.Comment("reaching state \'S3120\'");
                goto label133;
            }
            throw new InvalidOperationException("never reached");
        label133:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS338GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S339");
        }
        
        private void Test_LocateDc_DsrGetDcNameS338GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S339");
        }
        
        private void Test_LocateDc_DsrGetDcNameS338GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S339");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS34() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS34");
            this.Manager.Comment("reaching state \'S34\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp675;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp675);
            this.Manager.AddReturn(GetPlatformInfo, null, temp675);
            this.Manager.Comment("reaching state \'S35\'");
            int temp679 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS34GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS34GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS34GetPlatformChecker2)));
            if ((temp679 == 0)) {
                this.Manager.Comment("reaching state \'S729\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp676;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,DomainMemberComputerAccount,0,Fqdn" +
                        "FormatDomainName,Null,Null,0)\'");
                temp676 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.DomainMemberComputerAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1746\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp676, "return of DsrGetDcNameEx2, state S1746");
                this.Manager.Comment("reaching state \'S2763\'");
                goto label134;
            }
            if ((temp679 == 1)) {
                this.Manager.Comment("reaching state \'S730\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp677;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,DomainMemberComputerAccount,0,Fqdn" +
                        "FormatDomainName,Null,Null,0)\'");
                temp677 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.DomainMemberComputerAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1747\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp677, "return of DsrGetDcNameEx2, state S1747");
                this.Manager.Comment("reaching state \'S2764\'");
                goto label134;
            }
            if ((temp679 == 2)) {
                this.Manager.Comment("reaching state \'S731\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp678;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp678 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1748\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp678, "return of DsrGetDcNameEx2, state S1748");
                this.Manager.Comment("reaching state \'S2765\'");
                goto label134;
            }
            throw new InvalidOperationException("never reached");
        label134:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS34GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_LocateDc_DsrGetDcNameS34GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_LocateDc_DsrGetDcNameS34GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        #endregion
        
        #region Test Starting in S340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS340() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS340");
            this.Manager.Comment("reaching state \'S340\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp680;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp680);
            this.Manager.AddReturn(GetPlatformInfo, null, temp680);
            this.Manager.Comment("reaching state \'S341\'");
            int temp684 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS340GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS340GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS340GetPlatformChecker2)));
            if ((temp684 == 0)) {
                this.Manager.Comment("reaching state \'S1188\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp681;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,2147483648,FqdnFormatDomainNa" +
                        "me,Null,Null,0)\'");
                temp681 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 2147483648u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2205\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp681, "return of DsrGetDcNameEx2, state S2205");
                this.Manager.Comment("reaching state \'S3121\'");
                goto label135;
            }
            if ((temp684 == 1)) {
                this.Manager.Comment("reaching state \'S1189\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp682;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp682 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2206\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp682, "return of DsrGetDcNameEx2, state S2206");
                this.Manager.Comment("reaching state \'S3122\'");
                goto label135;
            }
            if ((temp684 == 2)) {
                this.Manager.Comment("reaching state \'S1190\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp683;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp683 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2207\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp683, "return of DsrGetDcNameEx2, state S2207");
                this.Manager.Comment("reaching state \'S3123\'");
                goto label135;
            }
            throw new InvalidOperationException("never reached");
        label135:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS340GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S341");
        }
        
        private void Test_LocateDc_DsrGetDcNameS340GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S341");
        }
        
        private void Test_LocateDc_DsrGetDcNameS340GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S341");
        }
        #endregion
        
        #region Test Starting in S342
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS342() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS342");
            this.Manager.Comment("reaching state \'S342\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp685;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp685);
            this.Manager.AddReturn(GetPlatformInfo, null, temp685);
            this.Manager.Comment("reaching state \'S343\'");
            int temp689 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS342GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS342GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS342GetPlatformChecker2)));
            if ((temp689 == 0)) {
                this.Manager.Comment("reaching state \'S1191\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp686;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",0)\'");
                temp686 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2208\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp686, "return of DsrGetDcNameEx2, state S2208");
                this.Manager.Comment("reaching state \'S3124\'");
                goto label136;
            }
            if ((temp689 == 1)) {
                this.Manager.Comment("reaching state \'S1192\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp687;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp687 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2209\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp687, "return of DsrGetDcNameEx2, state S2209");
                this.Manager.Comment("reaching state \'S3125\'");
                goto label136;
            }
            if ((temp689 == 2)) {
                this.Manager.Comment("reaching state \'S1193\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp688;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp688 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2210\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp688, "return of DsrGetDcNameEx2, state S2210");
                this.Manager.Comment("reaching state \'S3126\'");
                goto label136;
            }
            throw new InvalidOperationException("never reached");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS342GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S343");
        }
        
        private void Test_LocateDc_DsrGetDcNameS342GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S343");
        }
        
        private void Test_LocateDc_DsrGetDcNameS342GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S343");
        }
        #endregion
        
        #region Test Starting in S344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS344() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS344");
            this.Manager.Comment("reaching state \'S344\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp690;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp690);
            this.Manager.AddReturn(GetPlatformInfo, null, temp690);
            this.Manager.Comment("reaching state \'S345\'");
            int temp694 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS344GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS344GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS344GetPlatformChecker2)));
            if ((temp694 == 0)) {
                this.Manager.Comment("reaching state \'S1194\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp691;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",64)\'");
                temp691 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2211\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp691, "return of DsrGetDcNameEx2, state S2211");
                this.Manager.Comment("reaching state \'S3127\'");
                goto label137;
            }
            if ((temp694 == 1)) {
                this.Manager.Comment("reaching state \'S1195\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp692;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp692 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2212\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp692, "return of DsrGetDcNameEx2, state S2212");
                this.Manager.Comment("reaching state \'S3128\'");
                goto label137;
            }
            if ((temp694 == 2)) {
                this.Manager.Comment("reaching state \'S1196\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp693;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp693 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2213\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp693, "return of DsrGetDcNameEx2, state S2213");
                this.Manager.Comment("reaching state \'S3129\'");
                goto label137;
            }
            throw new InvalidOperationException("never reached");
        label137:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS344GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S345");
        }
        
        private void Test_LocateDc_DsrGetDcNameS344GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S345");
        }
        
        private void Test_LocateDc_DsrGetDcNameS344GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S345");
        }
        #endregion
        
        #region Test Starting in S346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS346() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS346");
            this.Manager.Comment("reaching state \'S346\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp695;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp695);
            this.Manager.AddReturn(GetPlatformInfo, null, temp695);
            this.Manager.Comment("reaching state \'S347\'");
            int temp699 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS346GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS346GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS346GetPlatformChecker2)));
            if ((temp699 == 0)) {
                this.Manager.Comment("reaching state \'S1197\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp696;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,0)\'");
                temp696 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2214\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp696, "return of DsrGetDcNameEx2, state S2214");
                this.Manager.Comment("reaching state \'S3130\'");
                goto label138;
            }
            if ((temp699 == 1)) {
                this.Manager.Comment("reaching state \'S1198\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp697;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp697 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2215\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp697, "return of DsrGetDcNameEx2, state S2215");
                this.Manager.Comment("reaching state \'S3131\'");
                goto label138;
            }
            if ((temp699 == 2)) {
                this.Manager.Comment("reaching state \'S1199\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp698;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp698 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2216\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp698, "return of DsrGetDcNameEx2, state S2216");
                this.Manager.Comment("reaching state \'S3132\'");
                goto label138;
            }
            throw new InvalidOperationException("never reached");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS346GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S347");
        }
        
        private void Test_LocateDc_DsrGetDcNameS346GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S347");
        }
        
        private void Test_LocateDc_DsrGetDcNameS346GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S347");
        }
        #endregion
        
        #region Test Starting in S348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS348() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS348");
            this.Manager.Comment("reaching state \'S348\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp700;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp700);
            this.Manager.AddReturn(GetPlatformInfo, null, temp700);
            this.Manager.Comment("reaching state \'S349\'");
            int temp704 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS348GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS348GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS348GetPlatformChecker2)));
            if ((temp704 == 0)) {
                this.Manager.Comment("reaching state \'S1200\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp701;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,S" +
                        "iteNameOne,0)\'");
                temp701 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), Microsoft.Protocols.TestSuites.Nrpc.SiteNameType.SiteNameOne, 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2217\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp701, "return of DsrGetDcNameEx2, state S2217");
                this.Manager.Comment("reaching state \'S3133\'");
                goto label139;
            }
            if ((temp704 == 1)) {
                this.Manager.Comment("reaching state \'S1201\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp702;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp702 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2218\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp702, "return of DsrGetDcNameEx2, state S2218");
                this.Manager.Comment("reaching state \'S3134\'");
                goto label139;
            }
            if ((temp704 == 2)) {
                this.Manager.Comment("reaching state \'S1202\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp703;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp703 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2219\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp703, "return of DsrGetDcNameEx2, state S2219");
                this.Manager.Comment("reaching state \'S3135\'");
                goto label139;
            }
            throw new InvalidOperationException("never reached");
        label139:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS348GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S349");
        }
        
        private void Test_LocateDc_DsrGetDcNameS348GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S349");
        }
        
        private void Test_LocateDc_DsrGetDcNameS348GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S349");
        }
        #endregion
        
        #region Test Starting in S350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS350() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS350");
            this.Manager.Comment("reaching state \'S350\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp705;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp705);
            this.Manager.AddReturn(GetPlatformInfo, null, temp705);
            this.Manager.Comment("reaching state \'S351\'");
            int temp709 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS350GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS350GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS350GetPlatformChecker2)));
            if ((temp709 == 0)) {
                this.Manager.Comment("reaching state \'S1203\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp706;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,I" +
                        "nvalidSiteName,0)\'");
                temp706 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(1)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2220\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp706, "return of DsrGetDcNameEx2, state S2220");
                this.Manager.Comment("reaching state \'S3136\'");
                goto label140;
            }
            if ((temp709 == 1)) {
                this.Manager.Comment("reaching state \'S1204\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp707;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp707 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2221\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp707, "return of DsrGetDcNameEx2, state S2221");
                this.Manager.Comment("reaching state \'S3137\'");
                goto label140;
            }
            if ((temp709 == 2)) {
                this.Manager.Comment("reaching state \'S1205\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp708;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp708 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2222\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp708, "return of DsrGetDcNameEx2, state S2222");
                this.Manager.Comment("reaching state \'S3138\'");
                goto label140;
            }
            throw new InvalidOperationException("never reached");
        label140:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS350GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S351");
        }
        
        private void Test_LocateDc_DsrGetDcNameS350GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S351");
        }
        
        private void Test_LocateDc_DsrGetDcNameS350GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S351");
        }
        #endregion
        
        #region Test Starting in S352
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS352() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS352");
            this.Manager.Comment("reaching state \'S352\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp710;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp710);
            this.Manager.AddReturn(GetPlatformInfo, null, temp710);
            this.Manager.Comment("reaching state \'S353\'");
            int temp714 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS352GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS352GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS352GetPlatformChecker2)));
            if ((temp714 == 0)) {
                this.Manager.Comment("reaching state \'S1206\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp711;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Invali" +
                        "dDomainGuid,Null,0)\'");
                temp711 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2223\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp711, "return of DsrGetDcNameEx2, state S2223");
                this.Manager.Comment("reaching state \'S3139\'");
                goto label141;
            }
            if ((temp714 == 1)) {
                this.Manager.Comment("reaching state \'S1207\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp712;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp712 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2224\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp712, "return of DsrGetDcNameEx2, state S2224");
                this.Manager.Comment("reaching state \'S3140\'");
                goto label141;
            }
            if ((temp714 == 2)) {
                this.Manager.Comment("reaching state \'S1208\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp713;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp713 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2225\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp713, "return of DsrGetDcNameEx2, state S2225");
                this.Manager.Comment("reaching state \'S3141\'");
                goto label141;
            }
            throw new InvalidOperationException("never reached");
        label141:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS352GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S353");
        }
        
        private void Test_LocateDc_DsrGetDcNameS352GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S353");
        }
        
        private void Test_LocateDc_DsrGetDcNameS352GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S353");
        }
        #endregion
        
        #region Test Starting in S354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS354() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS354");
            this.Manager.Comment("reaching state \'S354\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp715;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp715);
            this.Manager.AddReturn(GetPlatformInfo, null, temp715);
            this.Manager.Comment("reaching state \'S355\'");
            int temp719 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS354GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS354GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS354GetPlatformChecker2)));
            if ((temp719 == 0)) {
                this.Manager.Comment("reaching state \'S1209\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp716;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Primar" +
                        "yDomainGuid,Null,0)\'");
                temp716 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2226\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp716, "return of DsrGetDcNameEx2, state S2226");
                this.Manager.Comment("reaching state \'S3142\'");
                goto label142;
            }
            if ((temp719 == 1)) {
                this.Manager.Comment("reaching state \'S1210\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp717;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp717 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2227\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp717, "return of DsrGetDcNameEx2, state S2227");
                this.Manager.Comment("reaching state \'S3143\'");
                goto label142;
            }
            if ((temp719 == 2)) {
                this.Manager.Comment("reaching state \'S1211\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp718;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp718 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2228\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp718, "return of DsrGetDcNameEx2, state S2228");
                this.Manager.Comment("reaching state \'S3144\'");
                goto label142;
            }
            throw new InvalidOperationException("never reached");
        label142:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS354GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S355");
        }
        
        private void Test_LocateDc_DsrGetDcNameS354GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S355");
        }
        
        private void Test_LocateDc_DsrGetDcNameS354GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S355");
        }
        #endregion
        
        #region Test Starting in S356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS356() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS356");
            this.Manager.Comment("reaching state \'S356\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp720;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp720);
            this.Manager.AddReturn(GetPlatformInfo, null, temp720);
            this.Manager.Comment("reaching state \'S357\'");
            int temp724 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS356GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS356GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS356GetPlatformChecker2)));
            if ((temp724 == 0)) {
                this.Manager.Comment("reaching state \'S1212\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp721;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Truste" +
                        "dDomainGuid,Null,0)\'");
                temp721 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2229\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp721, "return of DsrGetDcNameEx2, state S2229");
                this.Manager.Comment("reaching state \'S3145\'");
                goto label143;
            }
            if ((temp724 == 1)) {
                this.Manager.Comment("reaching state \'S1213\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp722;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp722 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2230\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp722, "return of DsrGetDcNameEx2, state S2230");
                this.Manager.Comment("reaching state \'S3146\'");
                goto label143;
            }
            if ((temp724 == 2)) {
                this.Manager.Comment("reaching state \'S1214\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp723;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp723 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2231\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp723, "return of DsrGetDcNameEx2, state S2231");
                this.Manager.Comment("reaching state \'S3147\'");
                goto label143;
            }
            throw new InvalidOperationException("never reached");
        label143:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS356GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S357");
        }
        
        private void Test_LocateDc_DsrGetDcNameS356GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S357");
        }
        
        private void Test_LocateDc_DsrGetDcNameS356GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S357");
        }
        #endregion
        
        #region Test Starting in S358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS358() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS358");
            this.Manager.Comment("reaching state \'S358\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp725;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp725);
            this.Manager.AddReturn(GetPlatformInfo, null, temp725);
            this.Manager.Comment("reaching state \'S359\'");
            int temp729 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS358GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS358GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS358GetPlatformChecker2)));
            if ((temp729 == 0)) {
                this.Manager.Comment("reaching state \'S1215\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp726;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp726 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2232\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp726, "return of DsrGetDcNameEx2, state S2232");
                this.Manager.Comment("reaching state \'S3148\'");
                goto label144;
            }
            if ((temp729 == 1)) {
                this.Manager.Comment("reaching state \'S1216\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp727;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp727 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2233\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp727, "return of DsrGetDcNameEx2, state S2233");
                this.Manager.Comment("reaching state \'S3149\'");
                goto label144;
            }
            if ((temp729 == 2)) {
                this.Manager.Comment("reaching state \'S1217\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp728;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp728 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2234\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp728, "return of DsrGetDcNameEx2, state S2234");
                this.Manager.Comment("reaching state \'S3150\'");
                goto label144;
            }
            throw new InvalidOperationException("never reached");
        label144:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS358GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S359");
        }
        
        private void Test_LocateDc_DsrGetDcNameS358GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S359");
        }
        
        private void Test_LocateDc_DsrGetDcNameS358GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S359");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS36() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS36");
            this.Manager.Comment("reaching state \'S36\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp730;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp730);
            this.Manager.AddReturn(GetPlatformInfo, null, temp730);
            this.Manager.Comment("reaching state \'S37\'");
            int temp734 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS36GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS36GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS36GetPlatformChecker2)));
            if ((temp734 == 0)) {
                this.Manager.Comment("reaching state \'S732\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp731;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,NormalDomainUserAccount,0,FqdnForm" +
                        "atDomainName,Null,Null,0)\'");
                temp731 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.NormalDomainUserAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1749\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp731, "return of DsrGetDcNameEx2, state S1749");
                this.Manager.Comment("reaching state \'S2766\'");
                goto label145;
            }
            if ((temp734 == 1)) {
                this.Manager.Comment("reaching state \'S733\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp732;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,NormalDomainUserAccount,0,FqdnForm" +
                        "atDomainName,Null,Null,0)\'");
                temp732 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.NormalDomainUserAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1750\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp732, "return of DsrGetDcNameEx2, state S1750");
                this.Manager.Comment("reaching state \'S2767\'");
                goto label145;
            }
            if ((temp734 == 2)) {
                this.Manager.Comment("reaching state \'S734\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp733;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp733 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1751\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp733, "return of DsrGetDcNameEx2, state S1751");
                this.Manager.Comment("reaching state \'S2768\'");
                goto label145;
            }
            throw new InvalidOperationException("never reached");
        label145:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS36GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_LocateDc_DsrGetDcNameS36GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_LocateDc_DsrGetDcNameS36GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        #endregion
        
        #region Test Starting in S360
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS360() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS360");
            this.Manager.Comment("reaching state \'S360\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp735;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp735);
            this.Manager.AddReturn(GetPlatformInfo, null, temp735);
            this.Manager.Comment("reaching state \'S361\'");
            int temp739 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS360GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS360GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS360GetPlatformChecker2)));
            if ((temp739 == 0)) {
                this.Manager.Comment("reaching state \'S1218\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp736;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",0)\'");
                temp736 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2235\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp736, "return of DsrGetDcNameEx2, state S2235");
                this.Manager.Comment("reaching state \'S3151\'");
                goto label146;
            }
            if ((temp739 == 1)) {
                this.Manager.Comment("reaching state \'S1219\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp737;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp737 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2236\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp737, "return of DsrGetDcNameEx2, state S2236");
                this.Manager.Comment("reaching state \'S3152\'");
                goto label146;
            }
            if ((temp739 == 2)) {
                this.Manager.Comment("reaching state \'S1220\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp738;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp738 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2237\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp738, "return of DsrGetDcNameEx2, state S2237");
                this.Manager.Comment("reaching state \'S3153\'");
                goto label146;
            }
            throw new InvalidOperationException("never reached");
        label146:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS360GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S361");
        }
        
        private void Test_LocateDc_DsrGetDcNameS360GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S361");
        }
        
        private void Test_LocateDc_DsrGetDcNameS360GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S361");
        }
        #endregion
        
        #region Test Starting in S362
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS362() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS362");
            this.Manager.Comment("reaching state \'S362\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp740;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp740);
            this.Manager.AddReturn(GetPlatformInfo, null, temp740);
            this.Manager.Comment("reaching state \'S363\'");
            int temp744 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS362GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS362GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS362GetPlatformChecker2)));
            if ((temp744 == 0)) {
                this.Manager.Comment("reaching state \'S1221\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp741;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,0)\'");
                temp741 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2238\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp741, "return of DsrGetDcNameEx2, state S2238");
                this.Manager.Comment("reaching state \'S3154\'");
                goto label147;
            }
            if ((temp744 == 1)) {
                this.Manager.Comment("reaching state \'S1222\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp742;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp742 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2239\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp742, "return of DsrGetDcNameEx2, state S2239");
                this.Manager.Comment("reaching state \'S3155\'");
                goto label147;
            }
            if ((temp744 == 2)) {
                this.Manager.Comment("reaching state \'S1223\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp743;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp743 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2240\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp743, "return of DsrGetDcNameEx2, state S2240");
                this.Manager.Comment("reaching state \'S3156\'");
                goto label147;
            }
            throw new InvalidOperationException("never reached");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS362GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S363");
        }
        
        private void Test_LocateDc_DsrGetDcNameS362GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S363");
        }
        
        private void Test_LocateDc_DsrGetDcNameS362GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S363");
        }
        #endregion
        
        #region Test Starting in S364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS364() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS364");
            this.Manager.Comment("reaching state \'S364\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp745;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp745);
            this.Manager.AddReturn(GetPlatformInfo, null, temp745);
            this.Manager.Comment("reaching state \'S365\'");
            int temp749 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS364GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS364GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS364GetPlatformChecker2)));
            if ((temp749 == 0)) {
                this.Manager.Comment("reaching state \'S1224\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp746;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp746 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R104886");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2241\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp746, "return of DsrGetDcNameEx2, state S2241");
                this.Manager.Comment("reaching state \'S3157\'");
                goto label148;
            }
            if ((temp749 == 1)) {
                this.Manager.Comment("reaching state \'S1225\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp747;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp747 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2242\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp747, "return of DsrGetDcNameEx2, state S2242");
                this.Manager.Comment("reaching state \'S3158\'");
                goto label148;
            }
            if ((temp749 == 2)) {
                this.Manager.Comment("reaching state \'S1226\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp748;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp748 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2243\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp748, "return of DsrGetDcNameEx2, state S2243");
                this.Manager.Comment("reaching state \'S3159\'");
                goto label148;
            }
            throw new InvalidOperationException("never reached");
        label148:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS364GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S365");
        }
        
        private void Test_LocateDc_DsrGetDcNameS364GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S365");
        }
        
        private void Test_LocateDc_DsrGetDcNameS364GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S365");
        }
        #endregion
        
        #region Test Starting in S366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS366() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS366");
            this.Manager.Comment("reaching state \'S366\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp750;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp750);
            this.Manager.AddReturn(GetPlatformInfo, null, temp750);
            this.Manager.Comment("reaching state \'S367\'");
            int temp754 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS366GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS366GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS366GetPlatformChecker2)));
            if ((temp754 == 0)) {
                this.Manager.Comment("reaching state \'S1227\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp751;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,DomainMemberComputerAccount,0,Fqdn" +
                        "FormatDomainName,Null,Null,0)\'");
                temp751 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.DomainMemberComputerAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2244\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp751, "return of DsrGetDcNameEx2, state S2244");
                this.Manager.Comment("reaching state \'S3160\'");
                goto label149;
            }
            if ((temp754 == 1)) {
                this.Manager.Comment("reaching state \'S1228\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp752;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp752 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2245\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp752, "return of DsrGetDcNameEx2, state S2245");
                this.Manager.Comment("reaching state \'S3161\'");
                goto label149;
            }
            if ((temp754 == 2)) {
                this.Manager.Comment("reaching state \'S1229\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp753;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp753 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2246\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp753, "return of DsrGetDcNameEx2, state S2246");
                this.Manager.Comment("reaching state \'S3162\'");
                goto label149;
            }
            throw new InvalidOperationException("never reached");
        label149:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS366GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S367");
        }
        
        private void Test_LocateDc_DsrGetDcNameS366GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S367");
        }
        
        private void Test_LocateDc_DsrGetDcNameS366GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S367");
        }
        #endregion
        
        #region Test Starting in S368
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS368() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS368");
            this.Manager.Comment("reaching state \'S368\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp755;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp755);
            this.Manager.AddReturn(GetPlatformInfo, null, temp755);
            this.Manager.Comment("reaching state \'S369\'");
            int temp759 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS368GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS368GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS368GetPlatformChecker2)));
            if ((temp759 == 0)) {
                this.Manager.Comment("reaching state \'S1230\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp756;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,NormalDomainUserAccount,0,FqdnForm" +
                        "atDomainName,Null,Null,0)\'");
                temp756 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.NormalDomainUserAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2247\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp756, "return of DsrGetDcNameEx2, state S2247");
                this.Manager.Comment("reaching state \'S3163\'");
                goto label150;
            }
            if ((temp759 == 1)) {
                this.Manager.Comment("reaching state \'S1231\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp757;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp757 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2248\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp757, "return of DsrGetDcNameEx2, state S2248");
                this.Manager.Comment("reaching state \'S3164\'");
                goto label150;
            }
            if ((temp759 == 2)) {
                this.Manager.Comment("reaching state \'S1232\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp758;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp758 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2249\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp758, "return of DsrGetDcNameEx2, state S2249");
                this.Manager.Comment("reaching state \'S3165\'");
                goto label150;
            }
            throw new InvalidOperationException("never reached");
        label150:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS368GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S369");
        }
        
        private void Test_LocateDc_DsrGetDcNameS368GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S369");
        }
        
        private void Test_LocateDc_DsrGetDcNameS368GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S369");
        }
        #endregion
        
        #region Test Starting in S370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS370() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS370");
            this.Manager.Comment("reaching state \'S370\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp760;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp760);
            this.Manager.AddReturn(GetPlatformInfo, null, temp760);
            this.Manager.Comment("reaching state \'S371\'");
            int temp764 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS370GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS370GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS370GetPlatformChecker2)));
            if ((temp764 == 0)) {
                this.Manager.Comment("reaching state \'S1233\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp761;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,AnotherDomainUserAccount,0,FqdnFor" +
                        "matDomainName,Null,Null,0)\'");
                temp761 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.AnotherDomainUserAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2250\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp761, "return of DsrGetDcNameEx2, state S2250");
                this.Manager.Comment("reaching state \'S3166\'");
                goto label151;
            }
            if ((temp764 == 1)) {
                this.Manager.Comment("reaching state \'S1234\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp762;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp762 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2251\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp762, "return of DsrGetDcNameEx2, state S2251");
                this.Manager.Comment("reaching state \'S3167\'");
                goto label151;
            }
            if ((temp764 == 2)) {
                this.Manager.Comment("reaching state \'S1235\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp763;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp763 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2252\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp763, "return of DsrGetDcNameEx2, state S2252");
                this.Manager.Comment("reaching state \'S3168\'");
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS370GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S371");
        }
        
        private void Test_LocateDc_DsrGetDcNameS370GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S371");
        }
        
        private void Test_LocateDc_DsrGetDcNameS370GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S371");
        }
        #endregion
        
        #region Test Starting in S372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS372() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS372");
            this.Manager.Comment("reaching state \'S372\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp765;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp765);
            this.Manager.AddReturn(GetPlatformInfo, null, temp765);
            this.Manager.Comment("reaching state \'S373\'");
            int temp769 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS372GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS372GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS372GetPlatformChecker2)));
            if ((temp769 == 0)) {
                this.Manager.Comment("reaching state \'S1236\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp766;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,InvalidAccount,0,FqdnFormatDomainN" +
                        "ame,Null,Null,0)\'");
                temp766 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(1)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2253\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp766, "return of DsrGetDcNameEx2, state S2253");
                this.Manager.Comment("reaching state \'S3169\'");
                goto label152;
            }
            if ((temp769 == 1)) {
                this.Manager.Comment("reaching state \'S1237\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp767;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp767 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2254\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp767, "return of DsrGetDcNameEx2, state S2254");
                this.Manager.Comment("reaching state \'S3170\'");
                goto label152;
            }
            if ((temp769 == 2)) {
                this.Manager.Comment("reaching state \'S1238\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp768;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp768 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2255\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp768, "return of DsrGetDcNameEx2, state S2255");
                this.Manager.Comment("reaching state \'S3171\'");
                goto label152;
            }
            throw new InvalidOperationException("never reached");
        label152:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS372GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S373");
        }
        
        private void Test_LocateDc_DsrGetDcNameS372GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S373");
        }
        
        private void Test_LocateDc_DsrGetDcNameS372GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S373");
        }
        #endregion
        
        #region Test Starting in S374
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS374() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS374");
            this.Manager.Comment("reaching state \'S374\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp770;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp770);
            this.Manager.AddReturn(GetPlatformInfo, null, temp770);
            this.Manager.Comment("reaching state \'S375\'");
            int temp774 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS374GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS374GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS374GetPlatformChecker2)));
            if ((temp774 == 0)) {
                this.Manager.Comment("reaching state \'S1239\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp771;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(NonDcServer,Null,0,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp771 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2256\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp771, "return of DsrGetDcNameEx2, state S2256");
                this.Manager.Comment("reaching state \'S3172\'");
                goto label153;
            }
            if ((temp774 == 1)) {
                this.Manager.Comment("reaching state \'S1240\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp772;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp772 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2257\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp772, "return of DsrGetDcNameEx2, state S2257");
                this.Manager.Comment("reaching state \'S3173\'");
                goto label153;
            }
            if ((temp774 == 2)) {
                this.Manager.Comment("reaching state \'S1241\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp773;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp773 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2258\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp773, "return of DsrGetDcNameEx2, state S2258");
                this.Manager.Comment("reaching state \'S3174\'");
                goto label153;
            }
            throw new InvalidOperationException("never reached");
        label153:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS374GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S375");
        }
        
        private void Test_LocateDc_DsrGetDcNameS374GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S375");
        }
        
        private void Test_LocateDc_DsrGetDcNameS374GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S375");
        }
        #endregion
        
        #region Test Starting in S376
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS376() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS376");
            this.Manager.Comment("reaching state \'S376\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp775;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp775);
            this.Manager.AddReturn(GetPlatformInfo, null, temp775);
            this.Manager.Comment("reaching state \'S377\'");
            int temp779 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS376GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS376GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS376GetPlatformChecker2)));
            if ((temp779 == 0)) {
                this.Manager.Comment("reaching state \'S1242\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp776;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",65536)\'");
                temp776 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2259\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp776, "return of DsrGetDcNameEx2, state S2259");
                this.Manager.Comment("reaching state \'S3175\'");
                goto label154;
            }
            if ((temp779 == 1)) {
                this.Manager.Comment("reaching state \'S1243\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp777;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp777 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2260\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp777, "return of DsrGetDcNameEx2, state S2260");
                this.Manager.Comment("reaching state \'S3176\'");
                goto label154;
            }
            if ((temp779 == 2)) {
                this.Manager.Comment("reaching state \'S1244\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp778;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp778 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2261\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp778, "return of DsrGetDcNameEx2, state S2261");
                this.Manager.Comment("reaching state \'S3177\'");
                goto label154;
            }
            throw new InvalidOperationException("never reached");
        label154:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS376GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S377");
        }
        
        private void Test_LocateDc_DsrGetDcNameS376GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S377");
        }
        
        private void Test_LocateDc_DsrGetDcNameS376GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S377");
        }
        #endregion
        
        #region Test Starting in S378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS378() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS378");
            this.Manager.Comment("reaching state \'S378\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp780;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp780);
            this.Manager.AddReturn(GetPlatformInfo, null, temp780);
            this.Manager.Comment("reaching state \'S379\'");
            int temp784 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS378GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS378GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS378GetPlatformChecker2)));
            if ((temp784 == 0)) {
                this.Manager.Comment("reaching state \'S1245\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp781;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,64)\'");
                temp781 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2262\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp781, "return of DsrGetDcNameEx2, state S2262");
                this.Manager.Comment("reaching state \'S3178\'");
                goto label155;
            }
            if ((temp784 == 1)) {
                this.Manager.Comment("reaching state \'S1246\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp782;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp782 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2263\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp782, "return of DsrGetDcNameEx2, state S2263");
                this.Manager.Comment("reaching state \'S3179\'");
                goto label155;
            }
            if ((temp784 == 2)) {
                this.Manager.Comment("reaching state \'S1247\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp783;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp783 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2264\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp783, "return of DsrGetDcNameEx2, state S2264");
                this.Manager.Comment("reaching state \'S3180\'");
                goto label155;
            }
            throw new InvalidOperationException("never reached");
        label155:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS378GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S379");
        }
        
        private void Test_LocateDc_DsrGetDcNameS378GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S379");
        }
        
        private void Test_LocateDc_DsrGetDcNameS378GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S379");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS38() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS38");
            this.Manager.Comment("reaching state \'S38\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp785;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp785);
            this.Manager.AddReturn(GetPlatformInfo, null, temp785);
            this.Manager.Comment("reaching state \'S39\'");
            int temp789 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS38GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS38GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS38GetPlatformChecker2)));
            if ((temp789 == 0)) {
                this.Manager.Comment("reaching state \'S735\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp786;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,AnotherDomainUserAccount,0,FqdnFor" +
                        "matDomainName,Null,Null,0)\'");
                temp786 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.AnotherDomainUserAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1752\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp786, "return of DsrGetDcNameEx2, state S1752");
                this.Manager.Comment("reaching state \'S2769\'");
                goto label156;
            }
            if ((temp789 == 1)) {
                this.Manager.Comment("reaching state \'S736\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp787;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,AnotherDomainUserAccount,0,FqdnFor" +
                        "matDomainName,Null,Null,0)\'");
                temp787 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.AnotherDomainUserAccount, 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1753\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp787, "return of DsrGetDcNameEx2, state S1753");
                this.Manager.Comment("reaching state \'S2770\'");
                goto label156;
            }
            if ((temp789 == 2)) {
                this.Manager.Comment("reaching state \'S737\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp788;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp788 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1754\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp788, "return of DsrGetDcNameEx2, state S1754");
                this.Manager.Comment("reaching state \'S2771\'");
                goto label156;
            }
            throw new InvalidOperationException("never reached");
        label156:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS38GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_LocateDc_DsrGetDcNameS38GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_LocateDc_DsrGetDcNameS38GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        #endregion
        
        #region Test Starting in S380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS380() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS380");
            this.Manager.Comment("reaching state \'S380\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp790;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp790);
            this.Manager.AddReturn(GetPlatformInfo, null, temp790);
            this.Manager.Comment("reaching state \'S381\'");
            int temp794 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS380GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS380GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS380GetPlatformChecker2)));
            if ((temp794 == 0)) {
                this.Manager.Comment("reaching state \'S1248\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp791;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,64)\'");
                temp791 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2265\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp791, "return of DsrGetDcNameEx2, state S2265");
                this.Manager.Comment("reaching state \'S3181\'");
                goto label157;
            }
            if ((temp794 == 1)) {
                this.Manager.Comment("reaching state \'S1249\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp792;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp792 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2266\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp792, "return of DsrGetDcNameEx2, state S2266");
                this.Manager.Comment("reaching state \'S3182\'");
                goto label157;
            }
            if ((temp794 == 2)) {
                this.Manager.Comment("reaching state \'S1250\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp793;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp793 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2267\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp793, "return of DsrGetDcNameEx2, state S2267");
                this.Manager.Comment("reaching state \'S3183\'");
                goto label157;
            }
            throw new InvalidOperationException("never reached");
        label157:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS380GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S381");
        }
        
        private void Test_LocateDc_DsrGetDcNameS380GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S381");
        }
        
        private void Test_LocateDc_DsrGetDcNameS380GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S381");
        }
        #endregion
        
        #region Test Starting in S382
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS382() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS382");
            this.Manager.Comment("reaching state \'S382\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp795;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp795);
            this.Manager.AddReturn(GetPlatformInfo, null, temp795);
            this.Manager.Comment("reaching state \'S383\'");
            int temp799 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS382GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS382GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS382GetPlatformChecker2)));
            if ((temp799 == 0)) {
                this.Manager.Comment("reaching state \'S1251\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp796;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,64)\'");
                temp796 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2268\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp796, "return of DsrGetDcNameEx2, state S2268");
                this.Manager.Comment("reaching state \'S3184\'");
                goto label158;
            }
            if ((temp799 == 1)) {
                this.Manager.Comment("reaching state \'S1252\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp797;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp797 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2269\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp797, "return of DsrGetDcNameEx2, state S2269");
                this.Manager.Comment("reaching state \'S3185\'");
                goto label158;
            }
            if ((temp799 == 2)) {
                this.Manager.Comment("reaching state \'S1253\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp798;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp798 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2270\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp798, "return of DsrGetDcNameEx2, state S2270");
                this.Manager.Comment("reaching state \'S3186\'");
                goto label158;
            }
            throw new InvalidOperationException("never reached");
        label158:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS382GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S383");
        }
        
        private void Test_LocateDc_DsrGetDcNameS382GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S383");
        }
        
        private void Test_LocateDc_DsrGetDcNameS382GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S383");
        }
        #endregion
        
        #region Test Starting in S384
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS384() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS384");
            this.Manager.Comment("reaching state \'S384\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp800;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp800);
            this.Manager.AddReturn(GetPlatformInfo, null, temp800);
            this.Manager.Comment("reaching state \'S385\'");
            int temp804 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS384GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS384GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS384GetPlatformChecker2)));
            if ((temp804 == 0)) {
                this.Manager.Comment("reaching state \'S1254\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp801;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",64)\'");
                temp801 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R104883");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2271\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp801, "return of DsrGetDcNameEx2, state S2271");
                this.Manager.Comment("reaching state \'S3187\'");
                goto label159;
            }
            if ((temp804 == 1)) {
                this.Manager.Comment("reaching state \'S1255\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp802;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp802 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2272\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp802, "return of DsrGetDcNameEx2, state S2272");
                this.Manager.Comment("reaching state \'S3188\'");
                goto label159;
            }
            if ((temp804 == 2)) {
                this.Manager.Comment("reaching state \'S1256\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp803;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp803 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2273\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp803, "return of DsrGetDcNameEx2, state S2273");
                this.Manager.Comment("reaching state \'S3189\'");
                goto label159;
            }
            throw new InvalidOperationException("never reached");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS384GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S385");
        }
        
        private void Test_LocateDc_DsrGetDcNameS384GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S385");
        }
        
        private void Test_LocateDc_DsrGetDcNameS384GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S385");
        }
        #endregion
        
        #region Test Starting in S386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS386() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS386");
            this.Manager.Comment("reaching state \'S386\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp805;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp805);
            this.Manager.AddReturn(GetPlatformInfo, null, temp805);
            this.Manager.Comment("reaching state \'S387\'");
            int temp809 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS386GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS386GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS386GetPlatformChecker2)));
            if ((temp809 == 0)) {
                this.Manager.Comment("reaching state \'S1257\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp806;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,64)\'");
                temp806 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R104886");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2274\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp806, "return of DsrGetDcNameEx2, state S2274");
                this.Manager.Comment("reaching state \'S3190\'");
                goto label160;
            }
            if ((temp809 == 1)) {
                this.Manager.Comment("reaching state \'S1258\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp807;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp807 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2275\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp807, "return of DsrGetDcNameEx2, state S2275");
                this.Manager.Comment("reaching state \'S3191\'");
                goto label160;
            }
            if ((temp809 == 2)) {
                this.Manager.Comment("reaching state \'S1259\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp808;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp808 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2276\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp808, "return of DsrGetDcNameEx2, state S2276");
                this.Manager.Comment("reaching state \'S3192\'");
                goto label160;
            }
            throw new InvalidOperationException("never reached");
        label160:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS386GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S387");
        }
        
        private void Test_LocateDc_DsrGetDcNameS386GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S387");
        }
        
        private void Test_LocateDc_DsrGetDcNameS386GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S387");
        }
        #endregion
        
        #region Test Starting in S388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS388() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS388");
            this.Manager.Comment("reaching state \'S388\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp810;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp810);
            this.Manager.AddReturn(GetPlatformInfo, null, temp810);
            this.Manager.Comment("reaching state \'S389\'");
            int temp814 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS388GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS388GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS388GetPlatformChecker2)));
            if ((temp814 == 0)) {
                this.Manager.Comment("reaching state \'S1260\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp811;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,65536)\'");
                temp811 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2277\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp811, "return of DsrGetDcNameEx2, state S2277");
                this.Manager.Comment("reaching state \'S3193\'");
                goto label161;
            }
            if ((temp814 == 1)) {
                this.Manager.Comment("reaching state \'S1261\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp812;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp812 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2278\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp812, "return of DsrGetDcNameEx2, state S2278");
                this.Manager.Comment("reaching state \'S3194\'");
                goto label161;
            }
            if ((temp814 == 2)) {
                this.Manager.Comment("reaching state \'S1262\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp813;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp813 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2279\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp813, "return of DsrGetDcNameEx2, state S2279");
                this.Manager.Comment("reaching state \'S3195\'");
                goto label161;
            }
            throw new InvalidOperationException("never reached");
        label161:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS388GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S389");
        }
        
        private void Test_LocateDc_DsrGetDcNameS388GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S389");
        }
        
        private void Test_LocateDc_DsrGetDcNameS388GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S389");
        }
        #endregion
        
        #region Test Starting in S390
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS390() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS390");
            this.Manager.Comment("reaching state \'S390\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp815;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp815);
            this.Manager.AddReturn(GetPlatformInfo, null, temp815);
            this.Manager.Comment("reaching state \'S391\'");
            int temp819 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS390GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS390GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS390GetPlatformChecker2)));
            if ((temp819 == 0)) {
                this.Manager.Comment("reaching state \'S1263\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp816;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,65536)\'");
                temp816 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R104884");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2280\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp816, "return of DsrGetDcNameEx2, state S2280");
                this.Manager.Comment("reaching state \'S3196\'");
                goto label162;
            }
            if ((temp819 == 1)) {
                this.Manager.Comment("reaching state \'S1264\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp817;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp817 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2281\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp817, "return of DsrGetDcNameEx2, state S2281");
                this.Manager.Comment("reaching state \'S3197\'");
                goto label162;
            }
            if ((temp819 == 2)) {
                this.Manager.Comment("reaching state \'S1265\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp818;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp818 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2282\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp818, "return of DsrGetDcNameEx2, state S2282");
                this.Manager.Comment("reaching state \'S3198\'");
                goto label162;
            }
            throw new InvalidOperationException("never reached");
        label162:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS390GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S391");
        }
        
        private void Test_LocateDc_DsrGetDcNameS390GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S391");
        }
        
        private void Test_LocateDc_DsrGetDcNameS390GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S391");
        }
        #endregion
        
        #region Test Starting in S392
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS392() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS392");
            this.Manager.Comment("reaching state \'S392\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp820;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp820);
            this.Manager.AddReturn(GetPlatformInfo, null, temp820);
            this.Manager.Comment("reaching state \'S393\'");
            int temp824 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS392GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS392GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS392GetPlatformChecker2)));
            if ((temp824 == 0)) {
                this.Manager.Comment("reaching state \'S1266\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp821;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,65536)\'");
                temp821 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2283\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp821, "return of DsrGetDcNameEx2, state S2283");
                this.Manager.Comment("reaching state \'S3199\'");
                goto label163;
            }
            if ((temp824 == 1)) {
                this.Manager.Comment("reaching state \'S1267\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp822;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp822 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2284\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp822, "return of DsrGetDcNameEx2, state S2284");
                this.Manager.Comment("reaching state \'S3200\'");
                goto label163;
            }
            if ((temp824 == 2)) {
                this.Manager.Comment("reaching state \'S1268\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp823;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp823 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2285\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp823, "return of DsrGetDcNameEx2, state S2285");
                this.Manager.Comment("reaching state \'S3201\'");
                goto label163;
            }
            throw new InvalidOperationException("never reached");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS392GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S393");
        }
        
        private void Test_LocateDc_DsrGetDcNameS392GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S393");
        }
        
        private void Test_LocateDc_DsrGetDcNameS392GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S393");
        }
        #endregion
        
        #region Test Starting in S394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS394() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS394");
            this.Manager.Comment("reaching state \'S394\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp825;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp825);
            this.Manager.AddReturn(GetPlatformInfo, null, temp825);
            this.Manager.Comment("reaching state \'S395\'");
            int temp829 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS394GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS394GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS394GetPlatformChecker2)));
            if ((temp829 == 0)) {
                this.Manager.Comment("reaching state \'S1269\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp826;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,65536)\'");
                temp826 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2286\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp826, "return of DsrGetDcNameEx2, state S2286");
                this.Manager.Comment("reaching state \'S3202\'");
                goto label164;
            }
            if ((temp829 == 1)) {
                this.Manager.Comment("reaching state \'S1270\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp827;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp827 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2287\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp827, "return of DsrGetDcNameEx2, state S2287");
                this.Manager.Comment("reaching state \'S3203\'");
                goto label164;
            }
            if ((temp829 == 2)) {
                this.Manager.Comment("reaching state \'S1271\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp828;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp828 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2288\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp828, "return of DsrGetDcNameEx2, state S2288");
                this.Manager.Comment("reaching state \'S3204\'");
                goto label164;
            }
            throw new InvalidOperationException("never reached");
        label164:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS394GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S395");
        }
        
        private void Test_LocateDc_DsrGetDcNameS394GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S395");
        }
        
        private void Test_LocateDc_DsrGetDcNameS394GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S395");
        }
        #endregion
        
        #region Test Starting in S396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS396() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS396");
            this.Manager.Comment("reaching state \'S396\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp830;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp830);
            this.Manager.AddReturn(GetPlatformInfo, null, temp830);
            this.Manager.Comment("reaching state \'S397\'");
            int temp834 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS396GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS396GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS396GetPlatformChecker2)));
            if ((temp834 == 0)) {
                this.Manager.Comment("reaching state \'S1272\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp831;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",65536)\'");
                temp831 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2289\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp831, "return of DsrGetDcNameEx2, state S2289");
                this.Manager.Comment("reaching state \'S3205\'");
                goto label165;
            }
            if ((temp834 == 1)) {
                this.Manager.Comment("reaching state \'S1273\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp832;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp832 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2290\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp832, "return of DsrGetDcNameEx2, state S2290");
                this.Manager.Comment("reaching state \'S3206\'");
                goto label165;
            }
            if ((temp834 == 2)) {
                this.Manager.Comment("reaching state \'S1274\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp833;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp833 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2291\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp833, "return of DsrGetDcNameEx2, state S2291");
                this.Manager.Comment("reaching state \'S3207\'");
                goto label165;
            }
            throw new InvalidOperationException("never reached");
        label165:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS396GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S397");
        }
        
        private void Test_LocateDc_DsrGetDcNameS396GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S397");
        }
        
        private void Test_LocateDc_DsrGetDcNameS396GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S397");
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS398() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS398");
            this.Manager.Comment("reaching state \'S398\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp835;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp835);
            this.Manager.AddReturn(GetPlatformInfo, null, temp835);
            this.Manager.Comment("reaching state \'S399\'");
            int temp839 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS398GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS398GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS398GetPlatformChecker2)));
            if ((temp839 == 0)) {
                this.Manager.Comment("reaching state \'S1275\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp836;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,PrimaryDo" +
                        "mainGuid,Null,0)\'");
                temp836 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2292\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp836, "return of DsrGetDcNameEx2, state S2292");
                this.Manager.Comment("reaching state \'S3208\'");
                goto label166;
            }
            if ((temp839 == 1)) {
                this.Manager.Comment("reaching state \'S1276\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp837;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp837 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2293\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp837, "return of DsrGetDcNameEx2, state S2293");
                this.Manager.Comment("reaching state \'S3209\'");
                goto label166;
            }
            if ((temp839 == 2)) {
                this.Manager.Comment("reaching state \'S1277\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp838;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp838 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2294\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp838, "return of DsrGetDcNameEx2, state S2294");
                this.Manager.Comment("reaching state \'S3210\'");
                goto label166;
            }
            throw new InvalidOperationException("never reached");
        label166:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS398GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S399");
        }
        
        private void Test_LocateDc_DsrGetDcNameS398GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S399");
        }
        
        private void Test_LocateDc_DsrGetDcNameS398GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S399");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS4() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS4");
            this.Manager.Comment("reaching state \'S4\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp840;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp840);
            this.Manager.AddReturn(GetPlatformInfo, null, temp840);
            this.Manager.Comment("reaching state \'S5\'");
            int temp844 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS4GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS4GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS4GetPlatformChecker2)));
            if ((temp844 == 0)) {
                this.Manager.Comment("reaching state \'S684\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp841;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp841 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1701\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp841, "return of DsrGetDcNameEx2, state S1701");
                this.Manager.Comment("reaching state \'S2718\'");
                goto label167;
            }
            if ((temp844 == 1)) {
                this.Manager.Comment("reaching state \'S685\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp842;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,512,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp842 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 512u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1702\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp842, "return of DsrGetDcNameEx2, state S1702");
                this.Manager.Comment("reaching state \'S2719\'");
                goto label167;
            }
            if ((temp844 == 2)) {
                this.Manager.Comment("reaching state \'S686\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp843;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp843 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1703\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp843, "return of DsrGetDcNameEx2, state S1703");
                this.Manager.Comment("reaching state \'S2720\'");
                goto label167;
            }
            throw new InvalidOperationException("never reached");
        label167:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS4GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_LocateDc_DsrGetDcNameS4GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_LocateDc_DsrGetDcNameS4GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS40() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp845;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp845);
            this.Manager.AddReturn(GetPlatformInfo, null, temp845);
            this.Manager.Comment("reaching state \'S41\'");
            int temp849 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS40GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS40GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS40GetPlatformChecker2)));
            if ((temp849 == 0)) {
                this.Manager.Comment("reaching state \'S738\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp846;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,InvalidAccount,0,FqdnFormatDomainN" +
                        "ame,Null,Null,0)\'");
                temp846 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(1)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1755\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp846, "return of DsrGetDcNameEx2, state S1755");
                this.Manager.Comment("reaching state \'S2772\'");
                goto label168;
            }
            if ((temp849 == 1)) {
                this.Manager.Comment("reaching state \'S739\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp847;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,InvalidAccount,0,FqdnFormatDomainN" +
                        "ame,Null,Null,0)\'");
                temp847 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(1)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1756\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp847, "return of DsrGetDcNameEx2, state S1756");
                this.Manager.Comment("reaching state \'S2773\'");
                goto label168;
            }
            if ((temp849 == 2)) {
                this.Manager.Comment("reaching state \'S740\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp848;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp848 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1757\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp848, "return of DsrGetDcNameEx2, state S1757");
                this.Manager.Comment("reaching state \'S2774\'");
                goto label168;
            }
            throw new InvalidOperationException("never reached");
        label168:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS40GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_LocateDc_DsrGetDcNameS40GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_LocateDc_DsrGetDcNameS40GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        #endregion
        
        #region Test Starting in S400
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS400() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS400");
            this.Manager.Comment("reaching state \'S400\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp850;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp850);
            this.Manager.AddReturn(GetPlatformInfo, null, temp850);
            this.Manager.Comment("reaching state \'S401\'");
            int temp854 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS400GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS400GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS400GetPlatformChecker2)));
            if ((temp854 == 0)) {
                this.Manager.Comment("reaching state \'S1278\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp851;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,AnotherDomainUserAccount,256,FqdnF" +
                        "ormatDomainName,Null,Null,0)\'");
                temp851 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.AnotherDomainUserAccount, 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2295\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp851, "return of DsrGetDcNameEx2, state S2295");
                this.Manager.Comment("reaching state \'S3211\'");
                goto label169;
            }
            if ((temp854 == 1)) {
                this.Manager.Comment("reaching state \'S1279\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp852;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp852 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2296\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp852, "return of DsrGetDcNameEx2, state S2296");
                this.Manager.Comment("reaching state \'S3212\'");
                goto label169;
            }
            if ((temp854 == 2)) {
                this.Manager.Comment("reaching state \'S1280\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp853;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp853 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2297\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp853, "return of DsrGetDcNameEx2, state S2297");
                this.Manager.Comment("reaching state \'S3213\'");
                goto label169;
            }
            throw new InvalidOperationException("never reached");
        label169:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS400GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S401");
        }
        
        private void Test_LocateDc_DsrGetDcNameS400GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S401");
        }
        
        private void Test_LocateDc_DsrGetDcNameS400GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S401");
        }
        #endregion
        
        #region Test Starting in S402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS402() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS402");
            this.Manager.Comment("reaching state \'S402\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp855;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp855);
            this.Manager.AddReturn(GetPlatformInfo, null, temp855);
            this.Manager.Comment("reaching state \'S403\'");
            int temp859 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS402GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS402GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS402GetPlatformChecker2)));
            if ((temp859 == 0)) {
                this.Manager.Comment("reaching state \'S1281\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp856;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1024)\'");
                temp856 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1024u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2298\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp856, "return of DsrGetDcNameEx2, state S2298");
                this.Manager.Comment("reaching state \'S3214\'");
                goto label170;
            }
            if ((temp859 == 1)) {
                this.Manager.Comment("reaching state \'S1282\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp857;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp857 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2299\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp857, "return of DsrGetDcNameEx2, state S2299");
                this.Manager.Comment("reaching state \'S3215\'");
                goto label170;
            }
            if ((temp859 == 2)) {
                this.Manager.Comment("reaching state \'S1283\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp858;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp858 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2300\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp858, "return of DsrGetDcNameEx2, state S2300");
                this.Manager.Comment("reaching state \'S3216\'");
                goto label170;
            }
            throw new InvalidOperationException("never reached");
        label170:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS402GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S403");
        }
        
        private void Test_LocateDc_DsrGetDcNameS402GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S403");
        }
        
        private void Test_LocateDc_DsrGetDcNameS402GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S403");
        }
        #endregion
        
        #region Test Starting in S404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS404() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS404");
            this.Manager.Comment("reaching state \'S404\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp860;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp860);
            this.Manager.AddReturn(GetPlatformInfo, null, temp860);
            this.Manager.Comment("reaching state \'S405\'");
            int temp864 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS404GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS404GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS404GetPlatformChecker2)));
            if ((temp864 == 0)) {
                this.Manager.Comment("reaching state \'S1284\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp861;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1152)\'");
                temp861 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104880");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2301\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp861, "return of DsrGetDcNameEx2, state S2301");
                this.Manager.Comment("reaching state \'S3217\'");
                goto label171;
            }
            if ((temp864 == 1)) {
                this.Manager.Comment("reaching state \'S1285\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp862;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp862 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2302\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp862, "return of DsrGetDcNameEx2, state S2302");
                this.Manager.Comment("reaching state \'S3218\'");
                goto label171;
            }
            if ((temp864 == 2)) {
                this.Manager.Comment("reaching state \'S1286\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp863;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp863 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2303\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp863, "return of DsrGetDcNameEx2, state S2303");
                this.Manager.Comment("reaching state \'S3219\'");
                goto label171;
            }
            throw new InvalidOperationException("never reached");
        label171:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS404GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S405");
        }
        
        private void Test_LocateDc_DsrGetDcNameS404GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S405");
        }
        
        private void Test_LocateDc_DsrGetDcNameS404GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S405");
        }
        #endregion
        
        #region Test Starting in S406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS406() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS406");
            this.Manager.Comment("reaching state \'S406\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp865;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp865);
            this.Manager.AddReturn(GetPlatformInfo, null, temp865);
            this.Manager.Comment("reaching state \'S407\'");
            int temp869 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS406GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS406GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS406GetPlatformChecker2)));
            if ((temp869 == 0)) {
                this.Manager.Comment("reaching state \'S1287\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp866;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1088)\'");
                temp866 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104878");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2304\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp866, "return of DsrGetDcNameEx2, state S2304");
                this.Manager.Comment("reaching state \'S3220\'");
                goto label172;
            }
            if ((temp869 == 1)) {
                this.Manager.Comment("reaching state \'S1288\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp867;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp867 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2305\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp867, "return of DsrGetDcNameEx2, state S2305");
                this.Manager.Comment("reaching state \'S3221\'");
                goto label172;
            }
            if ((temp869 == 2)) {
                this.Manager.Comment("reaching state \'S1289\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp868;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp868 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2306\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp868, "return of DsrGetDcNameEx2, state S2306");
                this.Manager.Comment("reaching state \'S3222\'");
                goto label172;
            }
            throw new InvalidOperationException("never reached");
        label172:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS406GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S407");
        }
        
        private void Test_LocateDc_DsrGetDcNameS406GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S407");
        }
        
        private void Test_LocateDc_DsrGetDcNameS406GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S407");
        }
        #endregion
        
        #region Test Starting in S408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS408() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS408");
            this.Manager.Comment("reaching state \'S408\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp870;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp870);
            this.Manager.AddReturn(GetPlatformInfo, null, temp870);
            this.Manager.Comment("reaching state \'S409\'");
            int temp874 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS408GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS408GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS408GetPlatformChecker2)));
            if ((temp874 == 0)) {
                this.Manager.Comment("reaching state \'S1290\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp871;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1)\'");
                temp871 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2307\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp871, "return of DsrGetDcNameEx2, state S2307");
                this.Manager.Comment("reaching state \'S3223\'");
                goto label173;
            }
            if ((temp874 == 1)) {
                this.Manager.Comment("reaching state \'S1291\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp872;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp872 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2308\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp872, "return of DsrGetDcNameEx2, state S2308");
                this.Manager.Comment("reaching state \'S3224\'");
                goto label173;
            }
            if ((temp874 == 2)) {
                this.Manager.Comment("reaching state \'S1292\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp873;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp873 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2309\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp873, "return of DsrGetDcNameEx2, state S2309");
                this.Manager.Comment("reaching state \'S3225\'");
                goto label173;
            }
            throw new InvalidOperationException("never reached");
        label173:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS408GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S409");
        }
        
        private void Test_LocateDc_DsrGetDcNameS408GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S409");
        }
        
        private void Test_LocateDc_DsrGetDcNameS408GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S409");
        }
        #endregion
        
        #region Test Starting in S410
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS410() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS410");
            this.Manager.Comment("reaching state \'S410\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp875;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp875);
            this.Manager.AddReturn(GetPlatformInfo, null, temp875);
            this.Manager.Comment("reaching state \'S411\'");
            int temp879 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS410GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS410GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS410GetPlatformChecker2)));
            if ((temp879 == 0)) {
                this.Manager.Comment("reaching state \'S1293\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp876;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,16)\'");
                temp876 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2310\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp876, "return of DsrGetDcNameEx2, state S2310");
                this.Manager.Comment("reaching state \'S3226\'");
                goto label174;
            }
            if ((temp879 == 1)) {
                this.Manager.Comment("reaching state \'S1294\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp877;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp877 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2311\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp877, "return of DsrGetDcNameEx2, state S2311");
                this.Manager.Comment("reaching state \'S3227\'");
                goto label174;
            }
            if ((temp879 == 2)) {
                this.Manager.Comment("reaching state \'S1295\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp878;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp878 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2312\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp878, "return of DsrGetDcNameEx2, state S2312");
                this.Manager.Comment("reaching state \'S3228\'");
                goto label174;
            }
            throw new InvalidOperationException("never reached");
        label174:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS410GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S411");
        }
        
        private void Test_LocateDc_DsrGetDcNameS410GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S411");
        }
        
        private void Test_LocateDc_DsrGetDcNameS410GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S411");
        }
        #endregion
        
        #region Test Starting in S412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS412() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS412");
            this.Manager.Comment("reaching state \'S412\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp880;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp880);
            this.Manager.AddReturn(GetPlatformInfo, null, temp880);
            this.Manager.Comment("reaching state \'S413\'");
            int temp884 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS412GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS412GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS412GetPlatformChecker2)));
            if ((temp884 == 0)) {
                this.Manager.Comment("reaching state \'S1296\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp881;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32)\'");
                temp881 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2313\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp881, "return of DsrGetDcNameEx2, state S2313");
                this.Manager.Comment("reaching state \'S3229\'");
                goto label175;
            }
            if ((temp884 == 1)) {
                this.Manager.Comment("reaching state \'S1297\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp882;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp882 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2314\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp882, "return of DsrGetDcNameEx2, state S2314");
                this.Manager.Comment("reaching state \'S3230\'");
                goto label175;
            }
            if ((temp884 == 2)) {
                this.Manager.Comment("reaching state \'S1298\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp883;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp883 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2315\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp883, "return of DsrGetDcNameEx2, state S2315");
                this.Manager.Comment("reaching state \'S3231\'");
                goto label175;
            }
            throw new InvalidOperationException("never reached");
        label175:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS412GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S413");
        }
        
        private void Test_LocateDc_DsrGetDcNameS412GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S413");
        }
        
        private void Test_LocateDc_DsrGetDcNameS412GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S413");
        }
        #endregion
        
        #region Test Starting in S414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS414() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS414");
            this.Manager.Comment("reaching state \'S414\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp885;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp885);
            this.Manager.AddReturn(GetPlatformInfo, null, temp885);
            this.Manager.Comment("reaching state \'S415\'");
            int temp889 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS414GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS414GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS414GetPlatformChecker2)));
            if ((temp889 == 0)) {
                this.Manager.Comment("reaching state \'S1299\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp886;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,256)\'");
                temp886 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 256u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2316\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp886, "return of DsrGetDcNameEx2, state S2316");
                this.Manager.Comment("reaching state \'S3232\'");
                goto label176;
            }
            if ((temp889 == 1)) {
                this.Manager.Comment("reaching state \'S1300\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp887;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp887 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2317\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp887, "return of DsrGetDcNameEx2, state S2317");
                this.Manager.Comment("reaching state \'S3233\'");
                goto label176;
            }
            if ((temp889 == 2)) {
                this.Manager.Comment("reaching state \'S1301\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp888;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp888 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2318\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp888, "return of DsrGetDcNameEx2, state S2318");
                this.Manager.Comment("reaching state \'S3234\'");
                goto label176;
            }
            throw new InvalidOperationException("never reached");
        label176:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS414GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S415");
        }
        
        private void Test_LocateDc_DsrGetDcNameS414GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S415");
        }
        
        private void Test_LocateDc_DsrGetDcNameS414GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S415");
        }
        #endregion
        
        #region Test Starting in S416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS416() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS416");
            this.Manager.Comment("reaching state \'S416\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp890;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp890);
            this.Manager.AddReturn(GetPlatformInfo, null, temp890);
            this.Manager.Comment("reaching state \'S417\'");
            int temp894 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS416GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS416GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS416GetPlatformChecker2)));
            if ((temp894 == 0)) {
                this.Manager.Comment("reaching state \'S1302\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp891;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,512)\'");
                temp891 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 512u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2319\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp891, "return of DsrGetDcNameEx2, state S2319");
                this.Manager.Comment("reaching state \'S3235\'");
                goto label177;
            }
            if ((temp894 == 1)) {
                this.Manager.Comment("reaching state \'S1303\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp892;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp892 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2320\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp892, "return of DsrGetDcNameEx2, state S2320");
                this.Manager.Comment("reaching state \'S3236\'");
                goto label177;
            }
            if ((temp894 == 2)) {
                this.Manager.Comment("reaching state \'S1304\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp893;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp893 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2321\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp893, "return of DsrGetDcNameEx2, state S2321");
                this.Manager.Comment("reaching state \'S3237\'");
                goto label177;
            }
            throw new InvalidOperationException("never reached");
        label177:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS416GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S417");
        }
        
        private void Test_LocateDc_DsrGetDcNameS416GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S417");
        }
        
        private void Test_LocateDc_DsrGetDcNameS416GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S417");
        }
        #endregion
        
        #region Test Starting in S418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS418() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS418");
            this.Manager.Comment("reaching state \'S418\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp895;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp895);
            this.Manager.AddReturn(GetPlatformInfo, null, temp895);
            this.Manager.Comment("reaching state \'S419\'");
            int temp899 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS418GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS418GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS418GetPlatformChecker2)));
            if ((temp899 == 0)) {
                this.Manager.Comment("reaching state \'S1305\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp896;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2048)\'");
                temp896 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2048u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2322\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp896, "return of DsrGetDcNameEx2, state S2322");
                this.Manager.Comment("reaching state \'S3238\'");
                goto label178;
            }
            if ((temp899 == 1)) {
                this.Manager.Comment("reaching state \'S1306\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp897;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp897 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2323\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp897, "return of DsrGetDcNameEx2, state S2323");
                this.Manager.Comment("reaching state \'S3239\'");
                goto label178;
            }
            if ((temp899 == 2)) {
                this.Manager.Comment("reaching state \'S1307\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp898;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp898 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2324\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp898, "return of DsrGetDcNameEx2, state S2324");
                this.Manager.Comment("reaching state \'S3240\'");
                goto label178;
            }
            throw new InvalidOperationException("never reached");
        label178:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS418GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S419");
        }
        
        private void Test_LocateDc_DsrGetDcNameS418GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S419");
        }
        
        private void Test_LocateDc_DsrGetDcNameS418GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S419");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS42() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS42");
            this.Manager.Comment("reaching state \'S42\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp900;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp900);
            this.Manager.AddReturn(GetPlatformInfo, null, temp900);
            this.Manager.Comment("reaching state \'S43\'");
            int temp904 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS42GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS42GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS42GetPlatformChecker2)));
            if ((temp904 == 0)) {
                this.Manager.Comment("reaching state \'S741\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp901;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(NonDcServer,Null,0,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp901 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1758\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp901, "return of DsrGetDcNameEx2, state S1758");
                this.Manager.Comment("reaching state \'S2775\'");
                goto label179;
            }
            if ((temp904 == 1)) {
                this.Manager.Comment("reaching state \'S742\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp902;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(NonDcServer,Null,0,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp902 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1759\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp902, "return of DsrGetDcNameEx2, state S1759");
                this.Manager.Comment("reaching state \'S2776\'");
                goto label179;
            }
            if ((temp904 == 2)) {
                this.Manager.Comment("reaching state \'S743\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp903;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp903 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1760\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp903, "return of DsrGetDcNameEx2, state S1760");
                this.Manager.Comment("reaching state \'S2777\'");
                goto label179;
            }
            throw new InvalidOperationException("never reached");
        label179:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS42GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_LocateDc_DsrGetDcNameS42GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_LocateDc_DsrGetDcNameS42GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        #endregion
        
        #region Test Starting in S420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS420() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS420");
            this.Manager.Comment("reaching state \'S420\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp905;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp905);
            this.Manager.AddReturn(GetPlatformInfo, null, temp905);
            this.Manager.Comment("reaching state \'S421\'");
            int temp909 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS420GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS420GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS420GetPlatformChecker2)));
            if ((temp909 == 0)) {
                this.Manager.Comment("reaching state \'S1308\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp906;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,4096)\'");
                temp906 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 4096u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2325\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp906, "return of DsrGetDcNameEx2, state S2325");
                this.Manager.Comment("reaching state \'S3241\'");
                goto label180;
            }
            if ((temp909 == 1)) {
                this.Manager.Comment("reaching state \'S1309\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp907;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp907 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2326\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp907, "return of DsrGetDcNameEx2, state S2326");
                this.Manager.Comment("reaching state \'S3242\'");
                goto label180;
            }
            if ((temp909 == 2)) {
                this.Manager.Comment("reaching state \'S1310\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp908;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp908 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2327\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp908, "return of DsrGetDcNameEx2, state S2327");
                this.Manager.Comment("reaching state \'S3243\'");
                goto label180;
            }
            throw new InvalidOperationException("never reached");
        label180:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS420GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S421");
        }
        
        private void Test_LocateDc_DsrGetDcNameS420GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S421");
        }
        
        private void Test_LocateDc_DsrGetDcNameS420GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S421");
        }
        #endregion
        
        #region Test Starting in S422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS422() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS422");
            this.Manager.Comment("reaching state \'S422\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp910;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp910);
            this.Manager.AddReturn(GetPlatformInfo, null, temp910);
            this.Manager.Comment("reaching state \'S423\'");
            int temp914 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS422GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS422GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS422GetPlatformChecker2)));
            if ((temp914 == 0)) {
                this.Manager.Comment("reaching state \'S1311\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp911;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,524288)\'");
                temp911 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 524288u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2328\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp911, "return of DsrGetDcNameEx2, state S2328");
                this.Manager.Comment("reaching state \'S3244\'");
                goto label181;
            }
            if ((temp914 == 1)) {
                this.Manager.Comment("reaching state \'S1312\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp912;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp912 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2329\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp912, "return of DsrGetDcNameEx2, state S2329");
                this.Manager.Comment("reaching state \'S3245\'");
                goto label181;
            }
            if ((temp914 == 2)) {
                this.Manager.Comment("reaching state \'S1313\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp913;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp913 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2330\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp913, "return of DsrGetDcNameEx2, state S2330");
                this.Manager.Comment("reaching state \'S3246\'");
                goto label181;
            }
            throw new InvalidOperationException("never reached");
        label181:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS422GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S423");
        }
        
        private void Test_LocateDc_DsrGetDcNameS422GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S423");
        }
        
        private void Test_LocateDc_DsrGetDcNameS422GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S423");
        }
        #endregion
        
        #region Test Starting in S424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS424() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS424");
            this.Manager.Comment("reaching state \'S424\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp915;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp915);
            this.Manager.AddReturn(GetPlatformInfo, null, temp915);
            this.Manager.Comment("reaching state \'S425\'");
            int temp919 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS424GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS424GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS424GetPlatformChecker2)));
            if ((temp919 == 0)) {
                this.Manager.Comment("reaching state \'S1314\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp916;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1048576)\'");
                temp916 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1048576u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2331\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp916, "return of DsrGetDcNameEx2, state S2331");
                this.Manager.Comment("reaching state \'S3247\'");
                goto label182;
            }
            if ((temp919 == 1)) {
                this.Manager.Comment("reaching state \'S1315\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp917;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp917 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2332\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp917, "return of DsrGetDcNameEx2, state S2332");
                this.Manager.Comment("reaching state \'S3248\'");
                goto label182;
            }
            if ((temp919 == 2)) {
                this.Manager.Comment("reaching state \'S1316\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp918;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp918 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2333\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp918, "return of DsrGetDcNameEx2, state S2333");
                this.Manager.Comment("reaching state \'S3249\'");
                goto label182;
            }
            throw new InvalidOperationException("never reached");
        label182:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS424GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S425");
        }
        
        private void Test_LocateDc_DsrGetDcNameS424GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S425");
        }
        
        private void Test_LocateDc_DsrGetDcNameS424GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S425");
        }
        #endregion
        
        #region Test Starting in S426
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS426() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS426");
            this.Manager.Comment("reaching state \'S426\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp920;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp920);
            this.Manager.AddReturn(GetPlatformInfo, null, temp920);
            this.Manager.Comment("reaching state \'S427\'");
            int temp924 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS426GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS426GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS426GetPlatformChecker2)));
            if ((temp924 == 0)) {
                this.Manager.Comment("reaching state \'S1317\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp921;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,8192)\'");
                temp921 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 8192u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2334\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp921, "return of DsrGetDcNameEx2, state S2334");
                this.Manager.Comment("reaching state \'S3250\'");
                goto label183;
            }
            if ((temp924 == 1)) {
                this.Manager.Comment("reaching state \'S1318\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp922;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp922 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2335\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp922, "return of DsrGetDcNameEx2, state S2335");
                this.Manager.Comment("reaching state \'S3251\'");
                goto label183;
            }
            if ((temp924 == 2)) {
                this.Manager.Comment("reaching state \'S1319\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp923;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp923 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2336\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp923, "return of DsrGetDcNameEx2, state S2336");
                this.Manager.Comment("reaching state \'S3252\'");
                goto label183;
            }
            throw new InvalidOperationException("never reached");
        label183:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS426GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S427");
        }
        
        private void Test_LocateDc_DsrGetDcNameS426GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S427");
        }
        
        private void Test_LocateDc_DsrGetDcNameS426GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S427");
        }
        #endregion
        
        #region Test Starting in S428
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS428() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS428");
            this.Manager.Comment("reaching state \'S428\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp925;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp925);
            this.Manager.AddReturn(GetPlatformInfo, null, temp925);
            this.Manager.Comment("reaching state \'S429\'");
            int temp929 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS428GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS428GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS428GetPlatformChecker2)));
            if ((temp929 == 0)) {
                this.Manager.Comment("reaching state \'S1320\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp926;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32768)\'");
                temp926 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32768u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2337\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp926, "return of DsrGetDcNameEx2, state S2337");
                this.Manager.Comment("reaching state \'S3253\'");
                goto label184;
            }
            if ((temp929 == 1)) {
                this.Manager.Comment("reaching state \'S1321\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp927;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp927 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2338\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp927, "return of DsrGetDcNameEx2, state S2338");
                this.Manager.Comment("reaching state \'S3254\'");
                goto label184;
            }
            if ((temp929 == 2)) {
                this.Manager.Comment("reaching state \'S1322\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp928;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp928 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2339\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp928, "return of DsrGetDcNameEx2, state S2339");
                this.Manager.Comment("reaching state \'S3255\'");
                goto label184;
            }
            throw new InvalidOperationException("never reached");
        label184:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS428GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S429");
        }
        
        private void Test_LocateDc_DsrGetDcNameS428GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S429");
        }
        
        private void Test_LocateDc_DsrGetDcNameS428GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S429");
        }
        #endregion
        
        #region Test Starting in S430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS430() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS430");
            this.Manager.Comment("reaching state \'S430\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp930;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp930);
            this.Manager.AddReturn(GetPlatformInfo, null, temp930);
            this.Manager.Comment("reaching state \'S431\'");
            int temp934 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS430GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS430GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS430GetPlatformChecker2)));
            if ((temp934 == 0)) {
                this.Manager.Comment("reaching state \'S1323\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp931;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1073741824)\'");
                temp931 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1073741824u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2340\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp931, "return of DsrGetDcNameEx2, state S2340");
                this.Manager.Comment("reaching state \'S3256\'");
                goto label185;
            }
            if ((temp934 == 1)) {
                this.Manager.Comment("reaching state \'S1324\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp932;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp932 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2341\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp932, "return of DsrGetDcNameEx2, state S2341");
                this.Manager.Comment("reaching state \'S3257\'");
                goto label185;
            }
            if ((temp934 == 2)) {
                this.Manager.Comment("reaching state \'S1325\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp933;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp933 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2342\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp933, "return of DsrGetDcNameEx2, state S2342");
                this.Manager.Comment("reaching state \'S3258\'");
                goto label185;
            }
            throw new InvalidOperationException("never reached");
        label185:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS430GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S431");
        }
        
        private void Test_LocateDc_DsrGetDcNameS430GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S431");
        }
        
        private void Test_LocateDc_DsrGetDcNameS430GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S431");
        }
        #endregion
        
        #region Test Starting in S432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS432() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS432");
            this.Manager.Comment("reaching state \'S432\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp935;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp935);
            this.Manager.AddReturn(GetPlatformInfo, null, temp935);
            this.Manager.Comment("reaching state \'S433\'");
            int temp939 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS432GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS432GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS432GetPlatformChecker2)));
            if ((temp939 == 0)) {
                this.Manager.Comment("reaching state \'S1326\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp936;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2147483648)\'");
                temp936 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2147483648u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2343\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp936, "return of DsrGetDcNameEx2, state S2343");
                this.Manager.Comment("reaching state \'S3259\'");
                goto label186;
            }
            if ((temp939 == 1)) {
                this.Manager.Comment("reaching state \'S1327\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp937;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp937 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2344\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp937, "return of DsrGetDcNameEx2, state S2344");
                this.Manager.Comment("reaching state \'S3260\'");
                goto label186;
            }
            if ((temp939 == 2)) {
                this.Manager.Comment("reaching state \'S1328\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp938;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp938 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2345\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp938, "return of DsrGetDcNameEx2, state S2345");
                this.Manager.Comment("reaching state \'S3261\'");
                goto label186;
            }
            throw new InvalidOperationException("never reached");
        label186:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS432GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S433");
        }
        
        private void Test_LocateDc_DsrGetDcNameS432GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S433");
        }
        
        private void Test_LocateDc_DsrGetDcNameS432GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S433");
        }
        #endregion
        
        #region Test Starting in S434
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS434() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS434");
            this.Manager.Comment("reaching state \'S434\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp940;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp940);
            this.Manager.AddReturn(GetPlatformInfo, null, temp940);
            this.Manager.Comment("reaching state \'S435\'");
            int temp944 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS434GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS434GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS434GetPlatformChecker2)));
            if ((temp944 == 0)) {
                this.Manager.Comment("reaching state \'S1329\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp941;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,196608)\'");
                temp941 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104881");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2346\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp941, "return of DsrGetDcNameEx2, state S2346");
                this.Manager.Comment("reaching state \'S3262\'");
                goto label187;
            }
            if ((temp944 == 1)) {
                this.Manager.Comment("reaching state \'S1330\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp942;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp942 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2347\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp942, "return of DsrGetDcNameEx2, state S2347");
                this.Manager.Comment("reaching state \'S3263\'");
                goto label187;
            }
            if ((temp944 == 2)) {
                this.Manager.Comment("reaching state \'S1331\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp943;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp943 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2348\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp943, "return of DsrGetDcNameEx2, state S2348");
                this.Manager.Comment("reaching state \'S3264\'");
                goto label187;
            }
            throw new InvalidOperationException("never reached");
        label187:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS434GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S435");
        }
        
        private void Test_LocateDc_DsrGetDcNameS434GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S435");
        }
        
        private void Test_LocateDc_DsrGetDcNameS434GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S435");
        }
        #endregion
        
        #region Test Starting in S436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS436() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS436");
            this.Manager.Comment("reaching state \'S436\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp945;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp945);
            this.Manager.AddReturn(GetPlatformInfo, null, temp945);
            this.Manager.Comment("reaching state \'S437\'");
            int temp949 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS436GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS436GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS436GetPlatformChecker2)));
            if ((temp949 == 0)) {
                this.Manager.Comment("reaching state \'S1332\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp946;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,16384)\'");
                temp946 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16384u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2349\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp946, "return of DsrGetDcNameEx2, state S2349");
                this.Manager.Comment("reaching state \'S3265\'");
                goto label188;
            }
            if ((temp949 == 1)) {
                this.Manager.Comment("reaching state \'S1333\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp947;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp947 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2350\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp947, "return of DsrGetDcNameEx2, state S2350");
                this.Manager.Comment("reaching state \'S3266\'");
                goto label188;
            }
            if ((temp949 == 2)) {
                this.Manager.Comment("reaching state \'S1334\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp948;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp948 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2351\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp948, "return of DsrGetDcNameEx2, state S2351");
                this.Manager.Comment("reaching state \'S3267\'");
                goto label188;
            }
            throw new InvalidOperationException("never reached");
        label188:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS436GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S437");
        }
        
        private void Test_LocateDc_DsrGetDcNameS436GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S437");
        }
        
        private void Test_LocateDc_DsrGetDcNameS436GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S437");
        }
        #endregion
        
        #region Test Starting in S438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS438() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS438");
            this.Manager.Comment("reaching state \'S438\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp950;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp950);
            this.Manager.AddReturn(GetPlatformInfo, null, temp950);
            this.Manager.Comment("reaching state \'S439\'");
            int temp954 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS438GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS438GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS438GetPlatformChecker2)));
            if ((temp954 == 0)) {
                this.Manager.Comment("reaching state \'S1335\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp951;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,262144)\'");
                temp951 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 262144u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2352\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp951, "return of DsrGetDcNameEx2, state S2352");
                this.Manager.Comment("reaching state \'S3268\'");
                goto label189;
            }
            if ((temp954 == 1)) {
                this.Manager.Comment("reaching state \'S1336\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp952;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp952 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2353\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp952, "return of DsrGetDcNameEx2, state S2353");
                this.Manager.Comment("reaching state \'S3269\'");
                goto label189;
            }
            if ((temp954 == 2)) {
                this.Manager.Comment("reaching state \'S1337\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp953;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp953 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2354\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp953, "return of DsrGetDcNameEx2, state S2354");
                this.Manager.Comment("reaching state \'S3270\'");
                goto label189;
            }
            throw new InvalidOperationException("never reached");
        label189:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS438GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S439");
        }
        
        private void Test_LocateDc_DsrGetDcNameS438GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S439");
        }
        
        private void Test_LocateDc_DsrGetDcNameS438GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S439");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS44() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS44");
            this.Manager.Comment("reaching state \'S44\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp955;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp955);
            this.Manager.AddReturn(GetPlatformInfo, null, temp955);
            this.Manager.Comment("reaching state \'S45\'");
            int temp959 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS44GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS44GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS44GetPlatformChecker2)));
            if ((temp959 == 0)) {
                this.Manager.Comment("reaching state \'S744\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp956;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",65536)\'");
                temp956 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1761\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp956, "return of DsrGetDcNameEx2, state S1761");
                this.Manager.Comment("reaching state \'S2778\'");
                goto label190;
            }
            if ((temp959 == 1)) {
                this.Manager.Comment("reaching state \'S745\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp957;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,TrustedDomainName,Null,Null" +
                        ",65536)\'");
                temp957 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1762\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp957, "return of DsrGetDcNameEx2, state S1762");
                this.Manager.Comment("reaching state \'S2779\'");
                goto label190;
            }
            if ((temp959 == 2)) {
                this.Manager.Comment("reaching state \'S746\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp958;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp958 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1763\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp958, "return of DsrGetDcNameEx2, state S1763");
                this.Manager.Comment("reaching state \'S2780\'");
                goto label190;
            }
            throw new InvalidOperationException("never reached");
        label190:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS44GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_LocateDc_DsrGetDcNameS44GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_LocateDc_DsrGetDcNameS44GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        #endregion
        
        #region Test Starting in S440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS440() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS440");
            this.Manager.Comment("reaching state \'S440\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp960;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp960);
            this.Manager.AddReturn(GetPlatformInfo, null, temp960);
            this.Manager.Comment("reaching state \'S441\'");
            int temp964 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS440GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS440GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS440GetPlatformChecker2)));
            if ((temp964 == 0)) {
                this.Manager.Comment("reaching state \'S1338\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp961;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,3221225472)\'");
                temp961 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104882");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2355\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp961, "return of DsrGetDcNameEx2, state S2355");
                this.Manager.Comment("reaching state \'S3271\'");
                goto label191;
            }
            if ((temp964 == 1)) {
                this.Manager.Comment("reaching state \'S1339\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp962;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp962 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2356\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp962, "return of DsrGetDcNameEx2, state S2356");
                this.Manager.Comment("reaching state \'S3272\'");
                goto label191;
            }
            if ((temp964 == 2)) {
                this.Manager.Comment("reaching state \'S1340\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp963;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp963 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2357\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp963, "return of DsrGetDcNameEx2, state S2357");
                this.Manager.Comment("reaching state \'S3273\'");
                goto label191;
            }
            throw new InvalidOperationException("never reached");
        label191:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS440GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S441");
        }
        
        private void Test_LocateDc_DsrGetDcNameS440GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S441");
        }
        
        private void Test_LocateDc_DsrGetDcNameS440GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S441");
        }
        #endregion
        
        #region Test Starting in S442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS442() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS442");
            this.Manager.Comment("reaching state \'S442\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp965;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp965);
            this.Manager.AddReturn(GetPlatformInfo, null, temp965);
            this.Manager.Comment("reaching state \'S443\'");
            int temp969 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS442GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS442GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS442GetPlatformChecker2)));
            if ((temp969 == 0)) {
                this.Manager.Comment("reaching state \'S1341\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp966;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,257)\'");
                temp966 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 257u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2358\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp966, "return of DsrGetDcNameEx2, state S2358");
                this.Manager.Comment("reaching state \'S3274\'");
                goto label192;
            }
            if ((temp969 == 1)) {
                this.Manager.Comment("reaching state \'S1342\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp967;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp967 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2359\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp967, "return of DsrGetDcNameEx2, state S2359");
                this.Manager.Comment("reaching state \'S3275\'");
                goto label192;
            }
            if ((temp969 == 2)) {
                this.Manager.Comment("reaching state \'S1343\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp968;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp968 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2360\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp968, "return of DsrGetDcNameEx2, state S2360");
                this.Manager.Comment("reaching state \'S3276\'");
                goto label192;
            }
            throw new InvalidOperationException("never reached");
        label192:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS442GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S443");
        }
        
        private void Test_LocateDc_DsrGetDcNameS442GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S443");
        }
        
        private void Test_LocateDc_DsrGetDcNameS442GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S443");
        }
        #endregion
        
        #region Test Starting in S444
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS444() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS444");
            this.Manager.Comment("reaching state \'S444\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp970;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp970);
            this.Manager.AddReturn(GetPlatformInfo, null, temp970);
            this.Manager.Comment("reaching state \'S445\'");
            int temp974 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS444GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS444GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS444GetPlatformChecker2)));
            if ((temp974 == 0)) {
                this.Manager.Comment("reaching state \'S1344\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp971;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,128)\'");
                temp971 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 128u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2361\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp971, "return of DsrGetDcNameEx2, state S2361");
                this.Manager.Comment("reaching state \'S3277\'");
                goto label193;
            }
            if ((temp974 == 1)) {
                this.Manager.Comment("reaching state \'S1345\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp972;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp972 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2362\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp972, "return of DsrGetDcNameEx2, state S2362");
                this.Manager.Comment("reaching state \'S3278\'");
                goto label193;
            }
            if ((temp974 == 2)) {
                this.Manager.Comment("reaching state \'S1346\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp973;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp973 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2363\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp973, "return of DsrGetDcNameEx2, state S2363");
                this.Manager.Comment("reaching state \'S3279\'");
                goto label193;
            }
            throw new InvalidOperationException("never reached");
        label193:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS444GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S445");
        }
        
        private void Test_LocateDc_DsrGetDcNameS444GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S445");
        }
        
        private void Test_LocateDc_DsrGetDcNameS444GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S445");
        }
        #endregion
        
        #region Test Starting in S446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS446() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS446");
            this.Manager.Comment("reaching state \'S446\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp975;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp975);
            this.Manager.AddReturn(GetPlatformInfo, null, temp975);
            this.Manager.Comment("reaching state \'S447\'");
            int temp979 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS446GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS446GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS446GetPlatformChecker2)));
            if ((temp979 == 0)) {
                this.Manager.Comment("reaching state \'S1347\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp976;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2)\'");
                temp976 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2u);
                this.Manager.Checkpoint("MS-NRPC_R2080");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2364\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp976, "return of DsrGetDcNameEx2, state S2364");
                this.Manager.Comment("reaching state \'S3280\'");
                goto label194;
            }
            if ((temp979 == 1)) {
                this.Manager.Comment("reaching state \'S1348\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp977;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp977 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2365\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp977, "return of DsrGetDcNameEx2, state S2365");
                this.Manager.Comment("reaching state \'S3281\'");
                goto label194;
            }
            if ((temp979 == 2)) {
                this.Manager.Comment("reaching state \'S1349\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp978;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp978 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2366\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp978, "return of DsrGetDcNameEx2, state S2366");
                this.Manager.Comment("reaching state \'S3282\'");
                goto label194;
            }
            throw new InvalidOperationException("never reached");
        label194:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS446GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S447");
        }
        
        private void Test_LocateDc_DsrGetDcNameS446GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S447");
        }
        
        private void Test_LocateDc_DsrGetDcNameS446GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S447");
        }
        #endregion
        
        #region Test Starting in S448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS448() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS448");
            this.Manager.Comment("reaching state \'S448\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp980;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp980);
            this.Manager.AddReturn(GetPlatformInfo, null, temp980);
            this.Manager.Comment("reaching state \'S449\'");
            int temp984 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS448GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS448GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS448GetPlatformChecker2)));
            if ((temp984 == 0)) {
                this.Manager.Comment("reaching state \'S1350\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp981;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,192)\'");
                temp981 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104879");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2367\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp981, "return of DsrGetDcNameEx2, state S2367");
                this.Manager.Comment("reaching state \'S3283\'");
                goto label195;
            }
            if ((temp984 == 1)) {
                this.Manager.Comment("reaching state \'S1351\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp982;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp982 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2368\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp982, "return of DsrGetDcNameEx2, state S2368");
                this.Manager.Comment("reaching state \'S3284\'");
                goto label195;
            }
            if ((temp984 == 2)) {
                this.Manager.Comment("reaching state \'S1352\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp983;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp983 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2369\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp983, "return of DsrGetDcNameEx2, state S2369");
                this.Manager.Comment("reaching state \'S3285\'");
                goto label195;
            }
            throw new InvalidOperationException("never reached");
        label195:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS448GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S449");
        }
        
        private void Test_LocateDc_DsrGetDcNameS448GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S449");
        }
        
        private void Test_LocateDc_DsrGetDcNameS448GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S449");
        }
        #endregion
        
        #region Test Starting in S450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS450() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS450");
            this.Manager.Comment("reaching state \'S450\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp985;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp985);
            this.Manager.AddReturn(GetPlatformInfo, null, temp985);
            this.Manager.Comment("reaching state \'S451\'");
            int temp989 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS450GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS450GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS450GetPlatformChecker2)));
            if ((temp989 == 0)) {
                this.Manager.Comment("reaching state \'S1353\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp986;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32832)\'");
                temp986 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32832u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2370\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp986, "return of DsrGetDcNameEx2, state S2370");
                this.Manager.Comment("reaching state \'S3286\'");
                goto label196;
            }
            if ((temp989 == 1)) {
                this.Manager.Comment("reaching state \'S1354\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp987;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp987 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2371\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp987, "return of DsrGetDcNameEx2, state S2371");
                this.Manager.Comment("reaching state \'S3287\'");
                goto label196;
            }
            if ((temp989 == 2)) {
                this.Manager.Comment("reaching state \'S1355\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp988;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp988 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2372\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp988, "return of DsrGetDcNameEx2, state S2372");
                this.Manager.Comment("reaching state \'S3288\'");
                goto label196;
            }
            throw new InvalidOperationException("never reached");
        label196:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS450GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S451");
        }
        
        private void Test_LocateDc_DsrGetDcNameS450GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S451");
        }
        
        private void Test_LocateDc_DsrGetDcNameS450GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S451");
        }
        #endregion
        
        #region Test Starting in S452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS452() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS452");
            this.Manager.Comment("reaching state \'S452\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp990;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp990);
            this.Manager.AddReturn(GetPlatformInfo, null, temp990);
            this.Manager.Comment("reaching state \'S453\'");
            int temp994 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS452GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS452GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS452GetPlatformChecker2)));
            if ((temp994 == 0)) {
                this.Manager.Comment("reaching state \'S1356\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp991;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,131072)\'");
                temp991 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2373\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp991, "return of DsrGetDcNameEx2, state S2373");
                this.Manager.Comment("reaching state \'S3289\'");
                goto label197;
            }
            if ((temp994 == 1)) {
                this.Manager.Comment("reaching state \'S1357\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp992;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp992 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2374\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp992, "return of DsrGetDcNameEx2, state S2374");
                this.Manager.Comment("reaching state \'S3290\'");
                goto label197;
            }
            if ((temp994 == 2)) {
                this.Manager.Comment("reaching state \'S1358\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp993;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp993 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2375\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp993, "return of DsrGetDcNameEx2, state S2375");
                this.Manager.Comment("reaching state \'S3291\'");
                goto label197;
            }
            throw new InvalidOperationException("never reached");
        label197:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS452GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S453");
        }
        
        private void Test_LocateDc_DsrGetDcNameS452GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S453");
        }
        
        private void Test_LocateDc_DsrGetDcNameS452GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S453");
        }
        #endregion
        
        #region Test Starting in S454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS454() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS454");
            this.Manager.Comment("reaching state \'S454\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp995;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp995);
            this.Manager.AddReturn(GetPlatformInfo, null, temp995);
            this.Manager.Comment("reaching state \'S455\'");
            int temp999 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS454GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS454GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS454GetPlatformChecker2)));
            if ((temp999 == 0)) {
                this.Manager.Comment("reaching state \'S1359\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp996;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,131072)\'");
                temp996 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2376\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp996, "return of DsrGetDcNameEx2, state S2376");
                this.Manager.Comment("reaching state \'S3292\'");
                goto label198;
            }
            if ((temp999 == 1)) {
                this.Manager.Comment("reaching state \'S1360\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp997;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp997 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2377\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp997, "return of DsrGetDcNameEx2, state S2377");
                this.Manager.Comment("reaching state \'S3293\'");
                goto label198;
            }
            if ((temp999 == 2)) {
                this.Manager.Comment("reaching state \'S1361\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp998;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp998 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2378\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp998, "return of DsrGetDcNameEx2, state S2378");
                this.Manager.Comment("reaching state \'S3294\'");
                goto label198;
            }
            throw new InvalidOperationException("never reached");
        label198:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS454GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S455");
        }
        
        private void Test_LocateDc_DsrGetDcNameS454GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S455");
        }
        
        private void Test_LocateDc_DsrGetDcNameS454GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S455");
        }
        #endregion
        
        #region Test Starting in S456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS456() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS456");
            this.Manager.Comment("reaching state \'S456\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1000;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1000);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1000);
            this.Manager.Comment("reaching state \'S457\'");
            int temp1004 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS456GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS456GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS456GetPlatformChecker2)));
            if ((temp1004 == 0)) {
                this.Manager.Comment("reaching state \'S1362\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1001;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Null,Null" +
                        ",131072)\'");
                temp1001 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2379\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1001, "return of DsrGetDcNameEx2, state S2379");
                this.Manager.Comment("reaching state \'S3295\'");
                goto label199;
            }
            if ((temp1004 == 1)) {
                this.Manager.Comment("reaching state \'S1363\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1002;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1002 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2380\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1002, "return of DsrGetDcNameEx2, state S2380");
                this.Manager.Comment("reaching state \'S3296\'");
                goto label199;
            }
            if ((temp1004 == 2)) {
                this.Manager.Comment("reaching state \'S1364\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1003;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1003 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2381\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1003, "return of DsrGetDcNameEx2, state S2381");
                this.Manager.Comment("reaching state \'S3297\'");
                goto label199;
            }
            throw new InvalidOperationException("never reached");
        label199:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS456GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S457");
        }
        
        private void Test_LocateDc_DsrGetDcNameS456GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S457");
        }
        
        private void Test_LocateDc_DsrGetDcNameS456GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S457");
        }
        #endregion
        
        #region Test Starting in S458
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS458() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS458");
            this.Manager.Comment("reaching state \'S458\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1005;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1005);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1005);
            this.Manager.Comment("reaching state \'S459\'");
            int temp1009 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS458GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS458GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS458GetPlatformChecker2)));
            if ((temp1009 == 0)) {
                this.Manager.Comment("reaching state \'S1365\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1006;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,131072)\'");
                temp1006 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R104885");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S2382\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1006, "return of DsrGetDcNameEx2, state S2382");
                this.Manager.Comment("reaching state \'S3298\'");
                goto label200;
            }
            if ((temp1009 == 1)) {
                this.Manager.Comment("reaching state \'S1366\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1007;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1007 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2383\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1007, "return of DsrGetDcNameEx2, state S2383");
                this.Manager.Comment("reaching state \'S3299\'");
                goto label200;
            }
            if ((temp1009 == 2)) {
                this.Manager.Comment("reaching state \'S1367\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1008;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1008 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2384\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1008, "return of DsrGetDcNameEx2, state S2384");
                this.Manager.Comment("reaching state \'S3300\'");
                goto label200;
            }
            throw new InvalidOperationException("never reached");
        label200:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS458GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S459");
        }
        
        private void Test_LocateDc_DsrGetDcNameS458GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S459");
        }
        
        private void Test_LocateDc_DsrGetDcNameS458GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S459");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS46() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS46");
            this.Manager.Comment("reaching state \'S46\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1010;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1010);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1010);
            this.Manager.Comment("reaching state \'S47\'");
            int temp1014 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS46GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS46GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS46GetPlatformChecker2)));
            if ((temp1014 == 0)) {
                this.Manager.Comment("reaching state \'S747\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1011;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,64)\'");
                temp1011 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1764\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1011, "return of DsrGetDcNameEx2, state S1764");
                this.Manager.Comment("reaching state \'S2781\'");
                goto label201;
            }
            if ((temp1014 == 1)) {
                this.Manager.Comment("reaching state \'S748\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1012;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,64)\'");
                temp1012 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1765\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1012, "return of DsrGetDcNameEx2, state S1765");
                this.Manager.Comment("reaching state \'S2782\'");
                goto label201;
            }
            if ((temp1014 == 2)) {
                this.Manager.Comment("reaching state \'S749\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1013;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1013 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1766\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1013, "return of DsrGetDcNameEx2, state S1766");
                this.Manager.Comment("reaching state \'S2783\'");
                goto label201;
            }
            throw new InvalidOperationException("never reached");
        label201:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS46GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_LocateDc_DsrGetDcNameS46GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_LocateDc_DsrGetDcNameS46GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        #endregion
        
        #region Test Starting in S460
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS460() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS460");
            this.Manager.Comment("reaching state \'S460\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1015;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1015);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1015);
            this.Manager.Comment("reaching state \'S461\'");
            int temp1019 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS460GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS460GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS460GetPlatformChecker2)));
            if ((temp1019 == 0)) {
                this.Manager.Comment("reaching state \'S1368\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1016;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,131072)\'");
                temp1016 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2385\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1016, "return of DsrGetDcNameEx2, state S2385");
                this.Manager.Comment("reaching state \'S3301\'");
                goto label202;
            }
            if ((temp1019 == 1)) {
                this.Manager.Comment("reaching state \'S1369\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1017;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1017 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2386\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1017, "return of DsrGetDcNameEx2, state S2386");
                this.Manager.Comment("reaching state \'S3302\'");
                goto label202;
            }
            if ((temp1019 == 2)) {
                this.Manager.Comment("reaching state \'S1370\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1018;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1018 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2387\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1018, "return of DsrGetDcNameEx2, state S2387");
                this.Manager.Comment("reaching state \'S3303\'");
                goto label202;
            }
            throw new InvalidOperationException("never reached");
        label202:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS460GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S461");
        }
        
        private void Test_LocateDc_DsrGetDcNameS460GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S461");
        }
        
        private void Test_LocateDc_DsrGetDcNameS460GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S461");
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS462() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS462");
            this.Manager.Comment("reaching state \'S462\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1020;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1020);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1020);
            this.Manager.Comment("reaching state \'S463\'");
            int temp1024 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS462GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS462GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS462GetPlatformChecker2)));
            if ((temp1024 == 0)) {
                this.Manager.Comment("reaching state \'S1371\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1021;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,NormalDomainUserAccount,512,FqdnFo" +
                        "rmatDomainName,Null,Null,0)\'");
                temp1021 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.NormalDomainUserAccount, 512u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2388\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1021, "return of DsrGetDcNameEx2, state S2388");
                this.Manager.Comment("reaching state \'S3304\'");
                goto label203;
            }
            if ((temp1024 == 1)) {
                this.Manager.Comment("reaching state \'S1372\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1022;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1022 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2389\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1022, "return of DsrGetDcNameEx2, state S2389");
                this.Manager.Comment("reaching state \'S3305\'");
                goto label203;
            }
            if ((temp1024 == 2)) {
                this.Manager.Comment("reaching state \'S1373\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1023;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1023 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2390\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1023, "return of DsrGetDcNameEx2, state S2390");
                this.Manager.Comment("reaching state \'S3306\'");
                goto label203;
            }
            throw new InvalidOperationException("never reached");
        label203:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS462GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S463");
        }
        
        private void Test_LocateDc_DsrGetDcNameS462GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S463");
        }
        
        private void Test_LocateDc_DsrGetDcNameS462GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S463");
        }
        #endregion
        
        #region Test Starting in S464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS464() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS464");
            this.Manager.Comment("reaching state \'S464\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1025;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1025);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1025);
            this.Manager.Comment("reaching state \'S465\'");
            int temp1029 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS464GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS464GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS464GetPlatformChecker2)));
            if ((temp1029 == 0)) {
                this.Manager.Comment("reaching state \'S1374\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1026;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,DomainMemberComputerAccount,4096,F" +
                        "qdnFormatDomainName,Null,Null,0)\'");
                temp1026 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.DomainMemberComputerAccount, 4096u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2391\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1026, "return of DsrGetDcNameEx2, state S2391");
                this.Manager.Comment("reaching state \'S3307\'");
                goto label204;
            }
            if ((temp1029 == 1)) {
                this.Manager.Comment("reaching state \'S1375\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1027;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1027 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2392\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1027, "return of DsrGetDcNameEx2, state S2392");
                this.Manager.Comment("reaching state \'S3308\'");
                goto label204;
            }
            if ((temp1029 == 2)) {
                this.Manager.Comment("reaching state \'S1376\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1028;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1028 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2393\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1028, "return of DsrGetDcNameEx2, state S2393");
                this.Manager.Comment("reaching state \'S3309\'");
                goto label204;
            }
            throw new InvalidOperationException("never reached");
        label204:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS464GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S465");
        }
        
        private void Test_LocateDc_DsrGetDcNameS464GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S465");
        }
        
        private void Test_LocateDc_DsrGetDcNameS464GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S465");
        }
        #endregion
        
        #region Test Starting in S466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS466() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS466");
            this.Manager.Comment("reaching state \'S466\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1030;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1030);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1030);
            this.Manager.Comment("reaching state \'S467\'");
            int temp1035 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS466GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS466GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS466GetPlatformChecker2)));
            if ((temp1035 == 0)) {
                this.Manager.Comment("reaching state \'S1377\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1031;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,2147483648,FqdnFormatDomainNa" +
                        "me,Null,Null,0)\'");
                temp1031 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 2147483648u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2394\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1031, "return of DsrGetDcNameEx2, state S2394");
                this.Manager.Comment("reaching state \'S3310\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1032;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,0)\'");
                temp1032 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Checkpoint("MS-NRPC_R103114");
                this.Manager.Comment("reaching state \'S3581\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1032, "return of DsrGetDcNameEx2, state S3581");
                this.Manager.Comment("reaching state \'S3587\'");
                goto label205;
            }
            if ((temp1035 == 1)) {
                this.Manager.Comment("reaching state \'S1378\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1033;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1033 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2395\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1033, "return of DsrGetDcNameEx2, state S2395");
                this.Manager.Comment("reaching state \'S3311\'");
                goto label205;
            }
            if ((temp1035 == 2)) {
                this.Manager.Comment("reaching state \'S1379\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1034;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1034 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2396\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1034, "return of DsrGetDcNameEx2, state S2396");
                this.Manager.Comment("reaching state \'S3312\'");
                goto label205;
            }
            throw new InvalidOperationException("never reached");
        label205:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS466GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S467");
        }
        
        private void Test_LocateDc_DsrGetDcNameS466GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S467");
        }
        
        private void Test_LocateDc_DsrGetDcNameS466GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S467");
        }
        #endregion
        
        #region Test Starting in S468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS468() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS468");
            this.Manager.Comment("reaching state \'S468\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1036;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1036);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1036);
            this.Manager.Comment("reaching state \'S469\'");
            int temp1040 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS468GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS468GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS468GetPlatformChecker2)));
            if ((temp1040 == 0)) {
                this.Manager.Comment("reaching state \'S1380\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1037;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(NonDcServer,FqdnFormatDomainName,PrimaryDomai" +
                        "nGuid,Null,0)\'");
                temp1037 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2397\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1037, "return of DsrGetDcNameEx, state S2397");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label206;
            }
            if ((temp1040 == 1)) {
                this.Manager.Comment("reaching state \'S1381\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1038;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1038 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2398\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1038, "return of DsrGetDcNameEx2, state S2398");
                this.Manager.Comment("reaching state \'S3314\'");
                goto label206;
            }
            if ((temp1040 == 2)) {
                this.Manager.Comment("reaching state \'S1382\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1039;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1039 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2399\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1039, "return of DsrGetDcNameEx2, state S2399");
                this.Manager.Comment("reaching state \'S3315\'");
                goto label206;
            }
            throw new InvalidOperationException("never reached");
        label206:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS468GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S469");
        }
        
        private void Test_LocateDc_DsrGetDcNameS3313() {
            this.Manager.Comment("reaching state \'S3313\'");
        }
        
        private void Test_LocateDc_DsrGetDcNameS468GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S469");
        }
        
        private void Test_LocateDc_DsrGetDcNameS468GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S469");
        }
        #endregion
        
        #region Test Starting in S470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS470() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS470");
            this.Manager.Comment("reaching state \'S470\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1041;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1041);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1041);
            this.Manager.Comment("reaching state \'S471\'");
            int temp1045 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS470GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS470GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS470GetPlatformChecker2)));
            if ((temp1045 == 0)) {
                this.Manager.Comment("reaching state \'S1383\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1042;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,0)\'");
                temp1042 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2400\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1042, "return of DsrGetDcNameEx, state S2400");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label207;
            }
            if ((temp1045 == 1)) {
                this.Manager.Comment("reaching state \'S1384\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1043;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1043 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2401\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1043, "return of DsrGetDcNameEx2, state S2401");
                this.Manager.Comment("reaching state \'S3316\'");
                goto label207;
            }
            if ((temp1045 == 2)) {
                this.Manager.Comment("reaching state \'S1385\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1044;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1044 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2402\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1044, "return of DsrGetDcNameEx2, state S2402");
                this.Manager.Comment("reaching state \'S3317\'");
                goto label207;
            }
            throw new InvalidOperationException("never reached");
        label207:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS470GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S471");
        }
        
        private void Test_LocateDc_DsrGetDcNameS470GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S471");
        }
        
        private void Test_LocateDc_DsrGetDcNameS470GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S471");
        }
        #endregion
        
        #region Test Starting in S472
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS472() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS472");
            this.Manager.Comment("reaching state \'S472\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1046;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1046);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1046);
            this.Manager.Comment("reaching state \'S473\'");
            int temp1050 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS472GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS472GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS472GetPlatformChecker2)));
            if ((temp1050 == 0)) {
                this.Manager.Comment("reaching state \'S1386\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1047;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,64)\'");
                temp1047 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2403\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1047, "return of DsrGetDcNameEx, state S2403");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label208;
            }
            if ((temp1050 == 1)) {
                this.Manager.Comment("reaching state \'S1387\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1048;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1048 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2404\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1048, "return of DsrGetDcNameEx2, state S2404");
                this.Manager.Comment("reaching state \'S3318\'");
                goto label208;
            }
            if ((temp1050 == 2)) {
                this.Manager.Comment("reaching state \'S1388\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1049;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1049 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2405\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1049, "return of DsrGetDcNameEx2, state S2405");
                this.Manager.Comment("reaching state \'S3319\'");
                goto label208;
            }
            throw new InvalidOperationException("never reached");
        label208:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS472GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S473");
        }
        
        private void Test_LocateDc_DsrGetDcNameS472GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S473");
        }
        
        private void Test_LocateDc_DsrGetDcNameS472GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S473");
        }
        #endregion
        
        #region Test Starting in S474
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS474() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS474");
            this.Manager.Comment("reaching state \'S474\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1051;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1051);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1051);
            this.Manager.Comment("reaching state \'S475\'");
            int temp1055 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS474GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS474GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS474GetPlatformChecker2)));
            if ((temp1055 == 0)) {
                this.Manager.Comment("reaching state \'S1389\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1052;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,PrimaryDomainG" +
                        "uid,Null,0)\'");
                temp1052 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2406\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1052, "return of DsrGetDcNameEx, state S2406");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label209;
            }
            if ((temp1055 == 1)) {
                this.Manager.Comment("reaching state \'S1390\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1053;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1053 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2407\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1053, "return of DsrGetDcNameEx2, state S2407");
                this.Manager.Comment("reaching state \'S3320\'");
                goto label209;
            }
            if ((temp1055 == 2)) {
                this.Manager.Comment("reaching state \'S1391\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1054;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1054 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2408\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1054, "return of DsrGetDcNameEx2, state S2408");
                this.Manager.Comment("reaching state \'S3321\'");
                goto label209;
            }
            throw new InvalidOperationException("never reached");
        label209:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS474GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S475");
        }
        
        private void Test_LocateDc_DsrGetDcNameS474GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S475");
        }
        
        private void Test_LocateDc_DsrGetDcNameS474GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S475");
        }
        #endregion
        
        #region Test Starting in S476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS476() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS476");
            this.Manager.Comment("reaching state \'S476\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1056;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1056);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1056);
            this.Manager.Comment("reaching state \'S477\'");
            int temp1060 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS476GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS476GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS476GetPlatformChecker2)));
            if ((temp1060 == 0)) {
                this.Manager.Comment("reaching state \'S1392\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1057;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,SiteNameO" +
                        "ne,0)\'");
                temp1057 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), Microsoft.Protocols.TestSuites.Nrpc.SiteNameType.SiteNameOne, 0u);
                this.Manager.Comment("reaching state \'S2409\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1057, "return of DsrGetDcNameEx, state S2409");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label210;
            }
            if ((temp1060 == 1)) {
                this.Manager.Comment("reaching state \'S1393\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1058;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1058 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2410\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1058, "return of DsrGetDcNameEx2, state S2410");
                this.Manager.Comment("reaching state \'S3322\'");
                goto label210;
            }
            if ((temp1060 == 2)) {
                this.Manager.Comment("reaching state \'S1394\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1059;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1059 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2411\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1059, "return of DsrGetDcNameEx2, state S2411");
                this.Manager.Comment("reaching state \'S3323\'");
                goto label210;
            }
            throw new InvalidOperationException("never reached");
        label210:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS476GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S477");
        }
        
        private void Test_LocateDc_DsrGetDcNameS476GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S477");
        }
        
        private void Test_LocateDc_DsrGetDcNameS476GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S477");
        }
        #endregion
        
        #region Test Starting in S478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS478() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS478");
            this.Manager.Comment("reaching state \'S478\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1061;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1061);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1061);
            this.Manager.Comment("reaching state \'S479\'");
            int temp1065 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS478GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS478GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS478GetPlatformChecker2)));
            if ((temp1065 == 0)) {
                this.Manager.Comment("reaching state \'S1395\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1062;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,InvalidSi" +
                        "teName,0)\'");
                temp1062 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(1)), 0u);
                this.Manager.Comment("reaching state \'S2412\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1062, "return of DsrGetDcNameEx, state S2412");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label211;
            }
            if ((temp1065 == 1)) {
                this.Manager.Comment("reaching state \'S1396\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1063;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1063 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2413\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1063, "return of DsrGetDcNameEx2, state S2413");
                this.Manager.Comment("reaching state \'S3324\'");
                goto label211;
            }
            if ((temp1065 == 2)) {
                this.Manager.Comment("reaching state \'S1397\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1064;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1064 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2414\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1064, "return of DsrGetDcNameEx2, state S2414");
                this.Manager.Comment("reaching state \'S3325\'");
                goto label211;
            }
            throw new InvalidOperationException("never reached");
        label211:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS478GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S479");
        }
        
        private void Test_LocateDc_DsrGetDcNameS478GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S479");
        }
        
        private void Test_LocateDc_DsrGetDcNameS478GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S479");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS48() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS48");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1066;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1066);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1066);
            this.Manager.Comment("reaching state \'S49\'");
            int temp1070 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS48GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS48GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS48GetPlatformChecker2)));
            if ((temp1070 == 0)) {
                this.Manager.Comment("reaching state \'S750\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1067;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,64)\'");
                temp1067 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1767\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1067, "return of DsrGetDcNameEx2, state S1767");
                this.Manager.Comment("reaching state \'S2784\'");
                goto label212;
            }
            if ((temp1070 == 1)) {
                this.Manager.Comment("reaching state \'S751\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1068;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,64)\'");
                temp1068 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1768\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1068, "return of DsrGetDcNameEx2, state S1768");
                this.Manager.Comment("reaching state \'S2785\'");
                goto label212;
            }
            if ((temp1070 == 2)) {
                this.Manager.Comment("reaching state \'S752\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1069;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1069 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1769\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1069, "return of DsrGetDcNameEx2, state S1769");
                this.Manager.Comment("reaching state \'S2786\'");
                goto label212;
            }
            throw new InvalidOperationException("never reached");
        label212:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS48GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_LocateDc_DsrGetDcNameS48GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_LocateDc_DsrGetDcNameS48GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        #endregion
        
        #region Test Starting in S480
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS480() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS480");
            this.Manager.Comment("reaching state \'S480\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1071;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1071);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1071);
            this.Manager.Comment("reaching state \'S481\'");
            int temp1075 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS480GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS480GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS480GetPlatformChecker2)));
            if ((temp1075 == 0)) {
                this.Manager.Comment("reaching state \'S1398\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1072;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,0" +
                        ")\'");
                temp1072 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2415\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1072, "return of DsrGetDcNameEx, state S2415");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label213;
            }
            if ((temp1075 == 1)) {
                this.Manager.Comment("reaching state \'S1399\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1073;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1073 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2416\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1073, "return of DsrGetDcNameEx2, state S2416");
                this.Manager.Comment("reaching state \'S3326\'");
                goto label213;
            }
            if ((temp1075 == 2)) {
                this.Manager.Comment("reaching state \'S1400\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1074;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1074 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2417\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1074, "return of DsrGetDcNameEx2, state S2417");
                this.Manager.Comment("reaching state \'S3327\'");
                goto label213;
            }
            throw new InvalidOperationException("never reached");
        label213:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS480GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S481");
        }
        
        private void Test_LocateDc_DsrGetDcNameS480GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S481");
        }
        
        private void Test_LocateDc_DsrGetDcNameS480GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S481");
        }
        #endregion
        
        #region Test Starting in S482
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS482() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS482");
            this.Manager.Comment("reaching state \'S482\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1076;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1076);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1076);
            this.Manager.Comment("reaching state \'S483\'");
            int temp1080 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS482GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS482GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS482GetPlatformChecker2)));
            if ((temp1080 == 0)) {
                this.Manager.Comment("reaching state \'S1401\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1077;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,0" +
                        ")\'");
                temp1077 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2418\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1077, "return of DsrGetDcNameEx, state S2418");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label214;
            }
            if ((temp1080 == 1)) {
                this.Manager.Comment("reaching state \'S1402\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1078;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1078 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2419\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1078, "return of DsrGetDcNameEx2, state S2419");
                this.Manager.Comment("reaching state \'S3328\'");
                goto label214;
            }
            if ((temp1080 == 2)) {
                this.Manager.Comment("reaching state \'S1403\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1079;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1079 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2420\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1079, "return of DsrGetDcNameEx2, state S2420");
                this.Manager.Comment("reaching state \'S3329\'");
                goto label214;
            }
            throw new InvalidOperationException("never reached");
        label214:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS482GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S483");
        }
        
        private void Test_LocateDc_DsrGetDcNameS482GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S483");
        }
        
        private void Test_LocateDc_DsrGetDcNameS482GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S483");
        }
        #endregion
        
        #region Test Starting in S484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS484() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS484");
            this.Manager.Comment("reaching state \'S484\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1081;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1081);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1081);
            this.Manager.Comment("reaching state \'S485\'");
            int temp1085 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS484GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS484GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS484GetPlatformChecker2)));
            if ((temp1085 == 0)) {
                this.Manager.Comment("reaching state \'S1404\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1082;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,0)\'");
                temp1082 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2421\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1082, "return of DsrGetDcNameEx, state S2421");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label215;
            }
            if ((temp1085 == 1)) {
                this.Manager.Comment("reaching state \'S1405\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1083;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1083 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2422\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1083, "return of DsrGetDcNameEx2, state S2422");
                this.Manager.Comment("reaching state \'S3330\'");
                goto label215;
            }
            if ((temp1085 == 2)) {
                this.Manager.Comment("reaching state \'S1406\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1084;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1084 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2423\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1084, "return of DsrGetDcNameEx2, state S2423");
                this.Manager.Comment("reaching state \'S3331\'");
                goto label215;
            }
            throw new InvalidOperationException("never reached");
        label215:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS484GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S485");
        }
        
        private void Test_LocateDc_DsrGetDcNameS484GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S485");
        }
        
        private void Test_LocateDc_DsrGetDcNameS484GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S485");
        }
        #endregion
        
        #region Test Starting in S486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS486() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS486");
            this.Manager.Comment("reaching state \'S486\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1086;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1086);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1086);
            this.Manager.Comment("reaching state \'S487\'");
            int temp1090 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS486GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS486GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS486GetPlatformChecker2)));
            if ((temp1090 == 0)) {
                this.Manager.Comment("reaching state \'S1407\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1087;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,0)\'");
                temp1087 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2424\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1087, "return of DsrGetDcNameEx, state S2424");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label216;
            }
            if ((temp1090 == 1)) {
                this.Manager.Comment("reaching state \'S1408\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1088;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1088 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2425\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1088, "return of DsrGetDcNameEx2, state S2425");
                this.Manager.Comment("reaching state \'S3332\'");
                goto label216;
            }
            if ((temp1090 == 2)) {
                this.Manager.Comment("reaching state \'S1409\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1089;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1089 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2426\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1089, "return of DsrGetDcNameEx2, state S2426");
                this.Manager.Comment("reaching state \'S3333\'");
                goto label216;
            }
            throw new InvalidOperationException("never reached");
        label216:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS486GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S487");
        }
        
        private void Test_LocateDc_DsrGetDcNameS486GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S487");
        }
        
        private void Test_LocateDc_DsrGetDcNameS486GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S487");
        }
        #endregion
        
        #region Test Starting in S488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS488() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS488");
            this.Manager.Comment("reaching state \'S488\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1091;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1091);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1091);
            this.Manager.Comment("reaching state \'S489\'");
            int temp1095 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS488GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS488GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS488GetPlatformChecker2)));
            if ((temp1095 == 0)) {
                this.Manager.Comment("reaching state \'S1410\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1092;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,TrustedDomainName,Null,Null,65536)\'" +
                        "");
                temp1092 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2427\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1092, "return of DsrGetDcNameEx, state S2427");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label217;
            }
            if ((temp1095 == 1)) {
                this.Manager.Comment("reaching state \'S1411\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1093;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1093 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2428\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1093, "return of DsrGetDcNameEx2, state S2428");
                this.Manager.Comment("reaching state \'S3334\'");
                goto label217;
            }
            if ((temp1095 == 2)) {
                this.Manager.Comment("reaching state \'S1412\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1094;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1094 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2429\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1094, "return of DsrGetDcNameEx2, state S2429");
                this.Manager.Comment("reaching state \'S3335\'");
                goto label217;
            }
            throw new InvalidOperationException("never reached");
        label217:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS488GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S489");
        }
        
        private void Test_LocateDc_DsrGetDcNameS488GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S489");
        }
        
        private void Test_LocateDc_DsrGetDcNameS488GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S489");
        }
        #endregion
        
        #region Test Starting in S490
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS490() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS490");
            this.Manager.Comment("reaching state \'S490\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1096;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1096);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1096);
            this.Manager.Comment("reaching state \'S491\'");
            int temp1100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS490GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS490GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS490GetPlatformChecker2)));
            if ((temp1100 == 0)) {
                this.Manager.Comment("reaching state \'S1413\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1097;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,InvalidDomainG" +
                        "uid,Null,0)\'");
                temp1097 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2430\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1097, "return of DsrGetDcNameEx, state S2430");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label218;
            }
            if ((temp1100 == 1)) {
                this.Manager.Comment("reaching state \'S1414\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1098;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1098 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2431\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1098, "return of DsrGetDcNameEx2, state S2431");
                this.Manager.Comment("reaching state \'S3336\'");
                goto label218;
            }
            if ((temp1100 == 2)) {
                this.Manager.Comment("reaching state \'S1415\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1099;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1099 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2432\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1099, "return of DsrGetDcNameEx2, state S2432");
                this.Manager.Comment("reaching state \'S3337\'");
                goto label218;
            }
            throw new InvalidOperationException("never reached");
        label218:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS490GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S491");
        }
        
        private void Test_LocateDc_DsrGetDcNameS490GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S491");
        }
        
        private void Test_LocateDc_DsrGetDcNameS490GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S491");
        }
        #endregion
        
        #region Test Starting in S492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS492() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS492");
            this.Manager.Comment("reaching state \'S492\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1101;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1101);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1101);
            this.Manager.Comment("reaching state \'S493\'");
            int temp1105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS492GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS492GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS492GetPlatformChecker2)));
            if ((temp1105 == 0)) {
                this.Manager.Comment("reaching state \'S1416\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1102;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,TrustedDomainG" +
                        "uid,Null,0)\'");
                temp1102 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2433\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1102, "return of DsrGetDcNameEx, state S2433");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label219;
            }
            if ((temp1105 == 1)) {
                this.Manager.Comment("reaching state \'S1417\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1103;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1103 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2434\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1103, "return of DsrGetDcNameEx2, state S2434");
                this.Manager.Comment("reaching state \'S3338\'");
                goto label219;
            }
            if ((temp1105 == 2)) {
                this.Manager.Comment("reaching state \'S1418\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1104;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1104 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2435\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1104, "return of DsrGetDcNameEx2, state S2435");
                this.Manager.Comment("reaching state \'S3339\'");
                goto label219;
            }
            throw new InvalidOperationException("never reached");
        label219:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS492GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S493");
        }
        
        private void Test_LocateDc_DsrGetDcNameS492GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S493");
        }
        
        private void Test_LocateDc_DsrGetDcNameS492GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S493");
        }
        #endregion
        
        #region Test Starting in S494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS494() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS494");
            this.Manager.Comment("reaching state \'S494\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1106;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1106);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1106);
            this.Manager.Comment("reaching state \'S495\'");
            int temp1110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS494GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS494GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS494GetPlatformChecker2)));
            if ((temp1110 == 0)) {
                this.Manager.Comment("reaching state \'S1419\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1107;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp1107 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2436\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1107, "return of DsrGetDcNameEx, state S2436");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label220;
            }
            if ((temp1110 == 1)) {
                this.Manager.Comment("reaching state \'S1420\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1108;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1108 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2437\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1108, "return of DsrGetDcNameEx2, state S2437");
                this.Manager.Comment("reaching state \'S3340\'");
                goto label220;
            }
            if ((temp1110 == 2)) {
                this.Manager.Comment("reaching state \'S1421\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1109;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1109 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2438\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1109, "return of DsrGetDcNameEx2, state S2438");
                this.Manager.Comment("reaching state \'S3341\'");
                goto label220;
            }
            throw new InvalidOperationException("never reached");
        label220:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS494GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S495");
        }
        
        private void Test_LocateDc_DsrGetDcNameS494GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S495");
        }
        
        private void Test_LocateDc_DsrGetDcNameS494GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S495");
        }
        #endregion
        
        #region Test Starting in S496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS496() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS496");
            this.Manager.Comment("reaching state \'S496\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1111;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1111);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1111);
            this.Manager.Comment("reaching state \'S497\'");
            int temp1115 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS496GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS496GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS496GetPlatformChecker2)));
            if ((temp1115 == 0)) {
                this.Manager.Comment("reaching state \'S1422\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1112;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,6" +
                        "4)\'");
                temp1112 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2439\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1112, "return of DsrGetDcNameEx, state S2439");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label221;
            }
            if ((temp1115 == 1)) {
                this.Manager.Comment("reaching state \'S1423\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1113;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1113 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2440\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1113, "return of DsrGetDcNameEx2, state S2440");
                this.Manager.Comment("reaching state \'S3342\'");
                goto label221;
            }
            if ((temp1115 == 2)) {
                this.Manager.Comment("reaching state \'S1424\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1114;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1114 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2441\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1114, "return of DsrGetDcNameEx2, state S2441");
                this.Manager.Comment("reaching state \'S3343\'");
                goto label221;
            }
            throw new InvalidOperationException("never reached");
        label221:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS496GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S497");
        }
        
        private void Test_LocateDc_DsrGetDcNameS496GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S497");
        }
        
        private void Test_LocateDc_DsrGetDcNameS496GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S497");
        }
        #endregion
        
        #region Test Starting in S498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS498() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS498");
            this.Manager.Comment("reaching state \'S498\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1116;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1116);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1116);
            this.Manager.Comment("reaching state \'S499\'");
            int temp1120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS498GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS498GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS498GetPlatformChecker2)));
            if ((temp1120 == 0)) {
                this.Manager.Comment("reaching state \'S1425\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1117;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,6" +
                        "4)\'");
                temp1117 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2442\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1117, "return of DsrGetDcNameEx, state S2442");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label222;
            }
            if ((temp1120 == 1)) {
                this.Manager.Comment("reaching state \'S1426\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1118;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1118 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2443\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1118, "return of DsrGetDcNameEx2, state S2443");
                this.Manager.Comment("reaching state \'S3344\'");
                goto label222;
            }
            if ((temp1120 == 2)) {
                this.Manager.Comment("reaching state \'S1427\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1119;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1119 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2444\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1119, "return of DsrGetDcNameEx2, state S2444");
                this.Manager.Comment("reaching state \'S3345\'");
                goto label222;
            }
            throw new InvalidOperationException("never reached");
        label222:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS498GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S499");
        }
        
        private void Test_LocateDc_DsrGetDcNameS498GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S499");
        }
        
        private void Test_LocateDc_DsrGetDcNameS498GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S499");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS50() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS50");
            this.Manager.Comment("reaching state \'S50\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1121;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1121);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1121);
            this.Manager.Comment("reaching state \'S51\'");
            int temp1125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS50GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS50GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS50GetPlatformChecker2)));
            if ((temp1125 == 0)) {
                this.Manager.Comment("reaching state \'S753\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1122;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,64)\'");
                temp1122 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1770\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1122, "return of DsrGetDcNameEx2, state S1770");
                this.Manager.Comment("reaching state \'S2787\'");
                goto label223;
            }
            if ((temp1125 == 1)) {
                this.Manager.Comment("reaching state \'S754\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1123;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,64)\'");
                temp1123 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1771\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1123, "return of DsrGetDcNameEx2, state S1771");
                this.Manager.Comment("reaching state \'S2788\'");
                goto label223;
            }
            if ((temp1125 == 2)) {
                this.Manager.Comment("reaching state \'S755\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1124;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1124 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1772\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1124, "return of DsrGetDcNameEx2, state S1772");
                this.Manager.Comment("reaching state \'S2789\'");
                goto label223;
            }
            throw new InvalidOperationException("never reached");
        label223:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS50GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_LocateDc_DsrGetDcNameS50GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_LocateDc_DsrGetDcNameS50GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        #endregion
        
        #region Test Starting in S500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS500() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS500");
            this.Manager.Comment("reaching state \'S500\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1126;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1126);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1126);
            this.Manager.Comment("reaching state \'S501\'");
            int temp1130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS500GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS500GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS500GetPlatformChecker2)));
            if ((temp1130 == 0)) {
                this.Manager.Comment("reaching state \'S1428\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1127;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,64)\'");
                temp1127 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2445\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1127, "return of DsrGetDcNameEx, state S2445");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label224;
            }
            if ((temp1130 == 1)) {
                this.Manager.Comment("reaching state \'S1429\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1128;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1128 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2446\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1128, "return of DsrGetDcNameEx2, state S2446");
                this.Manager.Comment("reaching state \'S3346\'");
                goto label224;
            }
            if ((temp1130 == 2)) {
                this.Manager.Comment("reaching state \'S1430\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1129;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1129 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2447\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1129, "return of DsrGetDcNameEx2, state S2447");
                this.Manager.Comment("reaching state \'S3347\'");
                goto label224;
            }
            throw new InvalidOperationException("never reached");
        label224:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS500GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S501");
        }
        
        private void Test_LocateDc_DsrGetDcNameS500GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S501");
        }
        
        private void Test_LocateDc_DsrGetDcNameS500GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S501");
        }
        #endregion
        
        #region Test Starting in S502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS502() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS502");
            this.Manager.Comment("reaching state \'S502\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1131;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1131);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1131);
            this.Manager.Comment("reaching state \'S503\'");
            int temp1135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS502GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS502GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS502GetPlatformChecker2)));
            if ((temp1135 == 0)) {
                this.Manager.Comment("reaching state \'S1431\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1132;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,64)\'");
                temp1132 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2448\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1132, "return of DsrGetDcNameEx, state S2448");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label225;
            }
            if ((temp1135 == 1)) {
                this.Manager.Comment("reaching state \'S1432\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1133;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1133 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2449\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1133, "return of DsrGetDcNameEx2, state S2449");
                this.Manager.Comment("reaching state \'S3348\'");
                goto label225;
            }
            if ((temp1135 == 2)) {
                this.Manager.Comment("reaching state \'S1433\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1134;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1134 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2450\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1134, "return of DsrGetDcNameEx2, state S2450");
                this.Manager.Comment("reaching state \'S3349\'");
                goto label225;
            }
            throw new InvalidOperationException("never reached");
        label225:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS502GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S503");
        }
        
        private void Test_LocateDc_DsrGetDcNameS502GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S503");
        }
        
        private void Test_LocateDc_DsrGetDcNameS502GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S503");
        }
        #endregion
        
        #region Test Starting in S504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS504() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS504");
            this.Manager.Comment("reaching state \'S504\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1136;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1136);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1136);
            this.Manager.Comment("reaching state \'S505\'");
            int temp1140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS504GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS504GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS504GetPlatformChecker2)));
            if ((temp1140 == 0)) {
                this.Manager.Comment("reaching state \'S1434\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1137;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,64)\'" +
                        "");
                temp1137 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2451\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1137, "return of DsrGetDcNameEx, state S2451");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label226;
            }
            if ((temp1140 == 1)) {
                this.Manager.Comment("reaching state \'S1435\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1138;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1138 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2452\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1138, "return of DsrGetDcNameEx2, state S2452");
                this.Manager.Comment("reaching state \'S3350\'");
                goto label226;
            }
            if ((temp1140 == 2)) {
                this.Manager.Comment("reaching state \'S1436\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1139;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1139 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2453\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1139, "return of DsrGetDcNameEx2, state S2453");
                this.Manager.Comment("reaching state \'S3351\'");
                goto label226;
            }
            throw new InvalidOperationException("never reached");
        label226:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS504GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S505");
        }
        
        private void Test_LocateDc_DsrGetDcNameS504GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S505");
        }
        
        private void Test_LocateDc_DsrGetDcNameS504GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S505");
        }
        #endregion
        
        #region Test Starting in S506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS506() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS506");
            this.Manager.Comment("reaching state \'S506\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1141;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1141);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1141);
            this.Manager.Comment("reaching state \'S507\'");
            int temp1145 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS506GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS506GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS506GetPlatformChecker2)));
            if ((temp1145 == 0)) {
                this.Manager.Comment("reaching state \'S1437\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1142;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,6" +
                        "5536)\'");
                temp1142 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2454\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1142, "return of DsrGetDcNameEx, state S2454");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label227;
            }
            if ((temp1145 == 1)) {
                this.Manager.Comment("reaching state \'S1438\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1143;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1143 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2455\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1143, "return of DsrGetDcNameEx2, state S2455");
                this.Manager.Comment("reaching state \'S3352\'");
                goto label227;
            }
            if ((temp1145 == 2)) {
                this.Manager.Comment("reaching state \'S1439\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1144;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1144 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2456\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1144, "return of DsrGetDcNameEx2, state S2456");
                this.Manager.Comment("reaching state \'S3353\'");
                goto label227;
            }
            throw new InvalidOperationException("never reached");
        label227:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS506GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S507");
        }
        
        private void Test_LocateDc_DsrGetDcNameS506GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S507");
        }
        
        private void Test_LocateDc_DsrGetDcNameS506GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S507");
        }
        #endregion
        
        #region Test Starting in S508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS508() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS508");
            this.Manager.Comment("reaching state \'S508\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1146;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1146);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1146);
            this.Manager.Comment("reaching state \'S509\'");
            int temp1150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS508GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS508GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS508GetPlatformChecker2)));
            if ((temp1150 == 0)) {
                this.Manager.Comment("reaching state \'S1440\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1147;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,NetBiosFormatDomainName,Null,Null,6" +
                        "5536)\'");
                temp1147 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2457\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1147, "return of DsrGetDcNameEx, state S2457");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label228;
            }
            if ((temp1150 == 1)) {
                this.Manager.Comment("reaching state \'S1441\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1148;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1148 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2458\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1148, "return of DsrGetDcNameEx2, state S2458");
                this.Manager.Comment("reaching state \'S3354\'");
                goto label228;
            }
            if ((temp1150 == 2)) {
                this.Manager.Comment("reaching state \'S1442\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1149;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1149 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2459\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1149, "return of DsrGetDcNameEx2, state S2459");
                this.Manager.Comment("reaching state \'S3355\'");
                goto label228;
            }
            throw new InvalidOperationException("never reached");
        label228:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS508GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S509");
        }
        
        private void Test_LocateDc_DsrGetDcNameS508GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S509");
        }
        
        private void Test_LocateDc_DsrGetDcNameS508GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S509");
        }
        #endregion
        
        #region Test Starting in S510
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS510() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS510");
            this.Manager.Comment("reaching state \'S510\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1151;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1151);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1151);
            this.Manager.Comment("reaching state \'S511\'");
            int temp1155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS510GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS510GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS510GetPlatformChecker2)));
            if ((temp1155 == 0)) {
                this.Manager.Comment("reaching state \'S1443\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1152;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,65536)\'");
                temp1152 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2460\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1152, "return of DsrGetDcNameEx, state S2460");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label229;
            }
            if ((temp1155 == 1)) {
                this.Manager.Comment("reaching state \'S1444\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1153;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1153 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2461\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1153, "return of DsrGetDcNameEx2, state S2461");
                this.Manager.Comment("reaching state \'S3356\'");
                goto label229;
            }
            if ((temp1155 == 2)) {
                this.Manager.Comment("reaching state \'S1445\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1154;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1154 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2462\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1154, "return of DsrGetDcNameEx2, state S2462");
                this.Manager.Comment("reaching state \'S3357\'");
                goto label229;
            }
            throw new InvalidOperationException("never reached");
        label229:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS510GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S511");
        }
        
        private void Test_LocateDc_DsrGetDcNameS510GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S511");
        }
        
        private void Test_LocateDc_DsrGetDcNameS510GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S511");
        }
        #endregion
        
        #region Test Starting in S512
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS512() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS512");
            this.Manager.Comment("reaching state \'S512\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1156;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1156);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1156);
            this.Manager.Comment("reaching state \'S513\'");
            int temp1160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS512GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS512GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS512GetPlatformChecker2)));
            if ((temp1160 == 0)) {
                this.Manager.Comment("reaching state \'S1446\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1157;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,Null,Null,65536)\'" +
                        "");
                temp1157 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2463\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1157, "return of DsrGetDcNameEx, state S2463");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label230;
            }
            if ((temp1160 == 1)) {
                this.Manager.Comment("reaching state \'S1447\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1158;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1158 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2464\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1158, "return of DsrGetDcNameEx2, state S2464");
                this.Manager.Comment("reaching state \'S3358\'");
                goto label230;
            }
            if ((temp1160 == 2)) {
                this.Manager.Comment("reaching state \'S1448\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1159;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1159 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2465\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1159, "return of DsrGetDcNameEx2, state S2465");
                this.Manager.Comment("reaching state \'S3359\'");
                goto label230;
            }
            throw new InvalidOperationException("never reached");
        label230:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS512GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S513");
        }
        
        private void Test_LocateDc_DsrGetDcNameS512GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S513");
        }
        
        private void Test_LocateDc_DsrGetDcNameS512GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S513");
        }
        #endregion
        
        #region Test Starting in S514
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS514() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS514");
            this.Manager.Comment("reaching state \'S514\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1161;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1161);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1161);
            this.Manager.Comment("reaching state \'S515\'");
            int temp1165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS514GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS514GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS514GetPlatformChecker2)));
            if ((temp1165 == 0)) {
                this.Manager.Comment("reaching state \'S1449\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1162;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidDomainName,PrimaryDomainGuid" +
                        ",Null,0)\'");
                temp1162 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2466\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1162, "return of DsrGetDcNameEx, state S2466");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label231;
            }
            if ((temp1165 == 1)) {
                this.Manager.Comment("reaching state \'S1450\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1163;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1163 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2467\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1163, "return of DsrGetDcNameEx2, state S2467");
                this.Manager.Comment("reaching state \'S3360\'");
                goto label231;
            }
            if ((temp1165 == 2)) {
                this.Manager.Comment("reaching state \'S1451\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1164;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1164 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2468\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1164, "return of DsrGetDcNameEx2, state S2468");
                this.Manager.Comment("reaching state \'S3361\'");
                goto label231;
            }
            throw new InvalidOperationException("never reached");
        label231:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS514GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S515");
        }
        
        private void Test_LocateDc_DsrGetDcNameS514GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S515");
        }
        
        private void Test_LocateDc_DsrGetDcNameS514GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S515");
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS516() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS516");
            this.Manager.Comment("reaching state \'S516\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1166;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1166);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1166);
            this.Manager.Comment("reaching state \'S517\'");
            int temp1170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS516GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS516GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS516GetPlatformChecker2)));
            if ((temp1170 == 0)) {
                this.Manager.Comment("reaching state \'S1452\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1167;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,6553" +
                        "6)\'");
                temp1167 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2469\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1167, "return of DsrGetDcNameEx, state S2469");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label232;
            }
            if ((temp1170 == 1)) {
                this.Manager.Comment("reaching state \'S1453\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1168;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1168 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2470\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1168, "return of DsrGetDcNameEx2, state S2470");
                this.Manager.Comment("reaching state \'S3362\'");
                goto label232;
            }
            if ((temp1170 == 2)) {
                this.Manager.Comment("reaching state \'S1454\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1169;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1169 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2471\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1169, "return of DsrGetDcNameEx2, state S2471");
                this.Manager.Comment("reaching state \'S3363\'");
                goto label232;
            }
            throw new InvalidOperationException("never reached");
        label232:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS516GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S517");
        }
        
        private void Test_LocateDc_DsrGetDcNameS516GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S517");
        }
        
        private void Test_LocateDc_DsrGetDcNameS516GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S517");
        }
        #endregion
        
        #region Test Starting in S518
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS518() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS518");
            this.Manager.Comment("reaching state \'S518\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1171;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1171);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1171);
            this.Manager.Comment("reaching state \'S519\'");
            int temp1175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS518GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS518GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS518GetPlatformChecker2)));
            if ((temp1175 == 0)) {
                this.Manager.Comment("reaching state \'S1455\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1172;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,1" +
                        "31072)\'");
                temp1172 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2472\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1172, "return of DsrGetDcNameEx, state S2472");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label233;
            }
            if ((temp1175 == 1)) {
                this.Manager.Comment("reaching state \'S1456\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1173;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1173 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2473\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1173, "return of DsrGetDcNameEx2, state S2473");
                this.Manager.Comment("reaching state \'S3364\'");
                goto label233;
            }
            if ((temp1175 == 2)) {
                this.Manager.Comment("reaching state \'S1457\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1174;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1174 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2474\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1174, "return of DsrGetDcNameEx2, state S2474");
                this.Manager.Comment("reaching state \'S3365\'");
                goto label233;
            }
            throw new InvalidOperationException("never reached");
        label233:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS518GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S519");
        }
        
        private void Test_LocateDc_DsrGetDcNameS518GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S519");
        }
        
        private void Test_LocateDc_DsrGetDcNameS518GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S519");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS52() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS52");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1176;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1176);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1176);
            this.Manager.Comment("reaching state \'S53\'");
            int temp1180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS52GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS52GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS52GetPlatformChecker2)));
            if ((temp1180 == 0)) {
                this.Manager.Comment("reaching state \'S756\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1177;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",64)\'");
                temp1177 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R104883");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1773\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1177, "return of DsrGetDcNameEx2, state S1773");
                this.Manager.Comment("reaching state \'S2790\'");
                goto label234;
            }
            if ((temp1180 == 1)) {
                this.Manager.Comment("reaching state \'S757\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1178;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",64)\'");
                temp1178 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R104883");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1774\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1178, "return of DsrGetDcNameEx2, state S1774");
                this.Manager.Comment("reaching state \'S2791\'");
                goto label234;
            }
            if ((temp1180 == 2)) {
                this.Manager.Comment("reaching state \'S758\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1179;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1179 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1775\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1179, "return of DsrGetDcNameEx2, state S1775");
                this.Manager.Comment("reaching state \'S2792\'");
                goto label234;
            }
            throw new InvalidOperationException("never reached");
        label234:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS52GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_LocateDc_DsrGetDcNameS52GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_LocateDc_DsrGetDcNameS52GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        #endregion
        
        #region Test Starting in S520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS520() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS520");
            this.Manager.Comment("reaching state \'S520\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1181;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1181);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1181);
            this.Manager.Comment("reaching state \'S521\'");
            int temp1185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS520GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS520GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS520GetPlatformChecker2)));
            if ((temp1185 == 0)) {
                this.Manager.Comment("reaching state \'S1458\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1182;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,131072)" +
                        "\'");
                temp1182 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2475\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1182, "return of DsrGetDcNameEx, state S2475");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label235;
            }
            if ((temp1185 == 1)) {
                this.Manager.Comment("reaching state \'S1459\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1183;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1183 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2476\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1183, "return of DsrGetDcNameEx2, state S2476");
                this.Manager.Comment("reaching state \'S3366\'");
                goto label235;
            }
            if ((temp1185 == 2)) {
                this.Manager.Comment("reaching state \'S1460\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1184;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1184 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2477\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1184, "return of DsrGetDcNameEx2, state S2477");
                this.Manager.Comment("reaching state \'S3367\'");
                goto label235;
            }
            throw new InvalidOperationException("never reached");
        label235:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS520GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S521");
        }
        
        private void Test_LocateDc_DsrGetDcNameS520GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S521");
        }
        
        private void Test_LocateDc_DsrGetDcNameS520GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S521");
        }
        #endregion
        
        #region Test Starting in S522
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS522() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS522");
            this.Manager.Comment("reaching state \'S522\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1186;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1186);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1186);
            this.Manager.Comment("reaching state \'S523\'");
            int temp1190 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS522GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS522GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS522GetPlatformChecker2)));
            if ((temp1190 == 0)) {
                this.Manager.Comment("reaching state \'S1461\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1187;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,InvalidFormatDomainName,Null,Null,1" +
                        "31072)\'");
                temp1187 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2478\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1187, "return of DsrGetDcNameEx, state S2478");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label236;
            }
            if ((temp1190 == 1)) {
                this.Manager.Comment("reaching state \'S1462\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1188;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1188 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2479\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1188, "return of DsrGetDcNameEx2, state S2479");
                this.Manager.Comment("reaching state \'S3368\'");
                goto label236;
            }
            if ((temp1190 == 2)) {
                this.Manager.Comment("reaching state \'S1463\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1189;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1189 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2480\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1189, "return of DsrGetDcNameEx2, state S2480");
                this.Manager.Comment("reaching state \'S3369\'");
                goto label236;
            }
            throw new InvalidOperationException("never reached");
        label236:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS522GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S523");
        }
        
        private void Test_LocateDc_DsrGetDcNameS522GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S523");
        }
        
        private void Test_LocateDc_DsrGetDcNameS522GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S523");
        }
        #endregion
        
        #region Test Starting in S524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS524() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS524");
            this.Manager.Comment("reaching state \'S524\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1191;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1191);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1191);
            this.Manager.Comment("reaching state \'S525\'");
            int temp1195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS524GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS524GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS524GetPlatformChecker2)));
            if ((temp1195 == 0)) {
                this.Manager.Comment("reaching state \'S1464\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1192;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,Null,Null,Null,131072)\'");
                temp1192 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2481\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1192, "return of DsrGetDcNameEx, state S2481");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label237;
            }
            if ((temp1195 == 1)) {
                this.Manager.Comment("reaching state \'S1465\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1193;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1193 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2482\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1193, "return of DsrGetDcNameEx2, state S2482");
                this.Manager.Comment("reaching state \'S3370\'");
                goto label237;
            }
            if ((temp1195 == 2)) {
                this.Manager.Comment("reaching state \'S1466\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1194;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1194 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2483\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1194, "return of DsrGetDcNameEx2, state S2483");
                this.Manager.Comment("reaching state \'S3371\'");
                goto label237;
            }
            throw new InvalidOperationException("never reached");
        label237:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS524GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S525");
        }
        
        private void Test_LocateDc_DsrGetDcNameS524GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S525");
        }
        
        private void Test_LocateDc_DsrGetDcNameS524GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S525");
        }
        #endregion
        
        #region Test Starting in S526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS526() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS526");
            this.Manager.Comment("reaching state \'S526\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1196;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1196);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1196);
            this.Manager.Comment("reaching state \'S527\'");
            int temp1200 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS526GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS526GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS526GetPlatformChecker2)));
            if ((temp1200 == 0)) {
                this.Manager.Comment("reaching state \'S1467\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1197;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1024" +
                        ")\'");
                temp1197 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1024u);
                this.Manager.Comment("reaching state \'S2484\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1197, "return of DsrGetDcNameEx, state S2484");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label238;
            }
            if ((temp1200 == 1)) {
                this.Manager.Comment("reaching state \'S1468\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1198;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1198 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2485\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1198, "return of DsrGetDcNameEx2, state S2485");
                this.Manager.Comment("reaching state \'S3372\'");
                goto label238;
            }
            if ((temp1200 == 2)) {
                this.Manager.Comment("reaching state \'S1469\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1199;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1199 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2486\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1199, "return of DsrGetDcNameEx2, state S2486");
                this.Manager.Comment("reaching state \'S3373\'");
                goto label238;
            }
            throw new InvalidOperationException("never reached");
        label238:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS526GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S527");
        }
        
        private void Test_LocateDc_DsrGetDcNameS526GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S527");
        }
        
        private void Test_LocateDc_DsrGetDcNameS526GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S527");
        }
        #endregion
        
        #region Test Starting in S528
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS528() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS528");
            this.Manager.Comment("reaching state \'S528\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1201;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1201);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1201);
            this.Manager.Comment("reaching state \'S529\'");
            int temp1205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS528GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS528GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS528GetPlatformChecker2)));
            if ((temp1205 == 0)) {
                this.Manager.Comment("reaching state \'S1470\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1202;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1152" +
                        ")\'");
                temp1202 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104893");
                this.Manager.Comment("reaching state \'S2487\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1202, "return of DsrGetDcNameEx, state S2487");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label239;
            }
            if ((temp1205 == 1)) {
                this.Manager.Comment("reaching state \'S1471\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1203;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1203 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2488\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1203, "return of DsrGetDcNameEx2, state S2488");
                this.Manager.Comment("reaching state \'S3374\'");
                goto label239;
            }
            if ((temp1205 == 2)) {
                this.Manager.Comment("reaching state \'S1472\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1204;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1204 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2489\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1204, "return of DsrGetDcNameEx2, state S2489");
                this.Manager.Comment("reaching state \'S3375\'");
                goto label239;
            }
            throw new InvalidOperationException("never reached");
        label239:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS528GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S529");
        }
        
        private void Test_LocateDc_DsrGetDcNameS528GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S529");
        }
        
        private void Test_LocateDc_DsrGetDcNameS528GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S529");
        }
        #endregion
        
        #region Test Starting in S530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS530() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS530");
            this.Manager.Comment("reaching state \'S530\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1206;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1206);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1206);
            this.Manager.Comment("reaching state \'S531\'");
            int temp1210 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS530GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS530GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS530GetPlatformChecker2)));
            if ((temp1210 == 0)) {
                this.Manager.Comment("reaching state \'S1473\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1207;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1088" +
                        ")\'");
                temp1207 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104891");
                this.Manager.Comment("reaching state \'S2490\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1207, "return of DsrGetDcNameEx, state S2490");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label240;
            }
            if ((temp1210 == 1)) {
                this.Manager.Comment("reaching state \'S1474\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1208;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1208 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2491\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1208, "return of DsrGetDcNameEx2, state S2491");
                this.Manager.Comment("reaching state \'S3376\'");
                goto label240;
            }
            if ((temp1210 == 2)) {
                this.Manager.Comment("reaching state \'S1475\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1209;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1209 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2492\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1209, "return of DsrGetDcNameEx2, state S2492");
                this.Manager.Comment("reaching state \'S3377\'");
                goto label240;
            }
            throw new InvalidOperationException("never reached");
        label240:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS530GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S531");
        }
        
        private void Test_LocateDc_DsrGetDcNameS530GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S531");
        }
        
        private void Test_LocateDc_DsrGetDcNameS530GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S531");
        }
        #endregion
        
        #region Test Starting in S532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS532() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS532");
            this.Manager.Comment("reaching state \'S532\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1211;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1211);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1211);
            this.Manager.Comment("reaching state \'S533\'");
            int temp1215 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS532GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS532GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS532GetPlatformChecker2)));
            if ((temp1215 == 0)) {
                this.Manager.Comment("reaching state \'S1476\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1212;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1)\'");
                temp1212 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1u);
                this.Manager.Comment("reaching state \'S2493\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1212, "return of DsrGetDcNameEx, state S2493");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label241;
            }
            if ((temp1215 == 1)) {
                this.Manager.Comment("reaching state \'S1477\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1213;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1213 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2494\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1213, "return of DsrGetDcNameEx2, state S2494");
                this.Manager.Comment("reaching state \'S3378\'");
                goto label241;
            }
            if ((temp1215 == 2)) {
                this.Manager.Comment("reaching state \'S1478\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1214;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1214 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2495\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1214, "return of DsrGetDcNameEx2, state S2495");
                this.Manager.Comment("reaching state \'S3379\'");
                goto label241;
            }
            throw new InvalidOperationException("never reached");
        label241:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS532GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S533");
        }
        
        private void Test_LocateDc_DsrGetDcNameS532GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S533");
        }
        
        private void Test_LocateDc_DsrGetDcNameS532GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S533");
        }
        #endregion
        
        #region Test Starting in S534
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS534() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS534");
            this.Manager.Comment("reaching state \'S534\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1216;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1216);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1216);
            this.Manager.Comment("reaching state \'S535\'");
            int temp1220 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS534GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS534GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS534GetPlatformChecker2)));
            if ((temp1220 == 0)) {
                this.Manager.Comment("reaching state \'S1479\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1217;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,16)\'" +
                        "");
                temp1217 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16u);
                this.Manager.Comment("reaching state \'S2496\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1217, "return of DsrGetDcNameEx, state S2496");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label242;
            }
            if ((temp1220 == 1)) {
                this.Manager.Comment("reaching state \'S1480\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1218;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1218 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2497\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1218, "return of DsrGetDcNameEx2, state S2497");
                this.Manager.Comment("reaching state \'S3380\'");
                goto label242;
            }
            if ((temp1220 == 2)) {
                this.Manager.Comment("reaching state \'S1481\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1219;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1219 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2498\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1219, "return of DsrGetDcNameEx2, state S2498");
                this.Manager.Comment("reaching state \'S3381\'");
                goto label242;
            }
            throw new InvalidOperationException("never reached");
        label242:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS534GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S535");
        }
        
        private void Test_LocateDc_DsrGetDcNameS534GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S535");
        }
        
        private void Test_LocateDc_DsrGetDcNameS534GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S535");
        }
        #endregion
        
        #region Test Starting in S536
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS536() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS536");
            this.Manager.Comment("reaching state \'S536\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1221;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1221);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1221);
            this.Manager.Comment("reaching state \'S537\'");
            int temp1225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS536GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS536GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS536GetPlatformChecker2)));
            if ((temp1225 == 0)) {
                this.Manager.Comment("reaching state \'S1482\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1222;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,32)\'" +
                        "");
                temp1222 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32u);
                this.Manager.Comment("reaching state \'S2499\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1222, "return of DsrGetDcNameEx, state S2499");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label243;
            }
            if ((temp1225 == 1)) {
                this.Manager.Comment("reaching state \'S1483\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1223;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1223 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2500\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1223, "return of DsrGetDcNameEx2, state S2500");
                this.Manager.Comment("reaching state \'S3382\'");
                goto label243;
            }
            if ((temp1225 == 2)) {
                this.Manager.Comment("reaching state \'S1484\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1224;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1224 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2501\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1224, "return of DsrGetDcNameEx2, state S2501");
                this.Manager.Comment("reaching state \'S3383\'");
                goto label243;
            }
            throw new InvalidOperationException("never reached");
        label243:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS536GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S537");
        }
        
        private void Test_LocateDc_DsrGetDcNameS536GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S537");
        }
        
        private void Test_LocateDc_DsrGetDcNameS536GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S537");
        }
        #endregion
        
        #region Test Starting in S538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS538() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS538");
            this.Manager.Comment("reaching state \'S538\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1226;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1226);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1226);
            this.Manager.Comment("reaching state \'S539\'");
            int temp1230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS538GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS538GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS538GetPlatformChecker2)));
            if ((temp1230 == 0)) {
                this.Manager.Comment("reaching state \'S1485\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1227;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,256)" +
                        "\'");
                temp1227 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 256u);
                this.Manager.Comment("reaching state \'S2502\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1227, "return of DsrGetDcNameEx, state S2502");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label244;
            }
            if ((temp1230 == 1)) {
                this.Manager.Comment("reaching state \'S1486\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1228;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1228 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2503\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1228, "return of DsrGetDcNameEx2, state S2503");
                this.Manager.Comment("reaching state \'S3384\'");
                goto label244;
            }
            if ((temp1230 == 2)) {
                this.Manager.Comment("reaching state \'S1487\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1229;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1229 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2504\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1229, "return of DsrGetDcNameEx2, state S2504");
                this.Manager.Comment("reaching state \'S3385\'");
                goto label244;
            }
            throw new InvalidOperationException("never reached");
        label244:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS538GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S539");
        }
        
        private void Test_LocateDc_DsrGetDcNameS538GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S539");
        }
        
        private void Test_LocateDc_DsrGetDcNameS538GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S539");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS54() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS54");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1231;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1231);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1231);
            this.Manager.Comment("reaching state \'S55\'");
            int temp1235 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS54GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS54GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS54GetPlatformChecker2)));
            if ((temp1235 == 0)) {
                this.Manager.Comment("reaching state \'S759\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1232;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,64)\'");
                temp1232 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R104886");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1776\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1232, "return of DsrGetDcNameEx2, state S1776");
                this.Manager.Comment("reaching state \'S2793\'");
                goto label245;
            }
            if ((temp1235 == 1)) {
                this.Manager.Comment("reaching state \'S760\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1233;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,64)\'");
                temp1233 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R104886");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1777\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1233, "return of DsrGetDcNameEx2, state S1777");
                this.Manager.Comment("reaching state \'S2794\'");
                goto label245;
            }
            if ((temp1235 == 2)) {
                this.Manager.Comment("reaching state \'S761\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1234;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1234 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1778\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1234, "return of DsrGetDcNameEx2, state S1778");
                this.Manager.Comment("reaching state \'S2795\'");
                goto label245;
            }
            throw new InvalidOperationException("never reached");
        label245:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS54GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_LocateDc_DsrGetDcNameS54GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_LocateDc_DsrGetDcNameS54GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        #endregion
        
        #region Test Starting in S540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS540() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS540");
            this.Manager.Comment("reaching state \'S540\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1236;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1236);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1236);
            this.Manager.Comment("reaching state \'S541\'");
            int temp1240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS540GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS540GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS540GetPlatformChecker2)));
            if ((temp1240 == 0)) {
                this.Manager.Comment("reaching state \'S1488\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1237;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,512)" +
                        "\'");
                temp1237 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 512u);
                this.Manager.Comment("reaching state \'S2505\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1237, "return of DsrGetDcNameEx, state S2505");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label246;
            }
            if ((temp1240 == 1)) {
                this.Manager.Comment("reaching state \'S1489\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1238;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1238 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2506\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1238, "return of DsrGetDcNameEx2, state S2506");
                this.Manager.Comment("reaching state \'S3386\'");
                goto label246;
            }
            if ((temp1240 == 2)) {
                this.Manager.Comment("reaching state \'S1490\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1239;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1239 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2507\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1239, "return of DsrGetDcNameEx2, state S2507");
                this.Manager.Comment("reaching state \'S3387\'");
                goto label246;
            }
            throw new InvalidOperationException("never reached");
        label246:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS540GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S541");
        }
        
        private void Test_LocateDc_DsrGetDcNameS540GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S541");
        }
        
        private void Test_LocateDc_DsrGetDcNameS540GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S541");
        }
        #endregion
        
        #region Test Starting in S542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS542() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS542");
            this.Manager.Comment("reaching state \'S542\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1241;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1241);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1241);
            this.Manager.Comment("reaching state \'S543\'");
            int temp1245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS542GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS542GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS542GetPlatformChecker2)));
            if ((temp1245 == 0)) {
                this.Manager.Comment("reaching state \'S1491\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1242;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2048" +
                        ")\'");
                temp1242 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2048u);
                this.Manager.Comment("reaching state \'S2508\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1242, "return of DsrGetDcNameEx, state S2508");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label247;
            }
            if ((temp1245 == 1)) {
                this.Manager.Comment("reaching state \'S1492\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1243;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1243 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2509\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1243, "return of DsrGetDcNameEx2, state S2509");
                this.Manager.Comment("reaching state \'S3388\'");
                goto label247;
            }
            if ((temp1245 == 2)) {
                this.Manager.Comment("reaching state \'S1493\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1244;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1244 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2510\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1244, "return of DsrGetDcNameEx2, state S2510");
                this.Manager.Comment("reaching state \'S3389\'");
                goto label247;
            }
            throw new InvalidOperationException("never reached");
        label247:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS542GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S543");
        }
        
        private void Test_LocateDc_DsrGetDcNameS542GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S543");
        }
        
        private void Test_LocateDc_DsrGetDcNameS542GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S543");
        }
        #endregion
        
        #region Test Starting in S544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS544() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS544");
            this.Manager.Comment("reaching state \'S544\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1246;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1246);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1246);
            this.Manager.Comment("reaching state \'S545\'");
            int temp1250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS544GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS544GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS544GetPlatformChecker2)));
            if ((temp1250 == 0)) {
                this.Manager.Comment("reaching state \'S1494\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1247;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,3221" +
                        "225472)\'");
                temp1247 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104895");
                this.Manager.Comment("reaching state \'S2511\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1247, "return of DsrGetDcNameEx, state S2511");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label248;
            }
            if ((temp1250 == 1)) {
                this.Manager.Comment("reaching state \'S1495\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1248;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1248 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2512\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1248, "return of DsrGetDcNameEx2, state S2512");
                this.Manager.Comment("reaching state \'S3390\'");
                goto label248;
            }
            if ((temp1250 == 2)) {
                this.Manager.Comment("reaching state \'S1496\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1249;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1249 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2513\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1249, "return of DsrGetDcNameEx2, state S2513");
                this.Manager.Comment("reaching state \'S3391\'");
                goto label248;
            }
            throw new InvalidOperationException("never reached");
        label248:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS544GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S545");
        }
        
        private void Test_LocateDc_DsrGetDcNameS544GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S545");
        }
        
        private void Test_LocateDc_DsrGetDcNameS544GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S545");
        }
        #endregion
        
        #region Test Starting in S546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS546() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS546");
            this.Manager.Comment("reaching state \'S546\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1251;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1251);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1251);
            this.Manager.Comment("reaching state \'S547\'");
            int temp1255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS546GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS546GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS546GetPlatformChecker2)));
            if ((temp1255 == 0)) {
                this.Manager.Comment("reaching state \'S1497\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1252;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1638" +
                        "4)\'");
                temp1252 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16384u);
                this.Manager.Comment("reaching state \'S2514\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1252, "return of DsrGetDcNameEx, state S2514");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label249;
            }
            if ((temp1255 == 1)) {
                this.Manager.Comment("reaching state \'S1498\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1253;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1253 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2515\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1253, "return of DsrGetDcNameEx2, state S2515");
                this.Manager.Comment("reaching state \'S3392\'");
                goto label249;
            }
            if ((temp1255 == 2)) {
                this.Manager.Comment("reaching state \'S1499\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1254;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1254 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2516\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1254, "return of DsrGetDcNameEx2, state S2516");
                this.Manager.Comment("reaching state \'S3393\'");
                goto label249;
            }
            throw new InvalidOperationException("never reached");
        label249:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS546GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S547");
        }
        
        private void Test_LocateDc_DsrGetDcNameS546GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S547");
        }
        
        private void Test_LocateDc_DsrGetDcNameS546GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S547");
        }
        #endregion
        
        #region Test Starting in S548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS548() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS548");
            this.Manager.Comment("reaching state \'S548\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1256;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1256);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1256);
            this.Manager.Comment("reaching state \'S549\'");
            int temp1260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS548GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS548GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS548GetPlatformChecker2)));
            if ((temp1260 == 0)) {
                this.Manager.Comment("reaching state \'S1500\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1257;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2621" +
                        "44)\'");
                temp1257 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 262144u);
                this.Manager.Comment("reaching state \'S2517\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1257, "return of DsrGetDcNameEx, state S2517");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label250;
            }
            if ((temp1260 == 1)) {
                this.Manager.Comment("reaching state \'S1501\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1258;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1258 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2518\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1258, "return of DsrGetDcNameEx2, state S2518");
                this.Manager.Comment("reaching state \'S3394\'");
                goto label250;
            }
            if ((temp1260 == 2)) {
                this.Manager.Comment("reaching state \'S1502\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1259;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1259 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2519\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1259, "return of DsrGetDcNameEx2, state S2519");
                this.Manager.Comment("reaching state \'S3395\'");
                goto label250;
            }
            throw new InvalidOperationException("never reached");
        label250:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS548GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S549");
        }
        
        private void Test_LocateDc_DsrGetDcNameS548GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S549");
        }
        
        private void Test_LocateDc_DsrGetDcNameS548GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S549");
        }
        #endregion
        
        #region Test Starting in S550
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS550() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS550");
            this.Manager.Comment("reaching state \'S550\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1261;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1261);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1261);
            this.Manager.Comment("reaching state \'S551\'");
            int temp1265 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS550GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS550GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS550GetPlatformChecker2)));
            if ((temp1265 == 0)) {
                this.Manager.Comment("reaching state \'S1503\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1262;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1073" +
                        "741824)\'");
                temp1262 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1073741824u);
                this.Manager.Comment("reaching state \'S2520\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1262, "return of DsrGetDcNameEx, state S2520");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label251;
            }
            if ((temp1265 == 1)) {
                this.Manager.Comment("reaching state \'S1504\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1263;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1263 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2521\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1263, "return of DsrGetDcNameEx2, state S2521");
                this.Manager.Comment("reaching state \'S3396\'");
                goto label251;
            }
            if ((temp1265 == 2)) {
                this.Manager.Comment("reaching state \'S1505\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1264;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1264 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2522\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1264, "return of DsrGetDcNameEx2, state S2522");
                this.Manager.Comment("reaching state \'S3397\'");
                goto label251;
            }
            throw new InvalidOperationException("never reached");
        label251:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS550GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S551");
        }
        
        private void Test_LocateDc_DsrGetDcNameS550GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S551");
        }
        
        private void Test_LocateDc_DsrGetDcNameS550GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S551");
        }
        #endregion
        
        #region Test Starting in S552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS552() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS552");
            this.Manager.Comment("reaching state \'S552\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1266;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1266);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1266);
            this.Manager.Comment("reaching state \'S553\'");
            int temp1270 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS552GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS552GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS552GetPlatformChecker2)));
            if ((temp1270 == 0)) {
                this.Manager.Comment("reaching state \'S1506\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1267;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,2147" +
                        "483648)\'");
                temp1267 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2147483648u);
                this.Manager.Comment("reaching state \'S2523\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1267, "return of DsrGetDcNameEx, state S2523");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label252;
            }
            if ((temp1270 == 1)) {
                this.Manager.Comment("reaching state \'S1507\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1268;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1268 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2524\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1268, "return of DsrGetDcNameEx2, state S2524");
                this.Manager.Comment("reaching state \'S3398\'");
                goto label252;
            }
            if ((temp1270 == 2)) {
                this.Manager.Comment("reaching state \'S1508\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1269;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1269 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2525\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1269, "return of DsrGetDcNameEx2, state S2525");
                this.Manager.Comment("reaching state \'S3399\'");
                goto label252;
            }
            throw new InvalidOperationException("never reached");
        label252:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS552GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S553");
        }
        
        private void Test_LocateDc_DsrGetDcNameS552GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S553");
        }
        
        private void Test_LocateDc_DsrGetDcNameS552GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S553");
        }
        #endregion
        
        #region Test Starting in S554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS554() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS554");
            this.Manager.Comment("reaching state \'S554\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1271;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1271);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1271);
            this.Manager.Comment("reaching state \'S555\'");
            int temp1275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS554GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS554GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS554GetPlatformChecker2)));
            if ((temp1275 == 0)) {
                this.Manager.Comment("reaching state \'S1509\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1272;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,3276" +
                        "8)\'");
                temp1272 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32768u);
                this.Manager.Comment("reaching state \'S2526\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1272, "return of DsrGetDcNameEx, state S2526");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label253;
            }
            if ((temp1275 == 1)) {
                this.Manager.Comment("reaching state \'S1510\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1273;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1273 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2527\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1273, "return of DsrGetDcNameEx2, state S2527");
                this.Manager.Comment("reaching state \'S3400\'");
                goto label253;
            }
            if ((temp1275 == 2)) {
                this.Manager.Comment("reaching state \'S1511\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1274;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1274 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2528\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1274, "return of DsrGetDcNameEx2, state S2528");
                this.Manager.Comment("reaching state \'S3401\'");
                goto label253;
            }
            throw new InvalidOperationException("never reached");
        label253:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS554GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S555");
        }
        
        private void Test_LocateDc_DsrGetDcNameS554GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S555");
        }
        
        private void Test_LocateDc_DsrGetDcNameS554GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S555");
        }
        #endregion
        
        #region Test Starting in S556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS556() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS556");
            this.Manager.Comment("reaching state \'S556\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1276;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1276);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1276);
            this.Manager.Comment("reaching state \'S557\'");
            int temp1280 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS556GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS556GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS556GetPlatformChecker2)));
            if ((temp1280 == 0)) {
                this.Manager.Comment("reaching state \'S1512\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1277;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1048" +
                        "576)\'");
                temp1277 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1048576u);
                this.Manager.Comment("reaching state \'S2529\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1277, "return of DsrGetDcNameEx, state S2529");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label254;
            }
            if ((temp1280 == 1)) {
                this.Manager.Comment("reaching state \'S1513\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1278;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1278 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2530\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1278, "return of DsrGetDcNameEx2, state S2530");
                this.Manager.Comment("reaching state \'S3402\'");
                goto label254;
            }
            if ((temp1280 == 2)) {
                this.Manager.Comment("reaching state \'S1514\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1279;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1279 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2531\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1279, "return of DsrGetDcNameEx2, state S2531");
                this.Manager.Comment("reaching state \'S3403\'");
                goto label254;
            }
            throw new InvalidOperationException("never reached");
        label254:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS556GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S557");
        }
        
        private void Test_LocateDc_DsrGetDcNameS556GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S557");
        }
        
        private void Test_LocateDc_DsrGetDcNameS556GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S557");
        }
        #endregion
        
        #region Test Starting in S558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS558() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS558");
            this.Manager.Comment("reaching state \'S558\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1281;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1281);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1281);
            this.Manager.Comment("reaching state \'S559\'");
            int temp1285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS558GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS558GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS558GetPlatformChecker2)));
            if ((temp1285 == 0)) {
                this.Manager.Comment("reaching state \'S1515\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1282;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,5242" +
                        "88)\'");
                temp1282 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 524288u);
                this.Manager.Comment("reaching state \'S2532\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1282, "return of DsrGetDcNameEx, state S2532");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label255;
            }
            if ((temp1285 == 1)) {
                this.Manager.Comment("reaching state \'S1516\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1283;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1283 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2533\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1283, "return of DsrGetDcNameEx2, state S2533");
                this.Manager.Comment("reaching state \'S3404\'");
                goto label255;
            }
            if ((temp1285 == 2)) {
                this.Manager.Comment("reaching state \'S1517\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1284;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1284 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2534\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1284, "return of DsrGetDcNameEx2, state S2534");
                this.Manager.Comment("reaching state \'S3405\'");
                goto label255;
            }
            throw new InvalidOperationException("never reached");
        label255:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS558GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S559");
        }
        
        private void Test_LocateDc_DsrGetDcNameS558GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S559");
        }
        
        private void Test_LocateDc_DsrGetDcNameS558GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S559");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS56() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS56");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1286;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1286);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1286);
            this.Manager.Comment("reaching state \'S57\'");
            int temp1290 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS56GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS56GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS56GetPlatformChecker2)));
            if ((temp1290 == 0)) {
                this.Manager.Comment("reaching state \'S762\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1287;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,65536)\'");
                temp1287 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1779\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1287, "return of DsrGetDcNameEx2, state S1779");
                this.Manager.Comment("reaching state \'S2796\'");
                goto label256;
            }
            if ((temp1290 == 1)) {
                this.Manager.Comment("reaching state \'S763\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1288;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,65536)\'");
                temp1288 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1780\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1288, "return of DsrGetDcNameEx2, state S1780");
                this.Manager.Comment("reaching state \'S2797\'");
                goto label256;
            }
            if ((temp1290 == 2)) {
                this.Manager.Comment("reaching state \'S764\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1289;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1289 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1781\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1289, "return of DsrGetDcNameEx2, state S1781");
                this.Manager.Comment("reaching state \'S2798\'");
                goto label256;
            }
            throw new InvalidOperationException("never reached");
        label256:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS56GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_LocateDc_DsrGetDcNameS56GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_LocateDc_DsrGetDcNameS56GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        #endregion
        
        #region Test Starting in S560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS560() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS560");
            this.Manager.Comment("reaching state \'S560\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1291;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1291);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1291);
            this.Manager.Comment("reaching state \'S561\'");
            int temp1295 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS560GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS560GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS560GetPlatformChecker2)));
            if ((temp1295 == 0)) {
                this.Manager.Comment("reaching state \'S1518\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1292;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1966" +
                        "08)\'");
                temp1292 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104894");
                this.Manager.Comment("reaching state \'S2535\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1292, "return of DsrGetDcNameEx, state S2535");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label257;
            }
            if ((temp1295 == 1)) {
                this.Manager.Comment("reaching state \'S1519\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1293;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1293 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2536\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1293, "return of DsrGetDcNameEx2, state S2536");
                this.Manager.Comment("reaching state \'S3406\'");
                goto label257;
            }
            if ((temp1295 == 2)) {
                this.Manager.Comment("reaching state \'S1520\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1294;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1294 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2537\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1294, "return of DsrGetDcNameEx2, state S2537");
                this.Manager.Comment("reaching state \'S3407\'");
                goto label257;
            }
            throw new InvalidOperationException("never reached");
        label257:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS560GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S561");
        }
        
        private void Test_LocateDc_DsrGetDcNameS560GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S561");
        }
        
        private void Test_LocateDc_DsrGetDcNameS560GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S561");
        }
        #endregion
        
        #region Test Starting in S562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS562() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS562");
            this.Manager.Comment("reaching state \'S562\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1296;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1296);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1296);
            this.Manager.Comment("reaching state \'S563\'");
            int temp1300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS562GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS562GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS562GetPlatformChecker2)));
            if ((temp1300 == 0)) {
                this.Manager.Comment("reaching state \'S1521\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1297;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,8192" +
                        ")\'");
                temp1297 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 8192u);
                this.Manager.Comment("reaching state \'S2538\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1297, "return of DsrGetDcNameEx, state S2538");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label258;
            }
            if ((temp1300 == 1)) {
                this.Manager.Comment("reaching state \'S1522\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1298;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1298 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2539\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1298, "return of DsrGetDcNameEx2, state S2539");
                this.Manager.Comment("reaching state \'S3408\'");
                goto label258;
            }
            if ((temp1300 == 2)) {
                this.Manager.Comment("reaching state \'S1523\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1299;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1299 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2540\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1299, "return of DsrGetDcNameEx2, state S2540");
                this.Manager.Comment("reaching state \'S3409\'");
                goto label258;
            }
            throw new InvalidOperationException("never reached");
        label258:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS562GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S563");
        }
        
        private void Test_LocateDc_DsrGetDcNameS562GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S563");
        }
        
        private void Test_LocateDc_DsrGetDcNameS562GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S563");
        }
        #endregion
        
        #region Test Starting in S564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS564() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS564");
            this.Manager.Comment("reaching state \'S564\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1301;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1301);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1301);
            this.Manager.Comment("reaching state \'S565\'");
            int temp1305 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS564GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS564GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS564GetPlatformChecker2)));
            if ((temp1305 == 0)) {
                this.Manager.Comment("reaching state \'S1524\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1302;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,4096" +
                        ")\'");
                temp1302 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 4096u);
                this.Manager.Comment("reaching state \'S2541\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1302, "return of DsrGetDcNameEx, state S2541");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label259;
            }
            if ((temp1305 == 1)) {
                this.Manager.Comment("reaching state \'S1525\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1303;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1303 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2542\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1303, "return of DsrGetDcNameEx2, state S2542");
                this.Manager.Comment("reaching state \'S3410\'");
                goto label259;
            }
            if ((temp1305 == 2)) {
                this.Manager.Comment("reaching state \'S1526\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1304;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1304 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2543\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1304, "return of DsrGetDcNameEx2, state S2543");
                this.Manager.Comment("reaching state \'S3411\'");
                goto label259;
            }
            throw new InvalidOperationException("never reached");
        label259:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS564GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S565");
        }
        
        private void Test_LocateDc_DsrGetDcNameS564GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S565");
        }
        
        private void Test_LocateDc_DsrGetDcNameS564GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S565");
        }
        #endregion
        
        #region Test Starting in S566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS566() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS566");
            this.Manager.Comment("reaching state \'S566\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1306;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1306);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1306);
            this.Manager.Comment("reaching state \'S567\'");
            int temp1310 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS566GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS566GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS566GetPlatformChecker2)));
            if ((temp1310 == 0)) {
                this.Manager.Comment("reaching state \'S1527\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1307;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,257)" +
                        "\'");
                temp1307 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 257u);
                this.Manager.Comment("reaching state \'S2544\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1307, "return of DsrGetDcNameEx, state S2544");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label260;
            }
            if ((temp1310 == 1)) {
                this.Manager.Comment("reaching state \'S1528\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1308;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1308 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2545\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1308, "return of DsrGetDcNameEx2, state S2545");
                this.Manager.Comment("reaching state \'S3412\'");
                goto label260;
            }
            if ((temp1310 == 2)) {
                this.Manager.Comment("reaching state \'S1529\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1309;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1309 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2546\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1309, "return of DsrGetDcNameEx2, state S2546");
                this.Manager.Comment("reaching state \'S3413\'");
                goto label260;
            }
            throw new InvalidOperationException("never reached");
        label260:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS566GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S567");
        }
        
        private void Test_LocateDc_DsrGetDcNameS566GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S567");
        }
        
        private void Test_LocateDc_DsrGetDcNameS566GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S567");
        }
        #endregion
        
        #region Test Starting in S568
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS568() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS568");
            this.Manager.Comment("reaching state \'S568\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1311;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1311);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1311);
            this.Manager.Comment("reaching state \'S569\'");
            int temp1315 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS568GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS568GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS568GetPlatformChecker2)));
            if ((temp1315 == 0)) {
                this.Manager.Comment("reaching state \'S1530\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1312;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,128)" +
                        "\'");
                temp1312 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 128u);
                this.Manager.Comment("reaching state \'S2547\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1312, "return of DsrGetDcNameEx, state S2547");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label261;
            }
            if ((temp1315 == 1)) {
                this.Manager.Comment("reaching state \'S1531\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1313;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1313 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2548\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1313, "return of DsrGetDcNameEx2, state S2548");
                this.Manager.Comment("reaching state \'S3414\'");
                goto label261;
            }
            if ((temp1315 == 2)) {
                this.Manager.Comment("reaching state \'S1532\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1314;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1314 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2549\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1314, "return of DsrGetDcNameEx2, state S2549");
                this.Manager.Comment("reaching state \'S3415\'");
                goto label261;
            }
            throw new InvalidOperationException("never reached");
        label261:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS568GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S569");
        }
        
        private void Test_LocateDc_DsrGetDcNameS568GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S569");
        }
        
        private void Test_LocateDc_DsrGetDcNameS568GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S569");
        }
        #endregion
        
        #region Test Starting in S570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS570() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS570");
            this.Manager.Comment("reaching state \'S570\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1316;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1316);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1316);
            this.Manager.Comment("reaching state \'S571\'");
            int temp1320 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS570GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS570GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS570GetPlatformChecker2)));
            if ((temp1320 == 0)) {
                this.Manager.Comment("reaching state \'S1533\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1317;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,192)" +
                        "\'");
                temp1317 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104892");
                this.Manager.Comment("reaching state \'S2550\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1317, "return of DsrGetDcNameEx, state S2550");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label262;
            }
            if ((temp1320 == 1)) {
                this.Manager.Comment("reaching state \'S1534\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1318;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1318 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2551\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1318, "return of DsrGetDcNameEx2, state S2551");
                this.Manager.Comment("reaching state \'S3416\'");
                goto label262;
            }
            if ((temp1320 == 2)) {
                this.Manager.Comment("reaching state \'S1535\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1319;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1319 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2552\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1319, "return of DsrGetDcNameEx2, state S2552");
                this.Manager.Comment("reaching state \'S3417\'");
                goto label262;
            }
            throw new InvalidOperationException("never reached");
        label262:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS570GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S571");
        }
        
        private void Test_LocateDc_DsrGetDcNameS570GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S571");
        }
        
        private void Test_LocateDc_DsrGetDcNameS570GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S571");
        }
        #endregion
        
        #region Test Starting in S572
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS572() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS572");
            this.Manager.Comment("reaching state \'S572\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1321;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1321);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1321);
            this.Manager.Comment("reaching state \'S573\'");
            int temp1325 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS572GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS572GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS572GetPlatformChecker2)));
            if ((temp1325 == 0)) {
                this.Manager.Comment("reaching state \'S1536\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1322;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx(PrimaryDc,FqdnFormatDomainName,Null,Null,1310" +
                        "72)\'");
                temp1322 = this.INrpcServerAdapterInstance.DsrGetDcNameEx(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2553\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1322, "return of DsrGetDcNameEx, state S2553");
                Test_LocateDc_DsrGetDcNameS3313();
                goto label263;
            }
            if ((temp1325 == 1)) {
                this.Manager.Comment("reaching state \'S1537\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1323;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1323 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2554\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1323, "return of DsrGetDcNameEx2, state S2554");
                this.Manager.Comment("reaching state \'S3418\'");
                goto label263;
            }
            if ((temp1325 == 2)) {
                this.Manager.Comment("reaching state \'S1538\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1324;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1324 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2555\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1324, "return of DsrGetDcNameEx2, state S2555");
                this.Manager.Comment("reaching state \'S3419\'");
                goto label263;
            }
            throw new InvalidOperationException("never reached");
        label263:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS572GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S573");
        }
        
        private void Test_LocateDc_DsrGetDcNameS572GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S573");
        }
        
        private void Test_LocateDc_DsrGetDcNameS572GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S573");
        }
        #endregion
        
        #region Test Starting in S574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS574() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS574");
            this.Manager.Comment("reaching state \'S574\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1326;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1326);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1326);
            this.Manager.Comment("reaching state \'S575\'");
            int temp1330 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS574GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS574GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS574GetPlatformChecker2)));
            if ((temp1330 == 0)) {
                this.Manager.Comment("reaching state \'S1539\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1327;
                this.Manager.Comment("executing step \'call DsrGetDcName(NonDcServer,FqdnFormatDomainName,PrimaryDomainG" +
                        "uid,Null,0)\'");
                temp1327 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2556\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1327, "return of DsrGetDcName, state S2556");
                this.Manager.Comment("reaching state \'S3420\'");
                goto label264;
            }
            if ((temp1330 == 1)) {
                this.Manager.Comment("reaching state \'S1540\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1328;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1328 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2557\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1328, "return of DsrGetDcNameEx2, state S2557");
                this.Manager.Comment("reaching state \'S3421\'");
                goto label264;
            }
            if ((temp1330 == 2)) {
                this.Manager.Comment("reaching state \'S1541\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1329;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1329 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2558\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1329, "return of DsrGetDcNameEx2, state S2558");
                this.Manager.Comment("reaching state \'S3422\'");
                goto label264;
            }
            throw new InvalidOperationException("never reached");
        label264:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS574GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S575");
        }
        
        private void Test_LocateDc_DsrGetDcNameS574GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S575");
        }
        
        private void Test_LocateDc_DsrGetDcNameS574GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S575");
        }
        #endregion
        
        #region Test Starting in S576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS576() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS576");
            this.Manager.Comment("reaching state \'S576\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1331;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1331);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1331);
            this.Manager.Comment("reaching state \'S577\'");
            int temp1335 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS576GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS576GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS576GetPlatformChecker2)));
            if ((temp1335 == 0)) {
                this.Manager.Comment("reaching state \'S1542\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1332;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,0)\'");
                temp1332 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2559\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1332, "return of DsrGetDcName, state S2559");
                this.Manager.Comment("reaching state \'S3423\'");
                goto label265;
            }
            if ((temp1335 == 1)) {
                this.Manager.Comment("reaching state \'S1543\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1333;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1333 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2560\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1333, "return of DsrGetDcNameEx2, state S2560");
                this.Manager.Comment("reaching state \'S3424\'");
                goto label265;
            }
            if ((temp1335 == 2)) {
                this.Manager.Comment("reaching state \'S1544\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1334;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1334 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2561\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1334, "return of DsrGetDcNameEx2, state S2561");
                this.Manager.Comment("reaching state \'S3425\'");
                goto label265;
            }
            throw new InvalidOperationException("never reached");
        label265:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS576GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S577");
        }
        
        private void Test_LocateDc_DsrGetDcNameS576GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S577");
        }
        
        private void Test_LocateDc_DsrGetDcNameS576GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S577");
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS578() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS578");
            this.Manager.Comment("reaching state \'S578\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1336;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1336);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1336);
            this.Manager.Comment("reaching state \'S579\'");
            int temp1340 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS578GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS578GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS578GetPlatformChecker2)));
            if ((temp1340 == 0)) {
                this.Manager.Comment("reaching state \'S1545\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1337;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,64)\'");
                temp1337 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2562\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1337, "return of DsrGetDcName, state S2562");
                this.Manager.Comment("reaching state \'S3426\'");
                goto label266;
            }
            if ((temp1340 == 1)) {
                this.Manager.Comment("reaching state \'S1546\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1338;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1338 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2563\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1338, "return of DsrGetDcNameEx2, state S2563");
                this.Manager.Comment("reaching state \'S3427\'");
                goto label266;
            }
            if ((temp1340 == 2)) {
                this.Manager.Comment("reaching state \'S1547\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1339;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1339 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2564\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1339, "return of DsrGetDcNameEx2, state S2564");
                this.Manager.Comment("reaching state \'S3428\'");
                goto label266;
            }
            throw new InvalidOperationException("never reached");
        label266:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS578GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S579");
        }
        
        private void Test_LocateDc_DsrGetDcNameS578GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S579");
        }
        
        private void Test_LocateDc_DsrGetDcNameS578GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S579");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS58() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS58");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1341;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1341);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1341);
            this.Manager.Comment("reaching state \'S59\'");
            int temp1345 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS58GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS58GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS58GetPlatformChecker2)));
            if ((temp1345 == 0)) {
                this.Manager.Comment("reaching state \'S765\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1342;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,65536)\'");
                temp1342 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R104884");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1782\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1342, "return of DsrGetDcNameEx2, state S1782");
                this.Manager.Comment("reaching state \'S2799\'");
                goto label267;
            }
            if ((temp1345 == 1)) {
                this.Manager.Comment("reaching state \'S766\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1343;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidFormatDomainName,Nul" +
                        "l,Null,65536)\'");
                temp1343 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R104884");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1783\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1343, "return of DsrGetDcNameEx2, state S1783");
                this.Manager.Comment("reaching state \'S2800\'");
                goto label267;
            }
            if ((temp1345 == 2)) {
                this.Manager.Comment("reaching state \'S767\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1344;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1344 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1784\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1344, "return of DsrGetDcNameEx2, state S1784");
                this.Manager.Comment("reaching state \'S2801\'");
                goto label267;
            }
            throw new InvalidOperationException("never reached");
        label267:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS58GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_LocateDc_DsrGetDcNameS58GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_LocateDc_DsrGetDcNameS58GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        #endregion
        
        #region Test Starting in S580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS580() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS580");
            this.Manager.Comment("reaching state \'S580\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1346;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1346);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1346);
            this.Manager.Comment("reaching state \'S581\'");
            int temp1350 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS580GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS580GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS580GetPlatformChecker2)));
            if ((temp1350 == 0)) {
                this.Manager.Comment("reaching state \'S1548\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1347;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,PrimaryDomainGui" +
                        "d,Null,0)\'");
                temp1347 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2565\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1347, "return of DsrGetDcName, state S2565");
                this.Manager.Comment("reaching state \'S3429\'");
                goto label268;
            }
            if ((temp1350 == 1)) {
                this.Manager.Comment("reaching state \'S1549\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1348;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1348 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2566\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1348, "return of DsrGetDcNameEx2, state S2566");
                this.Manager.Comment("reaching state \'S3430\'");
                goto label268;
            }
            if ((temp1350 == 2)) {
                this.Manager.Comment("reaching state \'S1550\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1349;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1349 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2567\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1349, "return of DsrGetDcNameEx2, state S2567");
                this.Manager.Comment("reaching state \'S3431\'");
                goto label268;
            }
            throw new InvalidOperationException("never reached");
        label268:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS580GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S581");
        }
        
        private void Test_LocateDc_DsrGetDcNameS580GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S581");
        }
        
        private void Test_LocateDc_DsrGetDcNameS580GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S581");
        }
        #endregion
        
        #region Test Starting in S582
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS582() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS582");
            this.Manager.Comment("reaching state \'S582\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1351;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1351);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1351);
            this.Manager.Comment("reaching state \'S583\'");
            int temp1355 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS582GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS582GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS582GetPlatformChecker2)));
            if ((temp1355 == 0)) {
                this.Manager.Comment("reaching state \'S1551\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1352;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,NonNull,0)\'" +
                        "");
                temp1352 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(1)), 0u);
                this.Manager.Comment("reaching state \'S2568\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1352, "return of DsrGetDcName, state S2568");
                this.Manager.Comment("reaching state \'S3432\'");
                goto label269;
            }
            if ((temp1355 == 1)) {
                this.Manager.Comment("reaching state \'S1552\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1353;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1353 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2569\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1353, "return of DsrGetDcNameEx2, state S2569");
                this.Manager.Comment("reaching state \'S3433\'");
                goto label269;
            }
            if ((temp1355 == 2)) {
                this.Manager.Comment("reaching state \'S1553\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1354;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1354 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2570\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1354, "return of DsrGetDcNameEx2, state S2570");
                this.Manager.Comment("reaching state \'S3434\'");
                goto label269;
            }
            throw new InvalidOperationException("never reached");
        label269:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS582GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S583");
        }
        
        private void Test_LocateDc_DsrGetDcNameS582GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S583");
        }
        
        private void Test_LocateDc_DsrGetDcNameS582GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S583");
        }
        #endregion
        
        #region Test Starting in S584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS584() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS584");
            this.Manager.Comment("reaching state \'S584\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1356;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1356);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1356);
            this.Manager.Comment("reaching state \'S585\'");
            int temp1360 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS584GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS584GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS584GetPlatformChecker2)));
            if ((temp1360 == 0)) {
                this.Manager.Comment("reaching state \'S1554\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1357;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,0)\'" +
                        "");
                temp1357 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2571\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1357, "return of DsrGetDcName, state S2571");
                this.Manager.Comment("reaching state \'S3435\'");
                goto label270;
            }
            if ((temp1360 == 1)) {
                this.Manager.Comment("reaching state \'S1555\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1358;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1358 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2572\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1358, "return of DsrGetDcNameEx2, state S2572");
                this.Manager.Comment("reaching state \'S3436\'");
                goto label270;
            }
            if ((temp1360 == 2)) {
                this.Manager.Comment("reaching state \'S1556\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1359;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1359 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2573\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1359, "return of DsrGetDcNameEx2, state S2573");
                this.Manager.Comment("reaching state \'S3437\'");
                goto label270;
            }
            throw new InvalidOperationException("never reached");
        label270:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS584GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S585");
        }
        
        private void Test_LocateDc_DsrGetDcNameS584GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S585");
        }
        
        private void Test_LocateDc_DsrGetDcNameS584GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S585");
        }
        #endregion
        
        #region Test Starting in S586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS586() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS586");
            this.Manager.Comment("reaching state \'S586\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1361;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1361);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1361);
            this.Manager.Comment("reaching state \'S587\'");
            int temp1365 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS586GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS586GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS586GetPlatformChecker2)));
            if ((temp1365 == 0)) {
                this.Manager.Comment("reaching state \'S1557\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1362;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,0)\'");
                temp1362 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2574\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1362, "return of DsrGetDcName, state S2574");
                this.Manager.Comment("reaching state \'S3438\'");
                goto label271;
            }
            if ((temp1365 == 1)) {
                this.Manager.Comment("reaching state \'S1558\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1363;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1363 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2575\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1363, "return of DsrGetDcNameEx2, state S2575");
                this.Manager.Comment("reaching state \'S3439\'");
                goto label271;
            }
            if ((temp1365 == 2)) {
                this.Manager.Comment("reaching state \'S1559\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1364;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1364 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2576\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1364, "return of DsrGetDcNameEx2, state S2576");
                this.Manager.Comment("reaching state \'S3440\'");
                goto label271;
            }
            throw new InvalidOperationException("never reached");
        label271:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS586GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S587");
        }
        
        private void Test_LocateDc_DsrGetDcNameS586GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S587");
        }
        
        private void Test_LocateDc_DsrGetDcNameS586GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S587");
        }
        #endregion
        
        #region Test Starting in S588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS588() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS588");
            this.Manager.Comment("reaching state \'S588\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1366;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1366);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1366);
            this.Manager.Comment("reaching state \'S589\'");
            int temp1370 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS588GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS588GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS588GetPlatformChecker2)));
            if ((temp1370 == 0)) {
                this.Manager.Comment("reaching state \'S1560\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1367;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,0)\'");
                temp1367 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2577\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1367, "return of DsrGetDcName, state S2577");
                this.Manager.Comment("reaching state \'S3441\'");
                goto label272;
            }
            if ((temp1370 == 1)) {
                this.Manager.Comment("reaching state \'S1561\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1368;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1368 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2578\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1368, "return of DsrGetDcNameEx2, state S2578");
                this.Manager.Comment("reaching state \'S3442\'");
                goto label272;
            }
            if ((temp1370 == 2)) {
                this.Manager.Comment("reaching state \'S1562\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1369;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1369 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2579\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1369, "return of DsrGetDcNameEx2, state S2579");
                this.Manager.Comment("reaching state \'S3443\'");
                goto label272;
            }
            throw new InvalidOperationException("never reached");
        label272:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS588GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S589");
        }
        
        private void Test_LocateDc_DsrGetDcNameS588GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S589");
        }
        
        private void Test_LocateDc_DsrGetDcNameS588GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S589");
        }
        #endregion
        
        #region Test Starting in S590
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS590() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS590");
            this.Manager.Comment("reaching state \'S590\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1371;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1371);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1371);
            this.Manager.Comment("reaching state \'S591\'");
            int temp1375 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS590GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS590GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS590GetPlatformChecker2)));
            if ((temp1375 == 0)) {
                this.Manager.Comment("reaching state \'S1563\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1372;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,0)\'" +
                        "");
                temp1372 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103164");
                this.Manager.Comment("reaching state \'S2580\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1372, "return of DsrGetDcName, state S2580");
                this.Manager.Comment("reaching state \'S3444\'");
                goto label273;
            }
            if ((temp1375 == 1)) {
                this.Manager.Comment("reaching state \'S1564\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1373;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1373 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2581\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1373, "return of DsrGetDcNameEx2, state S2581");
                this.Manager.Comment("reaching state \'S3445\'");
                goto label273;
            }
            if ((temp1375 == 2)) {
                this.Manager.Comment("reaching state \'S1565\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1374;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1374 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2582\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1374, "return of DsrGetDcNameEx2, state S2582");
                this.Manager.Comment("reaching state \'S3446\'");
                goto label273;
            }
            throw new InvalidOperationException("never reached");
        label273:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS590GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S591");
        }
        
        private void Test_LocateDc_DsrGetDcNameS590GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S591");
        }
        
        private void Test_LocateDc_DsrGetDcNameS590GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S591");
        }
        #endregion
        
        #region Test Starting in S592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS592() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS592");
            this.Manager.Comment("reaching state \'S592\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1376;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1376);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1376);
            this.Manager.Comment("reaching state \'S593\'");
            int temp1380 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS592GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS592GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS592GetPlatformChecker2)));
            if ((temp1380 == 0)) {
                this.Manager.Comment("reaching state \'S1566\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1377;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,TrustedDomainName,Null,Null,65536)\'");
                temp1377 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.TrustedDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2583\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1377, "return of DsrGetDcName, state S2583");
                this.Manager.Comment("reaching state \'S3447\'");
                goto label274;
            }
            if ((temp1380 == 1)) {
                this.Manager.Comment("reaching state \'S1567\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1378;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1378 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2584\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1378, "return of DsrGetDcNameEx2, state S2584");
                this.Manager.Comment("reaching state \'S3448\'");
                goto label274;
            }
            if ((temp1380 == 2)) {
                this.Manager.Comment("reaching state \'S1568\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1379;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1379 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2585\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1379, "return of DsrGetDcNameEx2, state S2585");
                this.Manager.Comment("reaching state \'S3449\'");
                goto label274;
            }
            throw new InvalidOperationException("never reached");
        label274:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS592GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S593");
        }
        
        private void Test_LocateDc_DsrGetDcNameS592GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S593");
        }
        
        private void Test_LocateDc_DsrGetDcNameS592GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S593");
        }
        #endregion
        
        #region Test Starting in S594
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS594() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS594");
            this.Manager.Comment("reaching state \'S594\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1381;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1381);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1381);
            this.Manager.Comment("reaching state \'S595\'");
            int temp1385 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS594GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS594GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS594GetPlatformChecker2)));
            if ((temp1385 == 0)) {
                this.Manager.Comment("reaching state \'S1569\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1382;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,InvalidDomainGui" +
                        "d,Null,0)\'");
                temp1382 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(1)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2586\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1382, "return of DsrGetDcName, state S2586");
                this.Manager.Comment("reaching state \'S3450\'");
                goto label275;
            }
            if ((temp1385 == 1)) {
                this.Manager.Comment("reaching state \'S1570\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1383;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1383 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2587\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1383, "return of DsrGetDcNameEx2, state S2587");
                this.Manager.Comment("reaching state \'S3451\'");
                goto label275;
            }
            if ((temp1385 == 2)) {
                this.Manager.Comment("reaching state \'S1571\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1384;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1384 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2588\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1384, "return of DsrGetDcNameEx2, state S2588");
                this.Manager.Comment("reaching state \'S3452\'");
                goto label275;
            }
            throw new InvalidOperationException("never reached");
        label275:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS594GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S595");
        }
        
        private void Test_LocateDc_DsrGetDcNameS594GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S595");
        }
        
        private void Test_LocateDc_DsrGetDcNameS594GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S595");
        }
        #endregion
        
        #region Test Starting in S596
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS596() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS596");
            this.Manager.Comment("reaching state \'S596\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1386;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1386);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1386);
            this.Manager.Comment("reaching state \'S597\'");
            int temp1390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS596GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS596GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS596GetPlatformChecker2)));
            if ((temp1390 == 0)) {
                this.Manager.Comment("reaching state \'S1572\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1387;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,TrustedDomainGui" +
                        "d,Null,0)\'");
                temp1387 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.TrustedDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2589\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1387, "return of DsrGetDcName, state S2589");
                this.Manager.Comment("reaching state \'S3453\'");
                goto label276;
            }
            if ((temp1390 == 1)) {
                this.Manager.Comment("reaching state \'S1573\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1388;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1388 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2590\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1388, "return of DsrGetDcNameEx2, state S2590");
                this.Manager.Comment("reaching state \'S3454\'");
                goto label276;
            }
            if ((temp1390 == 2)) {
                this.Manager.Comment("reaching state \'S1574\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1389;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1389 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2591\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1389, "return of DsrGetDcNameEx2, state S2591");
                this.Manager.Comment("reaching state \'S3455\'");
                goto label276;
            }
            throw new InvalidOperationException("never reached");
        label276:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS596GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S597");
        }
        
        private void Test_LocateDc_DsrGetDcNameS596GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S597");
        }
        
        private void Test_LocateDc_DsrGetDcNameS596GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S597");
        }
        #endregion
        
        #region Test Starting in S598
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS598() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS598");
            this.Manager.Comment("reaching state \'S598\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1391;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1391);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1391);
            this.Manager.Comment("reaching state \'S599\'");
            int temp1395 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS598GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS598GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS598GetPlatformChecker2)));
            if ((temp1395 == 0)) {
                this.Manager.Comment("reaching state \'S1575\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1392;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,0)\'");
                temp1392 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2592\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1392, "return of DsrGetDcName, state S2592");
                this.Manager.Comment("reaching state \'S3456\'");
                goto label277;
            }
            if ((temp1395 == 1)) {
                this.Manager.Comment("reaching state \'S1576\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1393;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1393 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2593\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1393, "return of DsrGetDcNameEx2, state S2593");
                this.Manager.Comment("reaching state \'S3457\'");
                goto label277;
            }
            if ((temp1395 == 2)) {
                this.Manager.Comment("reaching state \'S1577\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1394;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1394 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2594\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1394, "return of DsrGetDcNameEx2, state S2594");
                this.Manager.Comment("reaching state \'S3458\'");
                goto label277;
            }
            throw new InvalidOperationException("never reached");
        label277:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS598GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S599");
        }
        
        private void Test_LocateDc_DsrGetDcNameS598GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S599");
        }
        
        private void Test_LocateDc_DsrGetDcNameS598GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S599");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS6() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS6");
            this.Manager.Comment("reaching state \'S6\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1396;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1396);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1396);
            this.Manager.Comment("reaching state \'S7\'");
            int temp1400 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS6GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS6GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS6GetPlatformChecker2)));
            if ((temp1400 == 0)) {
                this.Manager.Comment("reaching state \'S687\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1397;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,4096,FqdnFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp1397 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 4096u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1704\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1397, "return of DsrGetDcNameEx2, state S1704");
                this.Manager.Comment("reaching state \'S2721\'");
                goto label278;
            }
            if ((temp1400 == 1)) {
                this.Manager.Comment("reaching state \'S688\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1398;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,4096,FqdnFormatDomainName,Nul" +
                        "l,Null,0)\'");
                temp1398 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 4096u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1705\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1398, "return of DsrGetDcNameEx2, state S1705");
                this.Manager.Comment("reaching state \'S2722\'");
                goto label278;
            }
            if ((temp1400 == 2)) {
                this.Manager.Comment("reaching state \'S689\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1399;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1399 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1706\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1399, "return of DsrGetDcNameEx2, state S1706");
                this.Manager.Comment("reaching state \'S2723\'");
                goto label278;
            }
            throw new InvalidOperationException("never reached");
        label278:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS6GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_LocateDc_DsrGetDcNameS6GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_LocateDc_DsrGetDcNameS6GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS60() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS60");
            this.Manager.Comment("reaching state \'S60\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1401;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1401);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1401);
            this.Manager.Comment("reaching state \'S61\'");
            int temp1405 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS60GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS60GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS60GetPlatformChecker2)));
            if ((temp1405 == 0)) {
                this.Manager.Comment("reaching state \'S768\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1402;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,65536)\'");
                temp1402 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1785\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1402, "return of DsrGetDcNameEx2, state S1785");
                this.Manager.Comment("reaching state \'S2802\'");
                goto label279;
            }
            if ((temp1405 == 1)) {
                this.Manager.Comment("reaching state \'S769\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1403;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,NetBiosFormatDomainName,Nul" +
                        "l,Null,65536)\'");
                temp1403 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1786\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1403, "return of DsrGetDcNameEx2, state S1786");
                this.Manager.Comment("reaching state \'S2803\'");
                goto label279;
            }
            if ((temp1405 == 2)) {
                this.Manager.Comment("reaching state \'S770\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1404;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1404 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1787\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1404, "return of DsrGetDcNameEx2, state S1787");
                this.Manager.Comment("reaching state \'S2804\'");
                goto label279;
            }
            throw new InvalidOperationException("never reached");
        label279:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS60GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_LocateDc_DsrGetDcNameS60GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_LocateDc_DsrGetDcNameS60GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        #endregion
        
        #region Test Starting in S600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS600() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS600");
            this.Manager.Comment("reaching state \'S600\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1406;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1406);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1406);
            this.Manager.Comment("reaching state \'S601\'");
            int temp1410 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS600GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS600GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS600GetPlatformChecker2)));
            if ((temp1410 == 0)) {
                this.Manager.Comment("reaching state \'S1578\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1407;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,64)" +
                        "\'");
                temp1407 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2595\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1407, "return of DsrGetDcName, state S2595");
                this.Manager.Comment("reaching state \'S3459\'");
                goto label280;
            }
            if ((temp1410 == 1)) {
                this.Manager.Comment("reaching state \'S1579\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1408;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1408 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2596\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1408, "return of DsrGetDcNameEx2, state S2596");
                this.Manager.Comment("reaching state \'S3460\'");
                goto label280;
            }
            if ((temp1410 == 2)) {
                this.Manager.Comment("reaching state \'S1580\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1409;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1409 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2597\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1409, "return of DsrGetDcNameEx2, state S2597");
                this.Manager.Comment("reaching state \'S3461\'");
                goto label280;
            }
            throw new InvalidOperationException("never reached");
        label280:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS600GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S601");
        }
        
        private void Test_LocateDc_DsrGetDcNameS600GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S601");
        }
        
        private void Test_LocateDc_DsrGetDcNameS600GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S601");
        }
        #endregion
        
        #region Test Starting in S602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS602() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS602");
            this.Manager.Comment("reaching state \'S602\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1411;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1411);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1411);
            this.Manager.Comment("reaching state \'S603\'");
            int temp1415 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS602GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS602GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS602GetPlatformChecker2)));
            if ((temp1415 == 0)) {
                this.Manager.Comment("reaching state \'S1581\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1412;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,64)\'");
                temp1412 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2598\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1412, "return of DsrGetDcName, state S2598");
                this.Manager.Comment("reaching state \'S3462\'");
                goto label281;
            }
            if ((temp1415 == 1)) {
                this.Manager.Comment("reaching state \'S1582\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1413;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1413 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2599\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1413, "return of DsrGetDcNameEx2, state S2599");
                this.Manager.Comment("reaching state \'S3463\'");
                goto label281;
            }
            if ((temp1415 == 2)) {
                this.Manager.Comment("reaching state \'S1583\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1414;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1414 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2600\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1414, "return of DsrGetDcNameEx2, state S2600");
                this.Manager.Comment("reaching state \'S3464\'");
                goto label281;
            }
            throw new InvalidOperationException("never reached");
        label281:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS602GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S603");
        }
        
        private void Test_LocateDc_DsrGetDcNameS602GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S603");
        }
        
        private void Test_LocateDc_DsrGetDcNameS602GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S603");
        }
        #endregion
        
        #region Test Starting in S604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS604() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS604");
            this.Manager.Comment("reaching state \'S604\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1416;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1416);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1416);
            this.Manager.Comment("reaching state \'S605\'");
            int temp1420 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS604GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS604GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS604GetPlatformChecker2)));
            if ((temp1420 == 0)) {
                this.Manager.Comment("reaching state \'S1584\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1417;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,64)\'");
                temp1417 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103161");
                this.Manager.Comment("reaching state \'S2601\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1417, "return of DsrGetDcName, state S2601");
                this.Manager.Comment("reaching state \'S3465\'");
                goto label282;
            }
            if ((temp1420 == 1)) {
                this.Manager.Comment("reaching state \'S1585\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1418;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1418 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2602\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1418, "return of DsrGetDcNameEx2, state S2602");
                this.Manager.Comment("reaching state \'S3466\'");
                goto label282;
            }
            if ((temp1420 == 2)) {
                this.Manager.Comment("reaching state \'S1586\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1419;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1419 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2603\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1419, "return of DsrGetDcNameEx2, state S2603");
                this.Manager.Comment("reaching state \'S3467\'");
                goto label282;
            }
            throw new InvalidOperationException("never reached");
        label282:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS604GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S605");
        }
        
        private void Test_LocateDc_DsrGetDcNameS604GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S605");
        }
        
        private void Test_LocateDc_DsrGetDcNameS604GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S605");
        }
        #endregion
        
        #region Test Starting in S606
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS606() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS606");
            this.Manager.Comment("reaching state \'S606\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1421;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1421);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1421);
            this.Manager.Comment("reaching state \'S607\'");
            int temp1425 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS606GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS606GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS606GetPlatformChecker2)));
            if ((temp1425 == 0)) {
                this.Manager.Comment("reaching state \'S1587\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1422;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,64)" +
                        "\'");
                temp1422 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Checkpoint("MS-NRPC_R103164");
                this.Manager.Comment("reaching state \'S2604\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1422, "return of DsrGetDcName, state S2604");
                this.Manager.Comment("reaching state \'S3468\'");
                goto label283;
            }
            if ((temp1425 == 1)) {
                this.Manager.Comment("reaching state \'S1588\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1423;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1423 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2605\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1423, "return of DsrGetDcNameEx2, state S2605");
                this.Manager.Comment("reaching state \'S3469\'");
                goto label283;
            }
            if ((temp1425 == 2)) {
                this.Manager.Comment("reaching state \'S1589\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1424;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1424 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2606\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1424, "return of DsrGetDcNameEx2, state S2606");
                this.Manager.Comment("reaching state \'S3470\'");
                goto label283;
            }
            throw new InvalidOperationException("never reached");
        label283:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS606GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S607");
        }
        
        private void Test_LocateDc_DsrGetDcNameS606GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S607");
        }
        
        private void Test_LocateDc_DsrGetDcNameS606GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S607");
        }
        #endregion
        
        #region Test Starting in S608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS608() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS608");
            this.Manager.Comment("reaching state \'S608\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1426;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1426);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1426);
            this.Manager.Comment("reaching state \'S609\'");
            int temp1430 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS608GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS608GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS608GetPlatformChecker2)));
            if ((temp1430 == 0)) {
                this.Manager.Comment("reaching state \'S1590\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1427;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,64)\'");
                temp1427 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 64u);
                this.Manager.Comment("reaching state \'S2607\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1427, "return of DsrGetDcName, state S2607");
                this.Manager.Comment("reaching state \'S3471\'");
                goto label284;
            }
            if ((temp1430 == 1)) {
                this.Manager.Comment("reaching state \'S1591\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1428;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1428 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2608\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1428, "return of DsrGetDcNameEx2, state S2608");
                this.Manager.Comment("reaching state \'S3472\'");
                goto label284;
            }
            if ((temp1430 == 2)) {
                this.Manager.Comment("reaching state \'S1592\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1429;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1429 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2609\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1429, "return of DsrGetDcNameEx2, state S2609");
                this.Manager.Comment("reaching state \'S3473\'");
                goto label284;
            }
            throw new InvalidOperationException("never reached");
        label284:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS608GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S609");
        }
        
        private void Test_LocateDc_DsrGetDcNameS608GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S609");
        }
        
        private void Test_LocateDc_DsrGetDcNameS608GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S609");
        }
        #endregion
        
        #region Test Starting in S610
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS610() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS610");
            this.Manager.Comment("reaching state \'S610\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1431;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1431);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1431);
            this.Manager.Comment("reaching state \'S611\'");
            int temp1435 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS610GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS610GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS610GetPlatformChecker2)));
            if ((temp1435 == 0)) {
                this.Manager.Comment("reaching state \'S1593\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1432;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,655" +
                        "36)\'");
                temp1432 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2610\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1432, "return of DsrGetDcName, state S2610");
                this.Manager.Comment("reaching state \'S3474\'");
                goto label285;
            }
            if ((temp1435 == 1)) {
                this.Manager.Comment("reaching state \'S1594\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1433;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1433 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2611\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1433, "return of DsrGetDcNameEx2, state S2611");
                this.Manager.Comment("reaching state \'S3475\'");
                goto label285;
            }
            if ((temp1435 == 2)) {
                this.Manager.Comment("reaching state \'S1595\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1434;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1434 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2612\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1434, "return of DsrGetDcNameEx2, state S2612");
                this.Manager.Comment("reaching state \'S3476\'");
                goto label285;
            }
            throw new InvalidOperationException("never reached");
        label285:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS610GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S611");
        }
        
        private void Test_LocateDc_DsrGetDcNameS610GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S611");
        }
        
        private void Test_LocateDc_DsrGetDcNameS610GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S611");
        }
        #endregion
        
        #region Test Starting in S612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS612() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS612");
            this.Manager.Comment("reaching state \'S612\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1436;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1436);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1436);
            this.Manager.Comment("reaching state \'S613\'");
            int temp1440 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS612GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS612GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS612GetPlatformChecker2)));
            if ((temp1440 == 0)) {
                this.Manager.Comment("reaching state \'S1596\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1437;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,Null,Null,65536)\'");
                temp1437 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2613\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1437, "return of DsrGetDcName, state S2613");
                this.Manager.Comment("reaching state \'S3477\'");
                goto label286;
            }
            if ((temp1440 == 1)) {
                this.Manager.Comment("reaching state \'S1597\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1438;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1438 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2614\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1438, "return of DsrGetDcNameEx2, state S2614");
                this.Manager.Comment("reaching state \'S3478\'");
                goto label286;
            }
            if ((temp1440 == 2)) {
                this.Manager.Comment("reaching state \'S1598\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1439;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1439 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2615\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1439, "return of DsrGetDcNameEx2, state S2615");
                this.Manager.Comment("reaching state \'S3479\'");
                goto label286;
            }
            throw new InvalidOperationException("never reached");
        label286:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS612GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S613");
        }
        
        private void Test_LocateDc_DsrGetDcNameS612GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S613");
        }
        
        private void Test_LocateDc_DsrGetDcNameS612GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S613");
        }
        #endregion
        
        #region Test Starting in S614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS614() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS614");
            this.Manager.Comment("reaching state \'S614\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1441;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1441);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1441);
            this.Manager.Comment("reaching state \'S615\'");
            int temp1445 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS614GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS614GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS614GetPlatformChecker2)));
            if ((temp1445 == 0)) {
                this.Manager.Comment("reaching state \'S1599\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1442;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,65536)\'");
                temp1442 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2616\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1442, "return of DsrGetDcName, state S2616");
                this.Manager.Comment("reaching state \'S3480\'");
                goto label287;
            }
            if ((temp1445 == 1)) {
                this.Manager.Comment("reaching state \'S1600\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1443;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1443 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2617\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1443, "return of DsrGetDcNameEx2, state S2617");
                this.Manager.Comment("reaching state \'S3481\'");
                goto label287;
            }
            if ((temp1445 == 2)) {
                this.Manager.Comment("reaching state \'S1601\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1444;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1444 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2618\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1444, "return of DsrGetDcNameEx2, state S2618");
                this.Manager.Comment("reaching state \'S3482\'");
                goto label287;
            }
            throw new InvalidOperationException("never reached");
        label287:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS614GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S615");
        }
        
        private void Test_LocateDc_DsrGetDcNameS614GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S615");
        }
        
        private void Test_LocateDc_DsrGetDcNameS614GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S615");
        }
        #endregion
        
        #region Test Starting in S616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS616() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS616");
            this.Manager.Comment("reaching state \'S616\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1446;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1446);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1446);
            this.Manager.Comment("reaching state \'S617\'");
            int temp1450 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS616GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS616GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS616GetPlatformChecker2)));
            if ((temp1450 == 0)) {
                this.Manager.Comment("reaching state \'S1602\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1447;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,NetBiosFormatDomainName,Null,Null,655" +
                        "36)\'");
                temp1447 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.NetBiosFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2619\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1447, "return of DsrGetDcName, state S2619");
                this.Manager.Comment("reaching state \'S3483\'");
                goto label288;
            }
            if ((temp1450 == 1)) {
                this.Manager.Comment("reaching state \'S1603\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1448;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1448 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2620\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1448, "return of DsrGetDcNameEx2, state S2620");
                this.Manager.Comment("reaching state \'S3484\'");
                goto label288;
            }
            if ((temp1450 == 2)) {
                this.Manager.Comment("reaching state \'S1604\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1449;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1449 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2621\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1449, "return of DsrGetDcNameEx2, state S2621");
                this.Manager.Comment("reaching state \'S3485\'");
                goto label288;
            }
            throw new InvalidOperationException("never reached");
        label288:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS616GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S617");
        }
        
        private void Test_LocateDc_DsrGetDcNameS616GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S617");
        }
        
        private void Test_LocateDc_DsrGetDcNameS616GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S617");
        }
        #endregion
        
        #region Test Starting in S618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS618() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS618");
            this.Manager.Comment("reaching state \'S618\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1451;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1451);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1451);
            this.Manager.Comment("reaching state \'S619\'");
            int temp1455 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS618GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS618GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS618GetPlatformChecker2)));
            if ((temp1455 == 0)) {
                this.Manager.Comment("reaching state \'S1605\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1452;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidDomainName,PrimaryDomainGuid,N" +
                        "ull,0)\'");
                temp1452 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 0u);
                this.Manager.Comment("reaching state \'S2622\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1452, "return of DsrGetDcName, state S2622");
                this.Manager.Comment("reaching state \'S3486\'");
                goto label289;
            }
            if ((temp1455 == 1)) {
                this.Manager.Comment("reaching state \'S1606\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1453;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1453 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2623\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1453, "return of DsrGetDcNameEx2, state S2623");
                this.Manager.Comment("reaching state \'S3487\'");
                goto label289;
            }
            if ((temp1455 == 2)) {
                this.Manager.Comment("reaching state \'S1607\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1454;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1454 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2624\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1454, "return of DsrGetDcNameEx2, state S2624");
                this.Manager.Comment("reaching state \'S3488\'");
                goto label289;
            }
            throw new InvalidOperationException("never reached");
        label289:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS618GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S619");
        }
        
        private void Test_LocateDc_DsrGetDcNameS618GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S619");
        }
        
        private void Test_LocateDc_DsrGetDcNameS618GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S619");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS62() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS62");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1456;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1456);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1456);
            this.Manager.Comment("reaching state \'S63\'");
            int temp1460 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS62GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS62GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS62GetPlatformChecker2)));
            if ((temp1460 == 0)) {
                this.Manager.Comment("reaching state \'S771\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1457;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,65536)\'");
                temp1457 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1788\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1457, "return of DsrGetDcNameEx2, state S1788");
                this.Manager.Comment("reaching state \'S2805\'");
                goto label290;
            }
            if ((temp1460 == 1)) {
                this.Manager.Comment("reaching state \'S772\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1458;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,Null,Null,Null,65536)\'");
                temp1458 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1789\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1458, "return of DsrGetDcNameEx2, state S1789");
                this.Manager.Comment("reaching state \'S2806\'");
                goto label290;
            }
            if ((temp1460 == 2)) {
                this.Manager.Comment("reaching state \'S773\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1459;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1459 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1790\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1459, "return of DsrGetDcNameEx2, state S1790");
                this.Manager.Comment("reaching state \'S2807\'");
                goto label290;
            }
            throw new InvalidOperationException("never reached");
        label290:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS62GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_LocateDc_DsrGetDcNameS62GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_LocateDc_DsrGetDcNameS62GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        #endregion
        
        #region Test Starting in S620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS620() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS620");
            this.Manager.Comment("reaching state \'S620\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1461;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1461);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1461);
            this.Manager.Comment("reaching state \'S621\'");
            int temp1465 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS620GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS620GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS620GetPlatformChecker2)));
            if ((temp1465 == 0)) {
                this.Manager.Comment("reaching state \'S1608\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1462;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,65536)" +
                        "\'");
                temp1462 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 65536u);
                this.Manager.Comment("reaching state \'S2625\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1462, "return of DsrGetDcName, state S2625");
                this.Manager.Comment("reaching state \'S3489\'");
                goto label291;
            }
            if ((temp1465 == 1)) {
                this.Manager.Comment("reaching state \'S1609\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1463;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1463 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2626\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1463, "return of DsrGetDcNameEx2, state S2626");
                this.Manager.Comment("reaching state \'S3490\'");
                goto label291;
            }
            if ((temp1465 == 2)) {
                this.Manager.Comment("reaching state \'S1610\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1464;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1464 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2627\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1464, "return of DsrGetDcNameEx2, state S2627");
                this.Manager.Comment("reaching state \'S3491\'");
                goto label291;
            }
            throw new InvalidOperationException("never reached");
        label291:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS620GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S621");
        }
        
        private void Test_LocateDc_DsrGetDcNameS620GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S621");
        }
        
        private void Test_LocateDc_DsrGetDcNameS620GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S621");
        }
        #endregion
        
        #region Test Starting in S622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS622() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS622");
            this.Manager.Comment("reaching state \'S622\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1466;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1466);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1466);
            this.Manager.Comment("reaching state \'S623\'");
            int temp1470 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS622GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS622GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS622GetPlatformChecker2)));
            if ((temp1470 == 0)) {
                this.Manager.Comment("reaching state \'S1611\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1467;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,131" +
                        "072)\'");
                temp1467 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2628\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1467, "return of DsrGetDcName, state S2628");
                this.Manager.Comment("reaching state \'S3492\'");
                goto label292;
            }
            if ((temp1470 == 1)) {
                this.Manager.Comment("reaching state \'S1612\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1468;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1468 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2629\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1468, "return of DsrGetDcNameEx2, state S2629");
                this.Manager.Comment("reaching state \'S3493\'");
                goto label292;
            }
            if ((temp1470 == 2)) {
                this.Manager.Comment("reaching state \'S1613\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1469;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1469 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2630\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1469, "return of DsrGetDcNameEx2, state S2630");
                this.Manager.Comment("reaching state \'S3494\'");
                goto label292;
            }
            throw new InvalidOperationException("never reached");
        label292:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS622GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S623");
        }
        
        private void Test_LocateDc_DsrGetDcNameS622GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S623");
        }
        
        private void Test_LocateDc_DsrGetDcNameS622GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S623");
        }
        #endregion
        
        #region Test Starting in S624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS624() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS624");
            this.Manager.Comment("reaching state \'S624\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1471;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1471);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1471);
            this.Manager.Comment("reaching state \'S625\'");
            int temp1475 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS624GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS624GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS624GetPlatformChecker2)));
            if ((temp1475 == 0)) {
                this.Manager.Comment("reaching state \'S1614\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1472;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,131" +
                        "072)\'");
                temp1472 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2631\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1472, "return of DsrGetDcName, state S2631");
                this.Manager.Comment("reaching state \'S3495\'");
                goto label293;
            }
            if ((temp1475 == 1)) {
                this.Manager.Comment("reaching state \'S1615\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1473;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1473 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2632\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1473, "return of DsrGetDcNameEx2, state S2632");
                this.Manager.Comment("reaching state \'S3496\'");
                goto label293;
            }
            if ((temp1475 == 2)) {
                this.Manager.Comment("reaching state \'S1616\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1474;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1474 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2633\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1474, "return of DsrGetDcNameEx2, state S2633");
                this.Manager.Comment("reaching state \'S3497\'");
                goto label293;
            }
            throw new InvalidOperationException("never reached");
        label293:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS624GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S625");
        }
        
        private void Test_LocateDc_DsrGetDcNameS624GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S625");
        }
        
        private void Test_LocateDc_DsrGetDcNameS624GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S625");
        }
        #endregion
        
        #region Test Starting in S626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS626() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS626");
            this.Manager.Comment("reaching state \'S626\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1476;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1476);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1476);
            this.Manager.Comment("reaching state \'S627\'");
            int temp1480 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS626GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS626GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS626GetPlatformChecker2)));
            if ((temp1480 == 0)) {
                this.Manager.Comment("reaching state \'S1617\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1477;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,Null,Null,Null,131072)\'");
                temp1477 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.DomainNameType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2634\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1477, "return of DsrGetDcName, state S2634");
                this.Manager.Comment("reaching state \'S3498\'");
                goto label294;
            }
            if ((temp1480 == 1)) {
                this.Manager.Comment("reaching state \'S1618\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1478;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1478 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2635\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1478, "return of DsrGetDcNameEx2, state S2635");
                this.Manager.Comment("reaching state \'S3499\'");
                goto label294;
            }
            if ((temp1480 == 2)) {
                this.Manager.Comment("reaching state \'S1619\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1479;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1479 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2636\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1479, "return of DsrGetDcNameEx2, state S2636");
                this.Manager.Comment("reaching state \'S3500\'");
                goto label294;
            }
            throw new InvalidOperationException("never reached");
        label294:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS626GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S627");
        }
        
        private void Test_LocateDc_DsrGetDcNameS626GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S627");
        }
        
        private void Test_LocateDc_DsrGetDcNameS626GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S627");
        }
        #endregion
        
        #region Test Starting in S628
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS628() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS628");
            this.Manager.Comment("reaching state \'S628\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1481;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1481);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1481);
            this.Manager.Comment("reaching state \'S629\'");
            int temp1485 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS628GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS628GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS628GetPlatformChecker2)));
            if ((temp1485 == 0)) {
                this.Manager.Comment("reaching state \'S1620\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1482;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,InvalidFormatDomainName,Null,Null,131072)\'");
                temp1482 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Checkpoint("MS-NRPC_R103163");
                this.Manager.Comment("reaching state \'S2637\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_DOMAINNAME\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_DOMAINNAME, temp1482, "return of DsrGetDcName, state S2637");
                this.Manager.Comment("reaching state \'S3501\'");
                goto label295;
            }
            if ((temp1485 == 1)) {
                this.Manager.Comment("reaching state \'S1621\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1483;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1483 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2638\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1483, "return of DsrGetDcNameEx2, state S2638");
                this.Manager.Comment("reaching state \'S3502\'");
                goto label295;
            }
            if ((temp1485 == 2)) {
                this.Manager.Comment("reaching state \'S1622\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1484;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1484 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2639\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1484, "return of DsrGetDcNameEx2, state S2639");
                this.Manager.Comment("reaching state \'S3503\'");
                goto label295;
            }
            throw new InvalidOperationException("never reached");
        label295:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS628GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S629");
        }
        
        private void Test_LocateDc_DsrGetDcNameS628GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S629");
        }
        
        private void Test_LocateDc_DsrGetDcNameS628GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S629");
        }
        #endregion
        
        #region Test Starting in S630
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS630() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS630");
            this.Manager.Comment("reaching state \'S630\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1486;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1486);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1486);
            this.Manager.Comment("reaching state \'S631\'");
            int temp1490 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS630GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS630GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS630GetPlatformChecker2)));
            if ((temp1490 == 0)) {
                this.Manager.Comment("reaching state \'S1623\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1487;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1024)\'" +
                        "");
                temp1487 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1024u);
                this.Manager.Comment("reaching state \'S2640\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1487, "return of DsrGetDcName, state S2640");
                this.Manager.Comment("reaching state \'S3504\'");
                goto label296;
            }
            if ((temp1490 == 1)) {
                this.Manager.Comment("reaching state \'S1624\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1488;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1488 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2641\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1488, "return of DsrGetDcNameEx2, state S2641");
                this.Manager.Comment("reaching state \'S3505\'");
                goto label296;
            }
            if ((temp1490 == 2)) {
                this.Manager.Comment("reaching state \'S1625\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1489;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1489 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2642\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1489, "return of DsrGetDcNameEx2, state S2642");
                this.Manager.Comment("reaching state \'S3506\'");
                goto label296;
            }
            throw new InvalidOperationException("never reached");
        label296:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS630GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S631");
        }
        
        private void Test_LocateDc_DsrGetDcNameS630GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S631");
        }
        
        private void Test_LocateDc_DsrGetDcNameS630GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S631");
        }
        #endregion
        
        #region Test Starting in S632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS632() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS632");
            this.Manager.Comment("reaching state \'S632\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1491;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1491);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1491);
            this.Manager.Comment("reaching state \'S633\'");
            int temp1495 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS632GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS632GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS632GetPlatformChecker2)));
            if ((temp1495 == 0)) {
                this.Manager.Comment("reaching state \'S1626\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1492;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1152)\'" +
                        "");
                temp1492 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104824");
                this.Manager.Comment("reaching state \'S2643\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1492, "return of DsrGetDcName, state S2643");
                this.Manager.Comment("reaching state \'S3507\'");
                goto label297;
            }
            if ((temp1495 == 1)) {
                this.Manager.Comment("reaching state \'S1627\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1493;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1493 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2644\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1493, "return of DsrGetDcNameEx2, state S2644");
                this.Manager.Comment("reaching state \'S3508\'");
                goto label297;
            }
            if ((temp1495 == 2)) {
                this.Manager.Comment("reaching state \'S1628\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1494;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1494 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2645\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1494, "return of DsrGetDcNameEx2, state S2645");
                this.Manager.Comment("reaching state \'S3509\'");
                goto label297;
            }
            throw new InvalidOperationException("never reached");
        label297:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS632GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S633");
        }
        
        private void Test_LocateDc_DsrGetDcNameS632GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S633");
        }
        
        private void Test_LocateDc_DsrGetDcNameS632GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S633");
        }
        #endregion
        
        #region Test Starting in S634
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS634() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS634");
            this.Manager.Comment("reaching state \'S634\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1496;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1496);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1496);
            this.Manager.Comment("reaching state \'S635\'");
            int temp1500 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS634GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS634GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS634GetPlatformChecker2)));
            if ((temp1500 == 0)) {
                this.Manager.Comment("reaching state \'S1629\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1497;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1088)\'" +
                        "");
                temp1497 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104822");
                this.Manager.Comment("reaching state \'S2646\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1497, "return of DsrGetDcName, state S2646");
                this.Manager.Comment("reaching state \'S3510\'");
                goto label298;
            }
            if ((temp1500 == 1)) {
                this.Manager.Comment("reaching state \'S1630\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1498;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1498 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2647\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1498, "return of DsrGetDcNameEx2, state S2647");
                this.Manager.Comment("reaching state \'S3511\'");
                goto label298;
            }
            if ((temp1500 == 2)) {
                this.Manager.Comment("reaching state \'S1631\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1499;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1499 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2648\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1499, "return of DsrGetDcNameEx2, state S2648");
                this.Manager.Comment("reaching state \'S3512\'");
                goto label298;
            }
            throw new InvalidOperationException("never reached");
        label298:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS634GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S635");
        }
        
        private void Test_LocateDc_DsrGetDcNameS634GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S635");
        }
        
        private void Test_LocateDc_DsrGetDcNameS634GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S635");
        }
        #endregion
        
        #region Test Starting in S636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS636() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS636");
            this.Manager.Comment("reaching state \'S636\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1501;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1501);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1501);
            this.Manager.Comment("reaching state \'S637\'");
            int temp1505 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS636GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS636GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS636GetPlatformChecker2)));
            if ((temp1505 == 0)) {
                this.Manager.Comment("reaching state \'S1632\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1502;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,1)\'");
                temp1502 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1u);
                this.Manager.Comment("reaching state \'S2649\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1502, "return of DsrGetDcName, state S2649");
                this.Manager.Comment("reaching state \'S3513\'");
                goto label299;
            }
            if ((temp1505 == 1)) {
                this.Manager.Comment("reaching state \'S1633\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1503;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1503 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2650\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1503, "return of DsrGetDcNameEx2, state S2650");
                this.Manager.Comment("reaching state \'S3514\'");
                goto label299;
            }
            if ((temp1505 == 2)) {
                this.Manager.Comment("reaching state \'S1634\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1504;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1504 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2651\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1504, "return of DsrGetDcNameEx2, state S2651");
                this.Manager.Comment("reaching state \'S3515\'");
                goto label299;
            }
            throw new InvalidOperationException("never reached");
        label299:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS636GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S637");
        }
        
        private void Test_LocateDc_DsrGetDcNameS636GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S637");
        }
        
        private void Test_LocateDc_DsrGetDcNameS636GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S637");
        }
        #endregion
        
        #region Test Starting in S638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS638() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS638");
            this.Manager.Comment("reaching state \'S638\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1506;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1506);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1506);
            this.Manager.Comment("reaching state \'S639\'");
            int temp1510 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS638GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS638GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS638GetPlatformChecker2)));
            if ((temp1510 == 0)) {
                this.Manager.Comment("reaching state \'S1635\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1507;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,16)\'");
                temp1507 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 16u);
                this.Manager.Comment("reaching state \'S2652\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1507, "return of DsrGetDcName, state S2652");
                this.Manager.Comment("reaching state \'S3516\'");
                goto label300;
            }
            if ((temp1510 == 1)) {
                this.Manager.Comment("reaching state \'S1636\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1508;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1508 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2653\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1508, "return of DsrGetDcNameEx2, state S2653");
                this.Manager.Comment("reaching state \'S3517\'");
                goto label300;
            }
            if ((temp1510 == 2)) {
                this.Manager.Comment("reaching state \'S1637\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1509;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1509 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2654\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1509, "return of DsrGetDcNameEx2, state S2654");
                this.Manager.Comment("reaching state \'S3518\'");
                goto label300;
            }
            throw new InvalidOperationException("never reached");
        label300:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS638GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S639");
        }
        
        private void Test_LocateDc_DsrGetDcNameS638GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S639");
        }
        
        private void Test_LocateDc_DsrGetDcNameS638GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S639");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS64() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS64");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1511;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1511);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1511);
            this.Manager.Comment("reaching state \'S65\'");
            int temp1515 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS64GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS64GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS64GetPlatformChecker2)));
            if ((temp1515 == 0)) {
                this.Manager.Comment("reaching state \'S774\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1512;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",65536)\'");
                temp1512 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1791\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1512, "return of DsrGetDcNameEx2, state S1791");
                this.Manager.Comment("reaching state \'S2808\'");
                goto label301;
            }
            if ((temp1515 == 1)) {
                this.Manager.Comment("reaching state \'S775\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1513;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,Null,Null" +
                        ",65536)\'");
                temp1513 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 65536u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1792\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1513, "return of DsrGetDcNameEx2, state S1792");
                this.Manager.Comment("reaching state \'S2809\'");
                goto label301;
            }
            if ((temp1515 == 2)) {
                this.Manager.Comment("reaching state \'S776\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1514;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1514 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1793\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1514, "return of DsrGetDcNameEx2, state S1793");
                this.Manager.Comment("reaching state \'S2810\'");
                goto label301;
            }
            throw new InvalidOperationException("never reached");
        label301:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS64GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_LocateDc_DsrGetDcNameS64GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_LocateDc_DsrGetDcNameS64GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        #endregion
        
        #region Test Starting in S640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS640() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS640");
            this.Manager.Comment("reaching state \'S640\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1516;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1516);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1516);
            this.Manager.Comment("reaching state \'S641\'");
            int temp1520 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS640GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS640GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS640GetPlatformChecker2)));
            if ((temp1520 == 0)) {
                this.Manager.Comment("reaching state \'S1638\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1517;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,32)\'");
                temp1517 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 32u);
                this.Manager.Comment("reaching state \'S2655\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1517, "return of DsrGetDcName, state S2655");
                this.Manager.Comment("reaching state \'S3519\'");
                goto label302;
            }
            if ((temp1520 == 1)) {
                this.Manager.Comment("reaching state \'S1639\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1518;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1518 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2656\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1518, "return of DsrGetDcNameEx2, state S2656");
                this.Manager.Comment("reaching state \'S3520\'");
                goto label302;
            }
            if ((temp1520 == 2)) {
                this.Manager.Comment("reaching state \'S1640\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1519;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1519 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2657\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1519, "return of DsrGetDcNameEx2, state S2657");
                this.Manager.Comment("reaching state \'S3521\'");
                goto label302;
            }
            throw new InvalidOperationException("never reached");
        label302:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS640GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S641");
        }
        
        private void Test_LocateDc_DsrGetDcNameS640GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S641");
        }
        
        private void Test_LocateDc_DsrGetDcNameS640GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S641");
        }
        #endregion
        
        #region Test Starting in S642
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS642() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS642");
            this.Manager.Comment("reaching state \'S642\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1521;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1521);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1521);
            this.Manager.Comment("reaching state \'S643\'");
            int temp1525 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS642GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS642GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS642GetPlatformChecker2)));
            if ((temp1525 == 0)) {
                this.Manager.Comment("reaching state \'S1641\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1522;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,256)\'");
                temp1522 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 256u);
                this.Manager.Comment("reaching state \'S2658\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1522, "return of DsrGetDcName, state S2658");
                this.Manager.Comment("reaching state \'S3522\'");
                goto label303;
            }
            if ((temp1525 == 1)) {
                this.Manager.Comment("reaching state \'S1642\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1523;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1523 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2659\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1523, "return of DsrGetDcNameEx2, state S2659");
                this.Manager.Comment("reaching state \'S3523\'");
                goto label303;
            }
            if ((temp1525 == 2)) {
                this.Manager.Comment("reaching state \'S1643\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1524;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1524 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2660\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1524, "return of DsrGetDcNameEx2, state S2660");
                this.Manager.Comment("reaching state \'S3524\'");
                goto label303;
            }
            throw new InvalidOperationException("never reached");
        label303:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS642GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S643");
        }
        
        private void Test_LocateDc_DsrGetDcNameS642GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S643");
        }
        
        private void Test_LocateDc_DsrGetDcNameS642GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S643");
        }
        #endregion
        
        #region Test Starting in S644
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS644() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS644");
            this.Manager.Comment("reaching state \'S644\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1526;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1526);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1526);
            this.Manager.Comment("reaching state \'S645\'");
            int temp1530 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS644GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS644GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS644GetPlatformChecker2)));
            if ((temp1530 == 0)) {
                this.Manager.Comment("reaching state \'S1644\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1527;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,512)\'");
                temp1527 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 512u);
                this.Manager.Comment("reaching state \'S2661\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1527, "return of DsrGetDcName, state S2661");
                this.Manager.Comment("reaching state \'S3525\'");
                goto label304;
            }
            if ((temp1530 == 1)) {
                this.Manager.Comment("reaching state \'S1645\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1528;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1528 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2662\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1528, "return of DsrGetDcNameEx2, state S2662");
                this.Manager.Comment("reaching state \'S3526\'");
                goto label304;
            }
            if ((temp1530 == 2)) {
                this.Manager.Comment("reaching state \'S1646\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1529;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1529 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2663\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1529, "return of DsrGetDcNameEx2, state S2663");
                this.Manager.Comment("reaching state \'S3527\'");
                goto label304;
            }
            throw new InvalidOperationException("never reached");
        label304:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS644GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S645");
        }
        
        private void Test_LocateDc_DsrGetDcNameS644GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S645");
        }
        
        private void Test_LocateDc_DsrGetDcNameS644GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S645");
        }
        #endregion
        
        #region Test Starting in S646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS646() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS646");
            this.Manager.Comment("reaching state \'S646\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1531;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1531);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1531);
            this.Manager.Comment("reaching state \'S647\'");
            int temp1535 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS646GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS646GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS646GetPlatformChecker2)));
            if ((temp1535 == 0)) {
                this.Manager.Comment("reaching state \'S1647\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1532;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,2048)\'" +
                        "");
                temp1532 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 2048u);
                this.Manager.Comment("reaching state \'S2664\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1532, "return of DsrGetDcName, state S2664");
                this.Manager.Comment("reaching state \'S3528\'");
                goto label305;
            }
            if ((temp1535 == 1)) {
                this.Manager.Comment("reaching state \'S1648\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1533;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1533 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2665\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1533, "return of DsrGetDcNameEx2, state S2665");
                this.Manager.Comment("reaching state \'S3529\'");
                goto label305;
            }
            if ((temp1535 == 2)) {
                this.Manager.Comment("reaching state \'S1649\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1534;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1534 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2666\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1534, "return of DsrGetDcNameEx2, state S2666");
                this.Manager.Comment("reaching state \'S3530\'");
                goto label305;
            }
            throw new InvalidOperationException("never reached");
        label305:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS646GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S647");
        }
        
        private void Test_LocateDc_DsrGetDcNameS646GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S647");
        }
        
        private void Test_LocateDc_DsrGetDcNameS646GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S647");
        }
        #endregion
        
        #region Test Starting in S648
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS648() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS648");
            this.Manager.Comment("reaching state \'S648\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1536;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1536);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1536);
            this.Manager.Comment("reaching state \'S649\'");
            int temp1540 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS648GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS648GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS648GetPlatformChecker2)));
            if ((temp1540 == 0)) {
                this.Manager.Comment("reaching state \'S1650\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1537;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,322122" +
                        "5472)\'");
                temp1537 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104826");
                this.Manager.Comment("reaching state \'S2667\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1537, "return of DsrGetDcName, state S2667");
                this.Manager.Comment("reaching state \'S3531\'");
                goto label306;
            }
            if ((temp1540 == 1)) {
                this.Manager.Comment("reaching state \'S1651\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1538;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1538 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2668\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1538, "return of DsrGetDcNameEx2, state S2668");
                this.Manager.Comment("reaching state \'S3532\'");
                goto label306;
            }
            if ((temp1540 == 2)) {
                this.Manager.Comment("reaching state \'S1652\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1539;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1539 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2669\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1539, "return of DsrGetDcNameEx2, state S2669");
                this.Manager.Comment("reaching state \'S3533\'");
                goto label306;
            }
            throw new InvalidOperationException("never reached");
        label306:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS648GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S649");
        }
        
        private void Test_LocateDc_DsrGetDcNameS648GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S649");
        }
        
        private void Test_LocateDc_DsrGetDcNameS648GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S649");
        }
        #endregion
        
        #region Test Starting in S650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS650() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS650");
            this.Manager.Comment("reaching state \'S650\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1541;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1541);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1541);
            this.Manager.Comment("reaching state \'S651\'");
            int temp1545 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS650GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS650GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS650GetPlatformChecker2)));
            if ((temp1545 == 0)) {
                this.Manager.Comment("reaching state \'S1653\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1542;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,16384)" +
                        "\'");
                temp1542 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 16384u);
                this.Manager.Comment("reaching state \'S2670\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1542, "return of DsrGetDcName, state S2670");
                this.Manager.Comment("reaching state \'S3534\'");
                goto label307;
            }
            if ((temp1545 == 1)) {
                this.Manager.Comment("reaching state \'S1654\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1543;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1543 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2671\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1543, "return of DsrGetDcNameEx2, state S2671");
                this.Manager.Comment("reaching state \'S3535\'");
                goto label307;
            }
            if ((temp1545 == 2)) {
                this.Manager.Comment("reaching state \'S1655\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1544;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1544 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2672\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1544, "return of DsrGetDcNameEx2, state S2672");
                this.Manager.Comment("reaching state \'S3536\'");
                goto label307;
            }
            throw new InvalidOperationException("never reached");
        label307:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS650GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S651");
        }
        
        private void Test_LocateDc_DsrGetDcNameS650GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S651");
        }
        
        private void Test_LocateDc_DsrGetDcNameS650GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S651");
        }
        #endregion
        
        #region Test Starting in S652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS652() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS652");
            this.Manager.Comment("reaching state \'S652\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1546;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1546);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1546);
            this.Manager.Comment("reaching state \'S653\'");
            int temp1550 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS652GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS652GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS652GetPlatformChecker2)));
            if ((temp1550 == 0)) {
                this.Manager.Comment("reaching state \'S1656\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1547;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,262144" +
                        ")\'");
                temp1547 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 262144u);
                this.Manager.Comment("reaching state \'S2673\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1547, "return of DsrGetDcName, state S2673");
                this.Manager.Comment("reaching state \'S3537\'");
                goto label308;
            }
            if ((temp1550 == 1)) {
                this.Manager.Comment("reaching state \'S1657\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1548;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1548 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2674\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1548, "return of DsrGetDcNameEx2, state S2674");
                this.Manager.Comment("reaching state \'S3538\'");
                goto label308;
            }
            if ((temp1550 == 2)) {
                this.Manager.Comment("reaching state \'S1658\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1549;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1549 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2675\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1549, "return of DsrGetDcNameEx2, state S2675");
                this.Manager.Comment("reaching state \'S3539\'");
                goto label308;
            }
            throw new InvalidOperationException("never reached");
        label308:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS652GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S653");
        }
        
        private void Test_LocateDc_DsrGetDcNameS652GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S653");
        }
        
        private void Test_LocateDc_DsrGetDcNameS652GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S653");
        }
        #endregion
        
        #region Test Starting in S654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS654() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS654");
            this.Manager.Comment("reaching state \'S654\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1551;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1551);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1551);
            this.Manager.Comment("reaching state \'S655\'");
            int temp1555 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS654GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS654GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS654GetPlatformChecker2)));
            if ((temp1555 == 0)) {
                this.Manager.Comment("reaching state \'S1659\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1552;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,107374" +
                        "1824)\'");
                temp1552 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1073741824u);
                this.Manager.Comment("reaching state \'S2676\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1552, "return of DsrGetDcName, state S2676");
                this.Manager.Comment("reaching state \'S3540\'");
                goto label309;
            }
            if ((temp1555 == 1)) {
                this.Manager.Comment("reaching state \'S1660\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1553;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1553 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2677\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1553, "return of DsrGetDcNameEx2, state S2677");
                this.Manager.Comment("reaching state \'S3541\'");
                goto label309;
            }
            if ((temp1555 == 2)) {
                this.Manager.Comment("reaching state \'S1661\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1554;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1554 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2678\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1554, "return of DsrGetDcNameEx2, state S2678");
                this.Manager.Comment("reaching state \'S3542\'");
                goto label309;
            }
            throw new InvalidOperationException("never reached");
        label309:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS654GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S655");
        }
        
        private void Test_LocateDc_DsrGetDcNameS654GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S655");
        }
        
        private void Test_LocateDc_DsrGetDcNameS654GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S655");
        }
        #endregion
        
        #region Test Starting in S656
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS656() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS656");
            this.Manager.Comment("reaching state \'S656\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1556;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1556);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1556);
            this.Manager.Comment("reaching state \'S657\'");
            int temp1560 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS656GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS656GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS656GetPlatformChecker2)));
            if ((temp1560 == 0)) {
                this.Manager.Comment("reaching state \'S1662\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1557;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,214748" +
                        "3648)\'");
                temp1557 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 2147483648u);
                this.Manager.Comment("reaching state \'S2679\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1557, "return of DsrGetDcName, state S2679");
                this.Manager.Comment("reaching state \'S3543\'");
                goto label310;
            }
            if ((temp1560 == 1)) {
                this.Manager.Comment("reaching state \'S1663\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1558;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1558 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2680\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1558, "return of DsrGetDcNameEx2, state S2680");
                this.Manager.Comment("reaching state \'S3544\'");
                goto label310;
            }
            if ((temp1560 == 2)) {
                this.Manager.Comment("reaching state \'S1664\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1559;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1559 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2681\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1559, "return of DsrGetDcNameEx2, state S2681");
                this.Manager.Comment("reaching state \'S3545\'");
                goto label310;
            }
            throw new InvalidOperationException("never reached");
        label310:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS656GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S657");
        }
        
        private void Test_LocateDc_DsrGetDcNameS656GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S657");
        }
        
        private void Test_LocateDc_DsrGetDcNameS656GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S657");
        }
        #endregion
        
        #region Test Starting in S658
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS658() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS658");
            this.Manager.Comment("reaching state \'S658\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1561;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1561);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1561);
            this.Manager.Comment("reaching state \'S659\'");
            int temp1565 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS658GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS658GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS658GetPlatformChecker2)));
            if ((temp1565 == 0)) {
                this.Manager.Comment("reaching state \'S1665\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1562;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,32768)" +
                        "\'");
                temp1562 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 32768u);
                this.Manager.Comment("reaching state \'S2682\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1562, "return of DsrGetDcName, state S2682");
                this.Manager.Comment("reaching state \'S3546\'");
                goto label311;
            }
            if ((temp1565 == 1)) {
                this.Manager.Comment("reaching state \'S1666\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1563;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1563 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2683\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1563, "return of DsrGetDcNameEx2, state S2683");
                this.Manager.Comment("reaching state \'S3547\'");
                goto label311;
            }
            if ((temp1565 == 2)) {
                this.Manager.Comment("reaching state \'S1667\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1564;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1564 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2684\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1564, "return of DsrGetDcNameEx2, state S2684");
                this.Manager.Comment("reaching state \'S3548\'");
                goto label311;
            }
            throw new InvalidOperationException("never reached");
        label311:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS658GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S659");
        }
        
        private void Test_LocateDc_DsrGetDcNameS658GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S659");
        }
        
        private void Test_LocateDc_DsrGetDcNameS658GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S659");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS66() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS66");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1566;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1566);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1566);
            this.Manager.Comment("reaching state \'S67\'");
            int temp1570 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS66GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS66GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS66GetPlatformChecker2)));
            if ((temp1570 == 0)) {
                this.Manager.Comment("reaching state \'S777\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1567;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,PrimaryDo" +
                        "mainGuid,Null,0)\'");
                temp1567 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1794\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1567, "return of DsrGetDcNameEx2, state S1794");
                this.Manager.Comment("reaching state \'S2811\'");
                goto label312;
            }
            if ((temp1570 == 1)) {
                this.Manager.Comment("reaching state \'S778\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1568;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,InvalidDomainName,PrimaryDo" +
                        "mainGuid,Null,0)\'");
                temp1568 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.InvalidDomainName, Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType.PrimaryDomainGuid, ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1795\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1568, "return of DsrGetDcNameEx2, state S1795");
                this.Manager.Comment("reaching state \'S2812\'");
                goto label312;
            }
            if ((temp1570 == 2)) {
                this.Manager.Comment("reaching state \'S779\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1569;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1569 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1796\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1569, "return of DsrGetDcNameEx2, state S1796");
                this.Manager.Comment("reaching state \'S2813\'");
                goto label312;
            }
            throw new InvalidOperationException("never reached");
        label312:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS66GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_LocateDc_DsrGetDcNameS66GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_LocateDc_DsrGetDcNameS66GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        #endregion
        
        #region Test Starting in S660
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS660() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS660");
            this.Manager.Comment("reaching state \'S660\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1571;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1571);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1571);
            this.Manager.Comment("reaching state \'S661\'");
            int temp1575 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS660GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS660GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS660GetPlatformChecker2)));
            if ((temp1575 == 0)) {
                this.Manager.Comment("reaching state \'S1668\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1572;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,104857" +
                        "6)\'");
                temp1572 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 1048576u);
                this.Manager.Comment("reaching state \'S2685\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1572, "return of DsrGetDcName, state S2685");
                this.Manager.Comment("reaching state \'S3549\'");
                goto label313;
            }
            if ((temp1575 == 1)) {
                this.Manager.Comment("reaching state \'S1669\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1573;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1573 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2686\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1573, "return of DsrGetDcNameEx2, state S2686");
                this.Manager.Comment("reaching state \'S3550\'");
                goto label313;
            }
            if ((temp1575 == 2)) {
                this.Manager.Comment("reaching state \'S1670\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1574;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1574 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2687\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1574, "return of DsrGetDcNameEx2, state S2687");
                this.Manager.Comment("reaching state \'S3551\'");
                goto label313;
            }
            throw new InvalidOperationException("never reached");
        label313:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS660GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S661");
        }
        
        private void Test_LocateDc_DsrGetDcNameS660GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S661");
        }
        
        private void Test_LocateDc_DsrGetDcNameS660GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S661");
        }
        #endregion
        
        #region Test Starting in S662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS662() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS662");
            this.Manager.Comment("reaching state \'S662\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1576;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1576);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1576);
            this.Manager.Comment("reaching state \'S663\'");
            int temp1580 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS662GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS662GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS662GetPlatformChecker2)));
            if ((temp1580 == 0)) {
                this.Manager.Comment("reaching state \'S1671\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1577;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,524288" +
                        ")\'");
                temp1577 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 524288u);
                this.Manager.Comment("reaching state \'S2688\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1577, "return of DsrGetDcName, state S2688");
                this.Manager.Comment("reaching state \'S3552\'");
                goto label314;
            }
            if ((temp1580 == 1)) {
                this.Manager.Comment("reaching state \'S1672\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1578;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1578 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2689\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1578, "return of DsrGetDcNameEx2, state S2689");
                this.Manager.Comment("reaching state \'S3553\'");
                goto label314;
            }
            if ((temp1580 == 2)) {
                this.Manager.Comment("reaching state \'S1673\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1579;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1579 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2690\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1579, "return of DsrGetDcNameEx2, state S2690");
                this.Manager.Comment("reaching state \'S3554\'");
                goto label314;
            }
            throw new InvalidOperationException("never reached");
        label314:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS662GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S663");
        }
        
        private void Test_LocateDc_DsrGetDcNameS662GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S663");
        }
        
        private void Test_LocateDc_DsrGetDcNameS662GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S663");
        }
        #endregion
        
        #region Test Starting in S664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS664() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS664");
            this.Manager.Comment("reaching state \'S664\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1581;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1581);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1581);
            this.Manager.Comment("reaching state \'S665\'");
            int temp1585 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS664GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS664GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS664GetPlatformChecker2)));
            if ((temp1585 == 0)) {
                this.Manager.Comment("reaching state \'S1674\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1582;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,196608" +
                        ")\'");
                temp1582 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 196608u);
                this.Manager.Checkpoint("MS-NRPC_R104825");
                this.Manager.Comment("reaching state \'S2691\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1582, "return of DsrGetDcName, state S2691");
                this.Manager.Comment("reaching state \'S3555\'");
                goto label315;
            }
            if ((temp1585 == 1)) {
                this.Manager.Comment("reaching state \'S1675\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1583;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1583 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2692\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1583, "return of DsrGetDcNameEx2, state S2692");
                this.Manager.Comment("reaching state \'S3556\'");
                goto label315;
            }
            if ((temp1585 == 2)) {
                this.Manager.Comment("reaching state \'S1676\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1584;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1584 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2693\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1584, "return of DsrGetDcNameEx2, state S2693");
                this.Manager.Comment("reaching state \'S3557\'");
                goto label315;
            }
            throw new InvalidOperationException("never reached");
        label315:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS664GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S665");
        }
        
        private void Test_LocateDc_DsrGetDcNameS664GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S665");
        }
        
        private void Test_LocateDc_DsrGetDcNameS664GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S665");
        }
        #endregion
        
        #region Test Starting in S666
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS666() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS666");
            this.Manager.Comment("reaching state \'S666\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1586;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1586);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1586);
            this.Manager.Comment("reaching state \'S667\'");
            int temp1590 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS666GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS666GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS666GetPlatformChecker2)));
            if ((temp1590 == 0)) {
                this.Manager.Comment("reaching state \'S1677\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1587;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,8192)\'" +
                        "");
                temp1587 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 8192u);
                this.Manager.Comment("reaching state \'S2694\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1587, "return of DsrGetDcName, state S2694");
                this.Manager.Comment("reaching state \'S3558\'");
                goto label316;
            }
            if ((temp1590 == 1)) {
                this.Manager.Comment("reaching state \'S1678\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1588;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1588 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2695\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1588, "return of DsrGetDcNameEx2, state S2695");
                this.Manager.Comment("reaching state \'S3559\'");
                goto label316;
            }
            if ((temp1590 == 2)) {
                this.Manager.Comment("reaching state \'S1679\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1589;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1589 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2696\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1589, "return of DsrGetDcNameEx2, state S2696");
                this.Manager.Comment("reaching state \'S3560\'");
                goto label316;
            }
            throw new InvalidOperationException("never reached");
        label316:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS666GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S667");
        }
        
        private void Test_LocateDc_DsrGetDcNameS666GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S667");
        }
        
        private void Test_LocateDc_DsrGetDcNameS666GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S667");
        }
        #endregion
        
        #region Test Starting in S668
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS668() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS668");
            this.Manager.Comment("reaching state \'S668\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1591;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1591);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1591);
            this.Manager.Comment("reaching state \'S669\'");
            int temp1595 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS668GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS668GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS668GetPlatformChecker2)));
            if ((temp1595 == 0)) {
                this.Manager.Comment("reaching state \'S1680\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1592;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,4096)\'" +
                        "");
                temp1592 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 4096u);
                this.Manager.Comment("reaching state \'S2697\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1592, "return of DsrGetDcName, state S2697");
                this.Manager.Comment("reaching state \'S3561\'");
                goto label317;
            }
            if ((temp1595 == 1)) {
                this.Manager.Comment("reaching state \'S1681\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1593;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1593 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2698\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1593, "return of DsrGetDcNameEx2, state S2698");
                this.Manager.Comment("reaching state \'S3562\'");
                goto label317;
            }
            if ((temp1595 == 2)) {
                this.Manager.Comment("reaching state \'S1682\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1594;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1594 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2699\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1594, "return of DsrGetDcNameEx2, state S2699");
                this.Manager.Comment("reaching state \'S3563\'");
                goto label317;
            }
            throw new InvalidOperationException("never reached");
        label317:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS668GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S669");
        }
        
        private void Test_LocateDc_DsrGetDcNameS668GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S669");
        }
        
        private void Test_LocateDc_DsrGetDcNameS668GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S669");
        }
        #endregion
        
        #region Test Starting in S670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS670() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS670");
            this.Manager.Comment("reaching state \'S670\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1596;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1596);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1596);
            this.Manager.Comment("reaching state \'S671\'");
            int temp1600 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS670GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS670GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS670GetPlatformChecker2)));
            if ((temp1600 == 0)) {
                this.Manager.Comment("reaching state \'S1683\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1597;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,257)\'");
                temp1597 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 257u);
                this.Manager.Comment("reaching state \'S2700\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1597, "return of DsrGetDcName, state S2700");
                this.Manager.Comment("reaching state \'S3564\'");
                goto label318;
            }
            if ((temp1600 == 1)) {
                this.Manager.Comment("reaching state \'S1684\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1598;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1598 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2701\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1598, "return of DsrGetDcNameEx2, state S2701");
                this.Manager.Comment("reaching state \'S3565\'");
                goto label318;
            }
            if ((temp1600 == 2)) {
                this.Manager.Comment("reaching state \'S1685\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1599;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1599 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2702\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1599, "return of DsrGetDcNameEx2, state S2702");
                this.Manager.Comment("reaching state \'S3566\'");
                goto label318;
            }
            throw new InvalidOperationException("never reached");
        label318:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS670GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S671");
        }
        
        private void Test_LocateDc_DsrGetDcNameS670GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S671");
        }
        
        private void Test_LocateDc_DsrGetDcNameS670GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S671");
        }
        #endregion
        
        #region Test Starting in S672
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS672() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS672");
            this.Manager.Comment("reaching state \'S672\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1601;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1601);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1601);
            this.Manager.Comment("reaching state \'S673\'");
            int temp1605 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS672GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS672GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS672GetPlatformChecker2)));
            if ((temp1605 == 0)) {
                this.Manager.Comment("reaching state \'S1686\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1602;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,128)\'");
                temp1602 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 128u);
                this.Manager.Comment("reaching state \'S2703\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1602, "return of DsrGetDcName, state S2703");
                this.Manager.Comment("reaching state \'S3567\'");
                goto label319;
            }
            if ((temp1605 == 1)) {
                this.Manager.Comment("reaching state \'S1687\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1603;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1603 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2704\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1603, "return of DsrGetDcNameEx2, state S2704");
                this.Manager.Comment("reaching state \'S3568\'");
                goto label319;
            }
            if ((temp1605 == 2)) {
                this.Manager.Comment("reaching state \'S1688\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1604;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1604 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2705\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1604, "return of DsrGetDcNameEx2, state S2705");
                this.Manager.Comment("reaching state \'S3569\'");
                goto label319;
            }
            throw new InvalidOperationException("never reached");
        label319:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS672GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S673");
        }
        
        private void Test_LocateDc_DsrGetDcNameS672GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S673");
        }
        
        private void Test_LocateDc_DsrGetDcNameS672GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S673");
        }
        #endregion
        
        #region Test Starting in S674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS674() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS674");
            this.Manager.Comment("reaching state \'S674\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1606;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1606);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1606);
            this.Manager.Comment("reaching state \'S675\'");
            int temp1610 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS674GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS674GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS674GetPlatformChecker2)));
            if ((temp1610 == 0)) {
                this.Manager.Comment("reaching state \'S1689\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1607;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,192)\'");
                temp1607 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104823");
                this.Manager.Comment("reaching state \'S2706\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1607, "return of DsrGetDcName, state S2706");
                this.Manager.Comment("reaching state \'S3570\'");
                goto label320;
            }
            if ((temp1610 == 1)) {
                this.Manager.Comment("reaching state \'S1690\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1608;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1608 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2707\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1608, "return of DsrGetDcNameEx2, state S2707");
                this.Manager.Comment("reaching state \'S3571\'");
                goto label320;
            }
            if ((temp1610 == 2)) {
                this.Manager.Comment("reaching state \'S1691\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1609;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1609 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2708\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1609, "return of DsrGetDcNameEx2, state S2708");
                this.Manager.Comment("reaching state \'S3572\'");
                goto label320;
            }
            throw new InvalidOperationException("never reached");
        label320:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS674GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S675");
        }
        
        private void Test_LocateDc_DsrGetDcNameS674GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S675");
        }
        
        private void Test_LocateDc_DsrGetDcNameS674GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S675");
        }
        #endregion
        
        #region Test Starting in S676
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS676() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS676");
            this.Manager.Comment("reaching state \'S676\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1611;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1611);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1611);
            this.Manager.Comment("reaching state \'S677\'");
            int temp1615 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS676GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS676GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS676GetPlatformChecker2)));
            if ((temp1615 == 0)) {
                this.Manager.Comment("reaching state \'S1692\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1612;
                this.Manager.Comment("executing step \'call DsrGetDcName(PrimaryDc,FqdnFormatDomainName,Null,Null,131072" +
                        ")\'");
                temp1612 = this.INrpcServerAdapterInstance.DsrGetDcName(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteGuidType)(0)), 131072u);
                this.Manager.Comment("reaching state \'S2709\'");
                this.Manager.Comment("checking step \'return DsrGetDcName/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1612, "return of DsrGetDcName, state S2709");
                this.Manager.Comment("reaching state \'S3573\'");
                goto label321;
            }
            if ((temp1615 == 1)) {
                this.Manager.Comment("reaching state \'S1693\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1613;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1613 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2710\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1613, "return of DsrGetDcNameEx2, state S2710");
                this.Manager.Comment("reaching state \'S3574\'");
                goto label321;
            }
            if ((temp1615 == 2)) {
                this.Manager.Comment("reaching state \'S1694\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1614;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1614 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S2711\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1614, "return of DsrGetDcNameEx2, state S2711");
                this.Manager.Comment("reaching state \'S3575\'");
                goto label321;
            }
            throw new InvalidOperationException("never reached");
        label321:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS676GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S677");
        }
        
        private void Test_LocateDc_DsrGetDcNameS676GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S677");
        }
        
        private void Test_LocateDc_DsrGetDcNameS676GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S677");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS68() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS68");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1616;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1616);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1616);
            this.Manager.Comment("reaching state \'S69\'");
            int temp1620 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS68GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS68GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS68GetPlatformChecker2)));
            if ((temp1620 == 0)) {
                this.Manager.Comment("reaching state \'S780\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1617;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,AnotherDomainUserAccount,256,FqdnF" +
                        "ormatDomainName,Null,Null,0)\'");
                temp1617 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.AnotherDomainUserAccount, 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1797\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp1617, "return of DsrGetDcNameEx2, state S1797");
                this.Manager.Comment("reaching state \'S2814\'");
                goto label322;
            }
            if ((temp1620 == 1)) {
                this.Manager.Comment("reaching state \'S781\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1618;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,AnotherDomainUserAccount,256,FqdnF" +
                        "ormatDomainName,Null,Null,0)\'");
                temp1618 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType.AnotherDomainUserAccount, 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103150");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1798\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_USER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_USER, temp1618, "return of DsrGetDcNameEx2, state S1798");
                this.Manager.Comment("reaching state \'S2815\'");
                goto label322;
            }
            if ((temp1620 == 2)) {
                this.Manager.Comment("reaching state \'S782\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1619;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1619 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1799\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1619, "return of DsrGetDcNameEx2, state S1799");
                this.Manager.Comment("reaching state \'S2816\'");
                goto label322;
            }
            throw new InvalidOperationException("never reached");
        label322:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS68GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_LocateDc_DsrGetDcNameS68GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_LocateDc_DsrGetDcNameS68GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS70() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS70");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1621;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1621);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1621);
            this.Manager.Comment("reaching state \'S71\'");
            int temp1625 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS70GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS70GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS70GetPlatformChecker2)));
            if ((temp1625 == 0)) {
                this.Manager.Comment("reaching state \'S783\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1622;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,256)\'");
                temp1622 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 256u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1800\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1622, "return of DsrGetDcNameEx2, state S1800");
                this.Manager.Comment("reaching state \'S2817\'");
                goto label323;
            }
            if ((temp1625 == 1)) {
                this.Manager.Comment("reaching state \'S784\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1623;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1024)\'");
                temp1623 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1024u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1801\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1623, "return of DsrGetDcNameEx2, state S1801");
                this.Manager.Comment("reaching state \'S2818\'");
                goto label323;
            }
            if ((temp1625 == 2)) {
                this.Manager.Comment("reaching state \'S785\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1624;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1624 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1802\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1624, "return of DsrGetDcNameEx2, state S1802");
                this.Manager.Comment("reaching state \'S2819\'");
                goto label323;
            }
            throw new InvalidOperationException("never reached");
        label323:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS70GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_LocateDc_DsrGetDcNameS70GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_LocateDc_DsrGetDcNameS70GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS72() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS72");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1626;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1626);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1626);
            this.Manager.Comment("reaching state \'S73\'");
            int temp1630 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS72GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS72GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS72GetPlatformChecker2)));
            if ((temp1630 == 0)) {
                this.Manager.Comment("reaching state \'S786\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1627;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32832)\'");
                temp1627 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32832u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1803\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1627, "return of DsrGetDcNameEx2, state S1803");
                this.Manager.Comment("reaching state \'S2820\'");
                goto label324;
            }
            if ((temp1630 == 1)) {
                this.Manager.Comment("reaching state \'S787\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1628;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1152)\'");
                temp1628 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104880");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1804\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1628, "return of DsrGetDcNameEx2, state S1804");
                this.Manager.Comment("reaching state \'S2821\'");
                goto label324;
            }
            if ((temp1630 == 2)) {
                this.Manager.Comment("reaching state \'S788\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1629;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1629 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1805\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1629, "return of DsrGetDcNameEx2, state S1805");
                this.Manager.Comment("reaching state \'S2822\'");
                goto label324;
            }
            throw new InvalidOperationException("never reached");
        label324:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS72GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_LocateDc_DsrGetDcNameS72GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_LocateDc_DsrGetDcNameS72GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS74() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS74");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1631;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1631);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1631);
            this.Manager.Comment("reaching state \'S75\'");
            int temp1635 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS74GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS74GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS74GetPlatformChecker2)));
            if ((temp1635 == 0)) {
                this.Manager.Comment("reaching state \'S789\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1632;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,192)\'");
                temp1632 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 192u);
                this.Manager.Checkpoint("MS-NRPC_R104879");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1806\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1632, "return of DsrGetDcNameEx2, state S1806");
                this.Manager.Comment("reaching state \'S2823\'");
                goto label325;
            }
            if ((temp1635 == 1)) {
                this.Manager.Comment("reaching state \'S790\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1633;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1088)\'");
                temp1633 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104878");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1807\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1633, "return of DsrGetDcNameEx2, state S1807");
                this.Manager.Comment("reaching state \'S2824\'");
                goto label325;
            }
            if ((temp1635 == 2)) {
                this.Manager.Comment("reaching state \'S791\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1634;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1634 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1808\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1634, "return of DsrGetDcNameEx2, state S1808");
                this.Manager.Comment("reaching state \'S2825\'");
                goto label325;
            }
            throw new InvalidOperationException("never reached");
        label325:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS74GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_LocateDc_DsrGetDcNameS74GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_LocateDc_DsrGetDcNameS74GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS76() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS76");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1636;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1636);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1636);
            this.Manager.Comment("reaching state \'S77\'");
            int temp1640 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS76GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS76GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS76GetPlatformChecker2)));
            if ((temp1640 == 0)) {
                this.Manager.Comment("reaching state \'S792\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1637;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1088)\'");
                temp1637 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1088u);
                this.Manager.Checkpoint("MS-NRPC_R104878");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1809\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1637, "return of DsrGetDcNameEx2, state S1809");
                this.Manager.Comment("reaching state \'S2826\'");
                goto label326;
            }
            if ((temp1640 == 1)) {
                this.Manager.Comment("reaching state \'S793\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1638;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,16384)\'");
                temp1638 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16384u);
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1810\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_NO_SUCH_DOMAIN\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1638, "return of DsrGetDcNameEx2, state S1810");
                this.Manager.Comment("reaching state \'S2827\'");
                goto label326;
            }
            if ((temp1640 == 2)) {
                this.Manager.Comment("reaching state \'S794\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1639;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1639 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1811\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1639, "return of DsrGetDcNameEx2, state S1811");
                this.Manager.Comment("reaching state \'S2828\'");
                goto label326;
            }
            throw new InvalidOperationException("never reached");
        label326:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS76GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_LocateDc_DsrGetDcNameS76GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_LocateDc_DsrGetDcNameS76GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS78() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS78");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1641;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1641);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1641);
            this.Manager.Comment("reaching state \'S79\'");
            int temp1645 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS78GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS78GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS78GetPlatformChecker2)));
            if ((temp1645 == 0)) {
                this.Manager.Comment("reaching state \'S795\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1642;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,8192)\'");
                temp1642 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 8192u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1812\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1642, "return of DsrGetDcNameEx2, state S1812");
                this.Manager.Comment("reaching state \'S2829\'");
                goto label327;
            }
            if ((temp1645 == 1)) {
                this.Manager.Comment("reaching state \'S796\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1643;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,128)\'");
                temp1643 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 128u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1813\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1643, "return of DsrGetDcNameEx2, state S1813");
                this.Manager.Comment("reaching state \'S2830\'");
                goto label327;
            }
            if ((temp1645 == 2)) {
                this.Manager.Comment("reaching state \'S797\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1644;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1644 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1814\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1644, "return of DsrGetDcNameEx2, state S1814");
                this.Manager.Comment("reaching state \'S2831\'");
                goto label327;
            }
            throw new InvalidOperationException("never reached");
        label327:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS78GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_LocateDc_DsrGetDcNameS78GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_LocateDc_DsrGetDcNameS78GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS8() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS8");
            this.Manager.Comment("reaching state \'S8\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1646;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1646);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1646);
            this.Manager.Comment("reaching state \'S9\'");
            int temp1650 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS8GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS8GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS8GetPlatformChecker2)));
            if ((temp1650 == 0)) {
                this.Manager.Comment("reaching state \'S690\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1647;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,2147483648,FqdnFormatDomainNa" +
                        "me,Null,Null,0)\'");
                temp1647 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 2147483648u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1707\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1647, "return of DsrGetDcNameEx2, state S1707");
                this.Manager.Comment("reaching state \'S2724\'");
                goto label328;
            }
            if ((temp1650 == 1)) {
                this.Manager.Comment("reaching state \'S691\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1648;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,2147483648,FqdnFormatDomainNa" +
                        "me,Null,Null,0)\'");
                temp1648 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 2147483648u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1708\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1648, "return of DsrGetDcNameEx2, state S1708");
                this.Manager.Comment("reaching state \'S2725\'");
                goto label328;
            }
            if ((temp1650 == 2)) {
                this.Manager.Comment("reaching state \'S692\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1649;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1649 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1709\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1649, "return of DsrGetDcNameEx2, state S1709");
                this.Manager.Comment("reaching state \'S2726\'");
                goto label328;
            }
            throw new InvalidOperationException("never reached");
        label328:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS8GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_LocateDc_DsrGetDcNameS8GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_LocateDc_DsrGetDcNameS8GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS80() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS80");
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1651;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1651);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1651);
            this.Manager.Comment("reaching state \'S81\'");
            int temp1655 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS80GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS80GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS80GetPlatformChecker2)));
            if ((temp1655 == 0)) {
                this.Manager.Comment("reaching state \'S798\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1652;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,4096)\'");
                temp1652 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 4096u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1815\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1652, "return of DsrGetDcNameEx2, state S1815");
                this.Manager.Comment("reaching state \'S2832\'");
                goto label329;
            }
            if ((temp1655 == 1)) {
                this.Manager.Comment("reaching state \'S799\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1653;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,257)\'");
                temp1653 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 257u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1816\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1653, "return of DsrGetDcNameEx2, state S1816");
                this.Manager.Comment("reaching state \'S2833\'");
                goto label329;
            }
            if ((temp1655 == 2)) {
                this.Manager.Comment("reaching state \'S800\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1654;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1654 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1817\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1654, "return of DsrGetDcNameEx2, state S1817");
                this.Manager.Comment("reaching state \'S2834\'");
                goto label329;
            }
            throw new InvalidOperationException("never reached");
        label329:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS80GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_LocateDc_DsrGetDcNameS80GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_LocateDc_DsrGetDcNameS80GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS82() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS82");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1656;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1656);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1656);
            this.Manager.Comment("reaching state \'S83\'");
            int temp1660 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS82GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS82GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS82GetPlatformChecker2)));
            if ((temp1660 == 0)) {
                this.Manager.Comment("reaching state \'S801\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1657;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,257)\'");
                temp1657 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 257u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1818\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1657, "return of DsrGetDcNameEx2, state S1818");
                this.Manager.Comment("reaching state \'S2835\'");
                goto label330;
            }
            if ((temp1660 == 1)) {
                this.Manager.Comment("reaching state \'S802\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1658;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1)\'");
                temp1658 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1819\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1658, "return of DsrGetDcNameEx2, state S1819");
                this.Manager.Comment("reaching state \'S2836\'");
                goto label330;
            }
            if ((temp1660 == 2)) {
                this.Manager.Comment("reaching state \'S803\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1659;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1659 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1820\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1659, "return of DsrGetDcNameEx2, state S1820");
                this.Manager.Comment("reaching state \'S2837\'");
                goto label330;
            }
            throw new InvalidOperationException("never reached");
        label330:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS82GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_LocateDc_DsrGetDcNameS82GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_LocateDc_DsrGetDcNameS82GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS84() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1661;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1661);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1661);
            this.Manager.Comment("reaching state \'S85\'");
            int temp1665 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS84GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS84GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS84GetPlatformChecker2)));
            if ((temp1665 == 0)) {
                this.Manager.Comment("reaching state \'S804\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1662;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1152)\'");
                temp1662 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1152u);
                this.Manager.Checkpoint("MS-NRPC_R104880");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1821\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1662, "return of DsrGetDcNameEx2, state S1821");
                this.Manager.Comment("reaching state \'S2838\'");
                goto label331;
            }
            if ((temp1665 == 1)) {
                this.Manager.Comment("reaching state \'S805\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1663;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,16)\'");
                temp1663 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1822\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1663, "return of DsrGetDcNameEx2, state S1822");
                this.Manager.Comment("reaching state \'S2839\'");
                goto label331;
            }
            if ((temp1665 == 2)) {
                this.Manager.Comment("reaching state \'S806\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1664;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1664 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1823\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1664, "return of DsrGetDcNameEx2, state S1823");
                this.Manager.Comment("reaching state \'S2840\'");
                goto label331;
            }
            throw new InvalidOperationException("never reached");
        label331:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS84GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_LocateDc_DsrGetDcNameS84GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_LocateDc_DsrGetDcNameS84GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS86() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS86");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1666;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1666);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1666);
            this.Manager.Comment("reaching state \'S87\'");
            int temp1670 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS86GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS86GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS86GetPlatformChecker2)));
            if ((temp1670 == 0)) {
                this.Manager.Comment("reaching state \'S807\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1667;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1)\'");
                temp1667 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1824\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1667, "return of DsrGetDcNameEx2, state S1824");
                this.Manager.Comment("reaching state \'S2841\'");
                goto label332;
            }
            if ((temp1670 == 1)) {
                this.Manager.Comment("reaching state \'S808\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1668;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32)\'");
                temp1668 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1825\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1668, "return of DsrGetDcNameEx2, state S1825");
                this.Manager.Comment("reaching state \'S2842\'");
                goto label332;
            }
            if ((temp1670 == 2)) {
                this.Manager.Comment("reaching state \'S809\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1669;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1669 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1826\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1669, "return of DsrGetDcNameEx2, state S1826");
                this.Manager.Comment("reaching state \'S2843\'");
                goto label332;
            }
            throw new InvalidOperationException("never reached");
        label332:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS86GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_LocateDc_DsrGetDcNameS86GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_LocateDc_DsrGetDcNameS86GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS88() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS88");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1671;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1671);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1671);
            this.Manager.Comment("reaching state \'S89\'");
            int temp1675 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS88GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS88GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS88GetPlatformChecker2)));
            if ((temp1675 == 0)) {
                this.Manager.Comment("reaching state \'S810\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1672;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,16)\'");
                temp1672 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 16u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1827\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1672, "return of DsrGetDcNameEx2, state S1827");
                this.Manager.Comment("reaching state \'S2844\'");
                goto label333;
            }
            if ((temp1675 == 1)) {
                this.Manager.Comment("reaching state \'S811\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1673;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,256)\'");
                temp1673 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 256u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1828\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1673, "return of DsrGetDcNameEx2, state S1828");
                this.Manager.Comment("reaching state \'S2845\'");
                goto label333;
            }
            if ((temp1675 == 2)) {
                this.Manager.Comment("reaching state \'S812\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1674;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1674 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1829\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1674, "return of DsrGetDcNameEx2, state S1829");
                this.Manager.Comment("reaching state \'S2846\'");
                goto label333;
            }
            throw new InvalidOperationException("never reached");
        label333:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS88GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_LocateDc_DsrGetDcNameS88GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_LocateDc_DsrGetDcNameS88GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS90() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS90");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1676;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1676);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1676);
            this.Manager.Comment("reaching state \'S91\'");
            int temp1680 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS90GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS90GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS90GetPlatformChecker2)));
            if ((temp1680 == 0)) {
                this.Manager.Comment("reaching state \'S813\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1677;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,32)\'");
                temp1677 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 32u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1830\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1677, "return of DsrGetDcNameEx2, state S1830");
                this.Manager.Comment("reaching state \'S2847\'");
                goto label334;
            }
            if ((temp1680 == 1)) {
                this.Manager.Comment("reaching state \'S814\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1678;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,512)\'");
                temp1678 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 512u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1831\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1678, "return of DsrGetDcNameEx2, state S1831");
                this.Manager.Comment("reaching state \'S2848\'");
                goto label334;
            }
            if ((temp1680 == 2)) {
                this.Manager.Comment("reaching state \'S815\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1679;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1679 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1832\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1679, "return of DsrGetDcNameEx2, state S1832");
                this.Manager.Comment("reaching state \'S2849\'");
                goto label334;
            }
            throw new InvalidOperationException("never reached");
        label334:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS90GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_LocateDc_DsrGetDcNameS90GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_LocateDc_DsrGetDcNameS90GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS92() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS92");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1681;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1681);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1681);
            this.Manager.Comment("reaching state \'S93\'");
            int temp1685 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS92GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS92GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS92GetPlatformChecker2)));
            if ((temp1685 == 0)) {
                this.Manager.Comment("reaching state \'S816\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1682;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,3221225472)\'");
                temp1682 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 3221225472u);
                this.Manager.Checkpoint("MS-NRPC_R104882");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1833\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1682, "return of DsrGetDcNameEx2, state S1833");
                this.Manager.Comment("reaching state \'S2850\'");
                goto label335;
            }
            if ((temp1685 == 1)) {
                this.Manager.Comment("reaching state \'S817\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1683;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2048)\'");
                temp1683 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2048u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1834\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1683, "return of DsrGetDcNameEx2, state S1834");
                this.Manager.Comment("reaching state \'S2851\'");
                goto label335;
            }
            if ((temp1685 == 2)) {
                this.Manager.Comment("reaching state \'S818\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1684;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1684 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1835\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1684, "return of DsrGetDcNameEx2, state S1835");
                this.Manager.Comment("reaching state \'S2852\'");
                goto label335;
            }
            throw new InvalidOperationException("never reached");
        label335:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS92GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_LocateDc_DsrGetDcNameS92GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_LocateDc_DsrGetDcNameS92GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS94() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS94");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1686;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1686);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1686);
            this.Manager.Comment("reaching state \'S95\'");
            int temp1690 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS94GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS94GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS94GetPlatformChecker2)));
            if ((temp1690 == 0)) {
                this.Manager.Comment("reaching state \'S819\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1687;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,524288)\'");
                temp1687 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 524288u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1836\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1687, "return of DsrGetDcNameEx2, state S1836");
                this.Manager.Comment("reaching state \'S2853\'");
                goto label336;
            }
            if ((temp1690 == 1)) {
                this.Manager.Comment("reaching state \'S820\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1688;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,1073741824)\'");
                temp1688 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 1073741824u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1837\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1688, "return of DsrGetDcNameEx2, state S1837");
                this.Manager.Comment("reaching state \'S2854\'");
                goto label336;
            }
            if ((temp1690 == 2)) {
                this.Manager.Comment("reaching state \'S821\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1689;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1689 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1838\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1689, "return of DsrGetDcNameEx2, state S1838");
                this.Manager.Comment("reaching state \'S2855\'");
                goto label336;
            }
            throw new InvalidOperationException("never reached");
        label336:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS94GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_LocateDc_DsrGetDcNameS94GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_LocateDc_DsrGetDcNameS94GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS96() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS96");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1691;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1691);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1691);
            this.Manager.Comment("reaching state \'S97\'");
            int temp1695 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS96GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS96GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS96GetPlatformChecker2)));
            if ((temp1695 == 0)) {
                this.Manager.Comment("reaching state \'S822\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1692;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2048)\'");
                temp1692 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2048u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1839\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1692, "return of DsrGetDcNameEx2, state S1839");
                this.Manager.Comment("reaching state \'S2856\'");
                goto label337;
            }
            if ((temp1695 == 1)) {
                this.Manager.Comment("reaching state \'S823\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1693;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,4096)\'");
                temp1693 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 4096u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1840\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1693, "return of DsrGetDcNameEx2, state S1840");
                this.Manager.Comment("reaching state \'S2857\'");
                goto label337;
            }
            if ((temp1695 == 2)) {
                this.Manager.Comment("reaching state \'S824\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1694;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1694 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1841\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1694, "return of DsrGetDcNameEx2, state S1841");
                this.Manager.Comment("reaching state \'S2858\'");
                goto label337;
            }
            throw new InvalidOperationException("never reached");
        label337:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS96GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_LocateDc_DsrGetDcNameS96GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_LocateDc_DsrGetDcNameS96GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_LocateDc_DsrGetDcNameS98() {
            this.Manager.BeginTest("Test_LocateDc_DsrGetDcNameS98");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1696;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1696);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1696);
            this.Manager.Comment("reaching state \'S99\'");
            int temp1700 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS98GetPlatformChecker)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS98GetPlatformChecker1)), new ExpectedReturn(Test_LocateDc_DsrGetDcName.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_LocateDc_DsrGetDcNameS98GetPlatformChecker2)));
            if ((temp1700 == 0)) {
                this.Manager.Comment("reaching state \'S825\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1697;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2)\'");
                temp1697 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2u);
                this.Manager.Checkpoint("MS-NRPC_R2080");
                this.Manager.Checkpoint("MS-NRPC_R103120");
                this.Manager.Comment("reaching state \'S1842\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_INVALID_FLAGS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_FLAGS, temp1697, "return of DsrGetDcNameEx2, state S1842");
                this.Manager.Comment("reaching state \'S2859\'");
                goto label338;
            }
            if ((temp1700 == 1)) {
                this.Manager.Comment("reaching state \'S826\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1698;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,0,FqdnFormatDomainName,Null,N" +
                        "ull,2147483648)\'");
                temp1698 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 0u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 2147483648u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1843\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1698, "return of DsrGetDcNameEx2, state S1843");
                this.Manager.Comment("reaching state \'S2860\'");
                goto label338;
            }
            if ((temp1700 == 2)) {
                this.Manager.Comment("reaching state \'S827\'");
                Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1699;
                this.Manager.Comment("executing step \'call DsrGetDcNameEx2(PrimaryDc,Null,256,FqdnFormatDomainName,Null" +
                        ",Null,0)\'");
                temp1699 = this.INrpcServerAdapterInstance.DsrGetDcNameEx2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, ((Microsoft.Protocols.TestSuites.Nrpc.AccounterNameType)(0)), 256u, Microsoft.Protocols.TestSuites.Nrpc.DomainNameType.FqdnFormatDomainName, ((Microsoft.Protocols.TestSuites.Nrpc.DomainGuidType)(0)), ((Microsoft.Protocols.TestSuites.Nrpc.SiteNameType)(0)), 0u);
                this.Manager.Checkpoint("MS-NRPC_R103119");
                this.Manager.Comment("reaching state \'S1844\'");
                this.Manager.Comment("checking step \'return DsrGetDcNameEx2/ERROR_SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1699, "return of DsrGetDcNameEx2, state S1844");
                this.Manager.Comment("reaching state \'S2861\'");
                goto label338;
            }
            throw new InvalidOperationException("never reached");
        label338:
;
            this.Manager.EndTest();
        }
        
        private void Test_LocateDc_DsrGetDcNameS98GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_LocateDc_DsrGetDcNameS98GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_LocateDc_DsrGetDcNameS98GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        #endregion
    }
}
