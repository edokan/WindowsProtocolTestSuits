// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.Nrpc {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer : PtfTestClassBase {
        
        public Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetPlatformDelegate1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform);
        
        public delegate void GetClientAccountTypeDelegate1(bool isAdministrator);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetPlatformInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter), "GetPlatform", typeof(Microsoft.Protocols.TestSuites.Nrpc.PlatformType).MakeByRefType());
        
        static System.Reflection.MethodBase GetClientAccountTypeInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter), "GetClientAccountType", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter INrpcServerAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.INrpcServerAdapterInstance = ((Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp0;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp0);
            this.Manager.AddReturn(GetPlatformInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetPlatformChecker2)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S190\'");
                bool temp1;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1);
                this.Manager.Comment("reaching state \'S475\'");
                int temp4 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker1)));
                if ((temp4 == 0)) {
                    this.Manager.Comment("reaching state \'S760\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,3,Valid)\'");
                    temp2 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1330\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2, "return of NetrLogonControl2Ex, state S1330");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label0;
                }
                if ((temp4 == 1)) {
                    this.Manager.Comment("reaching state \'S761\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp3;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,3,Valid)\'");
                    temp3 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1331\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp3, "return of NetrLogonControl2Ex, state S1331");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label0;
                }
                throw new InvalidOperationException("never reached");
            label0:
;
                goto label3;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S191\'");
                bool temp5;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp5);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp5);
                this.Manager.Comment("reaching state \'S476\'");
                int temp8 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker3)));
                if ((temp8 == 0)) {
                    this.Manager.Comment("reaching state \'S762\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp6;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,1,Valid)\'");
                    temp6 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1332\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp6, "return of NetrLogonControl2Ex, state S1332");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label1;
                }
                if ((temp8 == 1)) {
                    this.Manager.Comment("reaching state \'S763\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp7;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,1,Valid)\'");
                    temp7 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1333\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp7, "return of NetrLogonControl2Ex, state S1333");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label1;
                }
                throw new InvalidOperationException("never reached");
            label1:
;
                goto label3;
            }
            if ((temp13 == 2)) {
                this.Manager.Comment("reaching state \'S192\'");
                bool temp9;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp9);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp9);
                this.Manager.Comment("reaching state \'S477\'");
                int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker5)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S764\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp10;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,1,Valid)\'");
                    temp10 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1334\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp10, "return of NetrLogonControl2Ex, state S1334");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label2;
                }
                if ((temp12 == 1)) {
                    this.Manager.Comment("reaching state \'S765\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp11;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,2,Valid)\'");
                    temp11 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1335\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp11, "return of NetrLogonControl2Ex, state S1335");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S475");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900() {
            this.Manager.Comment("reaching state \'S1900\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S475");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901() {
            this.Manager.Comment("reaching state \'S1901\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S476");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902() {
            this.Manager.Comment("reaching state \'S1902\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S476");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903() {
            this.Manager.Comment("reaching state \'S1903\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S477");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904() {
            this.Manager.Comment("reaching state \'S1904\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS0GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S477");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905() {
            this.Manager.Comment("reaching state \'S1905\'");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10");
            this.Manager.Comment("reaching state \'S10\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp14;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp14);
            this.Manager.AddReturn(GetPlatformInfo, null, temp14);
            this.Manager.Comment("reaching state \'S11\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetPlatformChecker2)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S205\'");
                bool temp15;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp15);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp15);
                this.Manager.Comment("reaching state \'S490\'");
                int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker1)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S790\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp16;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,2,Valid)\'");
                    temp16 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1360\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp16, "return of NetrLogonControl2Ex, state S1360");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label4;
                }
                if ((temp18 == 1)) {
                    this.Manager.Comment("reaching state \'S791\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp17;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,2,Valid)\'");
                    temp17 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1361\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp17, "return of NetrLogonControl2Ex, state S1361");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label7;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S206\'");
                bool temp19;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp19);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp19);
                this.Manager.Comment("reaching state \'S491\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker3)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S792\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp20;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,4,Valid)\'");
                    temp20 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1362\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp20, "return of NetrLogonControl2Ex, state S1362");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label5;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S793\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp21;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,4,Valid)\'");
                    temp21 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1363\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp21, "return of NetrLogonControl2Ex, state S1363");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label5;
                }
                throw new InvalidOperationException("never reached");
            label5:
;
                goto label7;
            }
            if ((temp27 == 2)) {
                this.Manager.Comment("reaching state \'S207\'");
                bool temp23;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp23);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp23);
                this.Manager.Comment("reaching state \'S492\'");
                int temp26 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker5)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S794\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp24;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp24 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1364\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp24, "return of NetrLogonControl2Ex, state S1364");
                    this.Manager.Comment("reaching state \'S1914\'");
                    goto label6;
                }
                if ((temp26 == 1)) {
                    this.Manager.Comment("reaching state \'S795\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp25;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp25 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1365\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp25, "return of NetrLogonControl2Ex, state S1365");
                    this.Manager.Comment("reaching state \'S1915\'");
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S490");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S490");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S491");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S491");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S492");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS10GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S492");
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp28;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp28);
            this.Manager.AddReturn(GetPlatformInfo, null, temp28);
            this.Manager.Comment("reaching state \'S101\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetPlatformChecker2)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S340\'");
                bool temp29;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp29);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp29);
                this.Manager.Comment("reaching state \'S625\'");
                int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker1)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S1060\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp30;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp30 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1630\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp30, "return of NetrLogonControl2Ex, state S1630");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label8;
                }
                if ((temp32 == 1)) {
                    this.Manager.Comment("reaching state \'S1061\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp31;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp31 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1631\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp31, "return of NetrLogonControl2Ex, state S1631");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label8;
                }
                throw new InvalidOperationException("never reached");
            label8:
;
                goto label11;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S341\'");
                bool temp33;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp33);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp33);
                this.Manager.Comment("reaching state \'S626\'");
                int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker3)));
                if ((temp36 == 0)) {
                    this.Manager.Comment("reaching state \'S1062\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp34;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp34 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1632\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp34, "return of NetrLogonControl2Ex, state S1632");
                    this.Manager.Comment("reaching state \'S2008\'");
                    goto label9;
                }
                if ((temp36 == 1)) {
                    this.Manager.Comment("reaching state \'S1063\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp35;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp35 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1633\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp35, "return of NetrLogonControl2Ex, state S1633");
                    this.Manager.Comment("reaching state \'S2009\'");
                    goto label9;
                }
                throw new InvalidOperationException("never reached");
            label9:
;
                goto label11;
            }
            if ((temp41 == 2)) {
                this.Manager.Comment("reaching state \'S342\'");
                bool temp37;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp37);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp37);
                this.Manager.Comment("reaching state \'S627\'");
                int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker5)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S1064\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp38;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp38 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1634\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp38, "return of NetrLogonControl2Ex, state S1634");
                    this.Manager.Comment("reaching state \'S2010\'");
                    goto label10;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S1065\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp39;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp39 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1635\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp39, "return of NetrLogonControl2Ex, state S1635");
                    this.Manager.Comment("reaching state \'S2011\'");
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S625");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S625");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S626");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S626");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S627");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS100GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S627");
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp42;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp42);
            this.Manager.AddReturn(GetPlatformInfo, null, temp42);
            this.Manager.Comment("reaching state \'S103\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetPlatformChecker2)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S343\'");
                bool temp43;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp43);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp43);
                this.Manager.Comment("reaching state \'S628\'");
                int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker1)));
                if ((temp46 == 0)) {
                    this.Manager.Comment("reaching state \'S1066\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp44;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,2,Valid)\'");
                    temp44 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1636\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp44, "return of NetrLogonControl2Ex, state S1636");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label12;
                }
                if ((temp46 == 1)) {
                    this.Manager.Comment("reaching state \'S1067\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp45;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,2,Valid)\'");
                    temp45 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1637\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp45, "return of NetrLogonControl2Ex, state S1637");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label12;
                }
                throw new InvalidOperationException("never reached");
            label12:
;
                goto label15;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S344\'");
                bool temp47;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp47);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp47);
                this.Manager.Comment("reaching state \'S629\'");
                int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker3)));
                if ((temp50 == 0)) {
                    this.Manager.Comment("reaching state \'S1068\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp48;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp48 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1638\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp48, "return of NetrLogonControl2Ex, state S1638");
                    this.Manager.Comment("reaching state \'S2012\'");
                    goto label13;
                }
                if ((temp50 == 1)) {
                    this.Manager.Comment("reaching state \'S1069\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp49;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp49 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1639\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp49, "return of NetrLogonControl2Ex, state S1639");
                    this.Manager.Comment("reaching state \'S2013\'");
                    goto label13;
                }
                throw new InvalidOperationException("never reached");
            label13:
;
                goto label15;
            }
            if ((temp55 == 2)) {
                this.Manager.Comment("reaching state \'S345\'");
                bool temp51;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp51);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp51);
                this.Manager.Comment("reaching state \'S630\'");
                int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker5)));
                if ((temp54 == 0)) {
                    this.Manager.Comment("reaching state \'S1070\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp52;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp52 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1640\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp52, "return of NetrLogonControl2Ex, state S1640");
                    this.Manager.Comment("reaching state \'S2014\'");
                    goto label14;
                }
                if ((temp54 == 1)) {
                    this.Manager.Comment("reaching state \'S1071\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp53;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp53 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1641\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp53, "return of NetrLogonControl2Ex, state S1641");
                    this.Manager.Comment("reaching state \'S2015\'");
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S628");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S628");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S629");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S629");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S630");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS102GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S630");
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp56;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp56);
            this.Manager.AddReturn(GetPlatformInfo, null, temp56);
            this.Manager.Comment("reaching state \'S105\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetPlatformChecker2)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S346\'");
                bool temp57;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp57);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp57);
                this.Manager.Comment("reaching state \'S631\'");
                int temp60 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker1)));
                if ((temp60 == 0)) {
                    this.Manager.Comment("reaching state \'S1072\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp58;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,2,Valid)\'");
                    temp58 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1642\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp58, "return of NetrLogonControl2Ex, state S1642");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label16;
                }
                if ((temp60 == 1)) {
                    this.Manager.Comment("reaching state \'S1073\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp59;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,2,Valid)\'");
                    temp59 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1643\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp59, "return of NetrLogonControl2Ex, state S1643");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label16;
                }
                throw new InvalidOperationException("never reached");
            label16:
;
                goto label19;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S347\'");
                bool temp61;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp61);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp61);
                this.Manager.Comment("reaching state \'S632\'");
                int temp64 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker3)));
                if ((temp64 == 0)) {
                    this.Manager.Comment("reaching state \'S1074\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp62;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp62 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1644\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp62, "return of NetrLogonControl2Ex, state S1644");
                    this.Manager.Comment("reaching state \'S2016\'");
                    goto label17;
                }
                if ((temp64 == 1)) {
                    this.Manager.Comment("reaching state \'S1075\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp63;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp63 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1645\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp63, "return of NetrLogonControl2Ex, state S1645");
                    this.Manager.Comment("reaching state \'S2017\'");
                    goto label17;
                }
                throw new InvalidOperationException("never reached");
            label17:
;
                goto label19;
            }
            if ((temp69 == 2)) {
                this.Manager.Comment("reaching state \'S348\'");
                bool temp65;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp65);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp65);
                this.Manager.Comment("reaching state \'S633\'");
                int temp68 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker5)));
                if ((temp68 == 0)) {
                    this.Manager.Comment("reaching state \'S1076\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp66;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp66 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1646\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp66, "return of NetrLogonControl2Ex, state S1646");
                    this.Manager.Comment("reaching state \'S2018\'");
                    goto label18;
                }
                if ((temp68 == 1)) {
                    this.Manager.Comment("reaching state \'S1077\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp67;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp67 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1647\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp67, "return of NetrLogonControl2Ex, state S1647");
                    this.Manager.Comment("reaching state \'S2019\'");
                    goto label18;
                }
                throw new InvalidOperationException("never reached");
            label18:
;
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S631");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S631");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S632");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S632");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S633");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS104GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S633");
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp70;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp70);
            this.Manager.AddReturn(GetPlatformInfo, null, temp70);
            this.Manager.Comment("reaching state \'S107\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetPlatformChecker2)));
            if ((temp83 == 0)) {
                this.Manager.Comment("reaching state \'S349\'");
                bool temp71;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp71);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp71);
                this.Manager.Comment("reaching state \'S634\'");
                int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker1)));
                if ((temp74 == 0)) {
                    this.Manager.Comment("reaching state \'S1078\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp72;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,2,Valid)\'");
                    temp72 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1648\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp72, "return of NetrLogonControl2Ex, state S1648");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label20;
                }
                if ((temp74 == 1)) {
                    this.Manager.Comment("reaching state \'S1079\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp73;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,2,Valid)\'");
                    temp73 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1649\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp73, "return of NetrLogonControl2Ex, state S1649");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label20;
                }
                throw new InvalidOperationException("never reached");
            label20:
;
                goto label23;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S350\'");
                bool temp75;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp75);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp75);
                this.Manager.Comment("reaching state \'S635\'");
                int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker3)));
                if ((temp78 == 0)) {
                    this.Manager.Comment("reaching state \'S1080\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp76;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp76 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1650\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp76, "return of NetrLogonControl2Ex, state S1650");
                    this.Manager.Comment("reaching state \'S2020\'");
                    goto label21;
                }
                if ((temp78 == 1)) {
                    this.Manager.Comment("reaching state \'S1081\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp77;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp77 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1651\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp77, "return of NetrLogonControl2Ex, state S1651");
                    this.Manager.Comment("reaching state \'S2021\'");
                    goto label21;
                }
                throw new InvalidOperationException("never reached");
            label21:
;
                goto label23;
            }
            if ((temp83 == 2)) {
                this.Manager.Comment("reaching state \'S351\'");
                bool temp79;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp79);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp79);
                this.Manager.Comment("reaching state \'S636\'");
                int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker5)));
                if ((temp82 == 0)) {
                    this.Manager.Comment("reaching state \'S1082\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp80;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp80 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1652\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp80, "return of NetrLogonControl2Ex, state S1652");
                    this.Manager.Comment("reaching state \'S2022\'");
                    goto label22;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S1083\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp81;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp81 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1653\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp81, "return of NetrLogonControl2Ex, state S1653");
                    this.Manager.Comment("reaching state \'S2023\'");
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S634");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S634");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S635");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S635");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S636");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS106GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S636");
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp84;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp84);
            this.Manager.AddReturn(GetPlatformInfo, null, temp84);
            this.Manager.Comment("reaching state \'S109\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetPlatformChecker2)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S352\'");
                bool temp85;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp85);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp85);
                this.Manager.Comment("reaching state \'S637\'");
                int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker1)));
                if ((temp88 == 0)) {
                    this.Manager.Comment("reaching state \'S1084\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp86;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,2,Valid)\'");
                    temp86 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1654\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp86, "return of NetrLogonControl2Ex, state S1654");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label24;
                }
                if ((temp88 == 1)) {
                    this.Manager.Comment("reaching state \'S1085\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp87;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,2,Valid)\'");
                    temp87 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1655\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp87, "return of NetrLogonControl2Ex, state S1655");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label24;
                }
                throw new InvalidOperationException("never reached");
            label24:
;
                goto label27;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S353\'");
                bool temp89;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp89);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp89);
                this.Manager.Comment("reaching state \'S638\'");
                int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker3)));
                if ((temp92 == 0)) {
                    this.Manager.Comment("reaching state \'S1086\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp90;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp90 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1656\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp90, "return of NetrLogonControl2Ex, state S1656");
                    this.Manager.Comment("reaching state \'S2024\'");
                    goto label25;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S1087\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp91;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp91 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1657\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp91, "return of NetrLogonControl2Ex, state S1657");
                    this.Manager.Comment("reaching state \'S2025\'");
                    goto label25;
                }
                throw new InvalidOperationException("never reached");
            label25:
;
                goto label27;
            }
            if ((temp97 == 2)) {
                this.Manager.Comment("reaching state \'S354\'");
                bool temp93;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp93);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp93);
                this.Manager.Comment("reaching state \'S639\'");
                int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker5)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S1088\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp94;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp94 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1658\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp94, "return of NetrLogonControl2Ex, state S1658");
                    this.Manager.Comment("reaching state \'S2026\'");
                    goto label26;
                }
                if ((temp96 == 1)) {
                    this.Manager.Comment("reaching state \'S1089\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp95;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp95 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1659\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp95, "return of NetrLogonControl2Ex, state S1659");
                    this.Manager.Comment("reaching state \'S2027\'");
                    goto label26;
                }
                throw new InvalidOperationException("never reached");
            label26:
;
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S637");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S637");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S638");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S638");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S639");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS108GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S639");
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp98;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp98);
            this.Manager.AddReturn(GetPlatformInfo, null, temp98);
            this.Manager.Comment("reaching state \'S111\'");
            int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetPlatformChecker2)));
            if ((temp111 == 0)) {
                this.Manager.Comment("reaching state \'S355\'");
                bool temp99;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp99);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp99);
                this.Manager.Comment("reaching state \'S640\'");
                int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker1)));
                if ((temp102 == 0)) {
                    this.Manager.Comment("reaching state \'S1090\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp100;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,2,Valid)\'");
                    temp100 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1660\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp100, "return of NetrLogonControl2Ex, state S1660");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label28;
                }
                if ((temp102 == 1)) {
                    this.Manager.Comment("reaching state \'S1091\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp101;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,2,Valid)\'");
                    temp101 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1661\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp101, "return of NetrLogonControl2Ex, state S1661");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label28;
                }
                throw new InvalidOperationException("never reached");
            label28:
;
                goto label31;
            }
            if ((temp111 == 1)) {
                this.Manager.Comment("reaching state \'S356\'");
                bool temp103;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp103);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp103);
                this.Manager.Comment("reaching state \'S641\'");
                int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker3)));
                if ((temp106 == 0)) {
                    this.Manager.Comment("reaching state \'S1092\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp104;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp104 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1662\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp104, "return of NetrLogonControl2Ex, state S1662");
                    this.Manager.Comment("reaching state \'S2028\'");
                    goto label29;
                }
                if ((temp106 == 1)) {
                    this.Manager.Comment("reaching state \'S1093\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp105;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp105 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1663\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp105, "return of NetrLogonControl2Ex, state S1663");
                    this.Manager.Comment("reaching state \'S2029\'");
                    goto label29;
                }
                throw new InvalidOperationException("never reached");
            label29:
;
                goto label31;
            }
            if ((temp111 == 2)) {
                this.Manager.Comment("reaching state \'S357\'");
                bool temp107;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp107);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp107);
                this.Manager.Comment("reaching state \'S642\'");
                int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker5)));
                if ((temp110 == 0)) {
                    this.Manager.Comment("reaching state \'S1094\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp108;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp108 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1664\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp108, "return of NetrLogonControl2Ex, state S1664");
                    this.Manager.Comment("reaching state \'S2030\'");
                    goto label30;
                }
                if ((temp110 == 1)) {
                    this.Manager.Comment("reaching state \'S1095\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp109;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp109 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1665\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp109, "return of NetrLogonControl2Ex, state S1665");
                    this.Manager.Comment("reaching state \'S2031\'");
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S640");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S640");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S641");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S641");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S642");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS110GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S642");
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp112;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp112);
            this.Manager.AddReturn(GetPlatformInfo, null, temp112);
            this.Manager.Comment("reaching state \'S113\'");
            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetPlatformChecker2)));
            if ((temp125 == 0)) {
                this.Manager.Comment("reaching state \'S358\'");
                bool temp113;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp113);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp113);
                this.Manager.Comment("reaching state \'S643\'");
                int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker1)));
                if ((temp116 == 0)) {
                    this.Manager.Comment("reaching state \'S1096\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp114;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,2,Valid)\'");
                    temp114 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1666\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp114, "return of NetrLogonControl2Ex, state S1666");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label32;
                }
                if ((temp116 == 1)) {
                    this.Manager.Comment("reaching state \'S1097\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp115;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,2,Valid)\'");
                    temp115 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1667\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp115, "return of NetrLogonControl2Ex, state S1667");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label32;
                }
                throw new InvalidOperationException("never reached");
            label32:
;
                goto label35;
            }
            if ((temp125 == 1)) {
                this.Manager.Comment("reaching state \'S359\'");
                bool temp117;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp117);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp117);
                this.Manager.Comment("reaching state \'S644\'");
                int temp120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker3)));
                if ((temp120 == 0)) {
                    this.Manager.Comment("reaching state \'S1098\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp118;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp118 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1668\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp118, "return of NetrLogonControl2Ex, state S1668");
                    this.Manager.Comment("reaching state \'S2032\'");
                    goto label33;
                }
                if ((temp120 == 1)) {
                    this.Manager.Comment("reaching state \'S1099\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp119;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp119 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1669\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp119, "return of NetrLogonControl2Ex, state S1669");
                    this.Manager.Comment("reaching state \'S2033\'");
                    goto label33;
                }
                throw new InvalidOperationException("never reached");
            label33:
;
                goto label35;
            }
            if ((temp125 == 2)) {
                this.Manager.Comment("reaching state \'S360\'");
                bool temp121;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp121);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp121);
                this.Manager.Comment("reaching state \'S645\'");
                int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker5)));
                if ((temp124 == 0)) {
                    this.Manager.Comment("reaching state \'S1100\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp122;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp122 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1670\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp122, "return of NetrLogonControl2Ex, state S1670");
                    this.Manager.Comment("reaching state \'S2034\'");
                    goto label34;
                }
                if ((temp124 == 1)) {
                    this.Manager.Comment("reaching state \'S1101\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp123;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp123 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1671\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp123, "return of NetrLogonControl2Ex, state S1671");
                    this.Manager.Comment("reaching state \'S2035\'");
                    goto label34;
                }
                throw new InvalidOperationException("never reached");
            label34:
;
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S643");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S643");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S644");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S644");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S645");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS112GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S645");
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp126;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp126);
            this.Manager.AddReturn(GetPlatformInfo, null, temp126);
            this.Manager.Comment("reaching state \'S115\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetPlatformChecker2)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S361\'");
                bool temp127;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp127);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp127);
                this.Manager.Comment("reaching state \'S646\'");
                int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker1)));
                if ((temp130 == 0)) {
                    this.Manager.Comment("reaching state \'S1102\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp128;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,4,Valid)\'");
                    temp128 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1672\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp128, "return of NetrLogonControl2Ex, state S1672");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label36;
                }
                if ((temp130 == 1)) {
                    this.Manager.Comment("reaching state \'S1103\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp129;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,4,Valid)\'");
                    temp129 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1673\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp129, "return of NetrLogonControl2Ex, state S1673");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label36;
                }
                throw new InvalidOperationException("never reached");
            label36:
;
                goto label39;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S362\'");
                bool temp131;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp131);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp131);
                this.Manager.Comment("reaching state \'S647\'");
                int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker3)));
                if ((temp134 == 0)) {
                    this.Manager.Comment("reaching state \'S1104\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp132;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp132 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1674\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp132, "return of NetrLogonControl2Ex, state S1674");
                    this.Manager.Comment("reaching state \'S2036\'");
                    goto label37;
                }
                if ((temp134 == 1)) {
                    this.Manager.Comment("reaching state \'S1105\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp133;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp133 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1675\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp133, "return of NetrLogonControl2Ex, state S1675");
                    this.Manager.Comment("reaching state \'S2037\'");
                    goto label37;
                }
                throw new InvalidOperationException("never reached");
            label37:
;
                goto label39;
            }
            if ((temp139 == 2)) {
                this.Manager.Comment("reaching state \'S363\'");
                bool temp135;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp135);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp135);
                this.Manager.Comment("reaching state \'S648\'");
                int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker5)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S1106\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp136;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp136 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1676\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp136, "return of NetrLogonControl2Ex, state S1676");
                    this.Manager.Comment("reaching state \'S2038\'");
                    goto label38;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S1107\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp137;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp137 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1677\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp137, "return of NetrLogonControl2Ex, state S1677");
                    this.Manager.Comment("reaching state \'S2039\'");
                    goto label38;
                }
                throw new InvalidOperationException("never reached");
            label38:
;
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S646");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S646");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S647");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S647");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S648");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS114GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S648");
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp140;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp140);
            this.Manager.AddReturn(GetPlatformInfo, null, temp140);
            this.Manager.Comment("reaching state \'S117\'");
            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetPlatformChecker2)));
            if ((temp153 == 0)) {
                this.Manager.Comment("reaching state \'S364\'");
                bool temp141;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp141);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp141);
                this.Manager.Comment("reaching state \'S649\'");
                int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker1)));
                if ((temp144 == 0)) {
                    this.Manager.Comment("reaching state \'S1108\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp142;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,4,Valid)\'");
                    temp142 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1678\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp142, "return of NetrLogonControl2Ex, state S1678");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label40;
                }
                if ((temp144 == 1)) {
                    this.Manager.Comment("reaching state \'S1109\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp143;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,4,Valid)\'");
                    temp143 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1679\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp143, "return of NetrLogonControl2Ex, state S1679");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label40;
                }
                throw new InvalidOperationException("never reached");
            label40:
;
                goto label43;
            }
            if ((temp153 == 1)) {
                this.Manager.Comment("reaching state \'S365\'");
                bool temp145;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp145);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp145);
                this.Manager.Comment("reaching state \'S650\'");
                int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker3)));
                if ((temp148 == 0)) {
                    this.Manager.Comment("reaching state \'S1110\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp146;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp146 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1680\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp146, "return of NetrLogonControl2Ex, state S1680");
                    this.Manager.Comment("reaching state \'S2040\'");
                    goto label41;
                }
                if ((temp148 == 1)) {
                    this.Manager.Comment("reaching state \'S1111\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp147;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp147 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1681\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp147, "return of NetrLogonControl2Ex, state S1681");
                    this.Manager.Comment("reaching state \'S2041\'");
                    goto label41;
                }
                throw new InvalidOperationException("never reached");
            label41:
;
                goto label43;
            }
            if ((temp153 == 2)) {
                this.Manager.Comment("reaching state \'S366\'");
                bool temp149;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp149);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp149);
                this.Manager.Comment("reaching state \'S651\'");
                int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker5)));
                if ((temp152 == 0)) {
                    this.Manager.Comment("reaching state \'S1112\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp150;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp150 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1682\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp150, "return of NetrLogonControl2Ex, state S1682");
                    this.Manager.Comment("reaching state \'S2042\'");
                    goto label42;
                }
                if ((temp152 == 1)) {
                    this.Manager.Comment("reaching state \'S1113\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp151;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp151 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1683\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp151, "return of NetrLogonControl2Ex, state S1683");
                    this.Manager.Comment("reaching state \'S2043\'");
                    goto label42;
                }
                throw new InvalidOperationException("never reached");
            label42:
;
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S649");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S649");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S650");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S650");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S651");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS116GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S651");
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp154;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp154);
            this.Manager.AddReturn(GetPlatformInfo, null, temp154);
            this.Manager.Comment("reaching state \'S119\'");
            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetPlatformChecker2)));
            if ((temp167 == 0)) {
                this.Manager.Comment("reaching state \'S367\'");
                bool temp155;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp155);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp155);
                this.Manager.Comment("reaching state \'S652\'");
                int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker1)));
                if ((temp158 == 0)) {
                    this.Manager.Comment("reaching state \'S1114\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp156;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,4,Valid)\'");
                    temp156 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1684\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp156, "return of NetrLogonControl2Ex, state S1684");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label44;
                }
                if ((temp158 == 1)) {
                    this.Manager.Comment("reaching state \'S1115\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp157;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,4,Valid)\'");
                    temp157 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1685\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp157, "return of NetrLogonControl2Ex, state S1685");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label44;
                }
                throw new InvalidOperationException("never reached");
            label44:
;
                goto label47;
            }
            if ((temp167 == 1)) {
                this.Manager.Comment("reaching state \'S368\'");
                bool temp159;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp159);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp159);
                this.Manager.Comment("reaching state \'S653\'");
                int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker3)));
                if ((temp162 == 0)) {
                    this.Manager.Comment("reaching state \'S1116\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp160;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp160 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1686\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp160, "return of NetrLogonControl2Ex, state S1686");
                    this.Manager.Comment("reaching state \'S2044\'");
                    goto label45;
                }
                if ((temp162 == 1)) {
                    this.Manager.Comment("reaching state \'S1117\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp161;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp161 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1687\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp161, "return of NetrLogonControl2Ex, state S1687");
                    this.Manager.Comment("reaching state \'S2045\'");
                    goto label45;
                }
                throw new InvalidOperationException("never reached");
            label45:
;
                goto label47;
            }
            if ((temp167 == 2)) {
                this.Manager.Comment("reaching state \'S369\'");
                bool temp163;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp163);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp163);
                this.Manager.Comment("reaching state \'S654\'");
                int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker5)));
                if ((temp166 == 0)) {
                    this.Manager.Comment("reaching state \'S1118\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp164;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp164 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1688\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp164, "return of NetrLogonControl2Ex, state S1688");
                    this.Manager.Comment("reaching state \'S2046\'");
                    goto label46;
                }
                if ((temp166 == 1)) {
                    this.Manager.Comment("reaching state \'S1119\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp165;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp165 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1689\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp165, "return of NetrLogonControl2Ex, state S1689");
                    this.Manager.Comment("reaching state \'S2047\'");
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S652");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S652");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S653");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S653");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S654");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS118GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S654");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12");
            this.Manager.Comment("reaching state \'S12\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp168;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp168);
            this.Manager.AddReturn(GetPlatformInfo, null, temp168);
            this.Manager.Comment("reaching state \'S13\'");
            int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetPlatformChecker2)));
            if ((temp181 == 0)) {
                this.Manager.Comment("reaching state \'S208\'");
                bool temp169;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp169);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp169);
                this.Manager.Comment("reaching state \'S493\'");
                int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker1)));
                if ((temp172 == 0)) {
                    this.Manager.Comment("reaching state \'S796\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp170;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,2,Valid)\'");
                    temp170 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1366\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp170, "return of NetrLogonControl2Ex, state S1366");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label48;
                }
                if ((temp172 == 1)) {
                    this.Manager.Comment("reaching state \'S797\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp171;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,2,Valid)\'");
                    temp171 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1367\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp171, "return of NetrLogonControl2Ex, state S1367");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label48;
                }
                throw new InvalidOperationException("never reached");
            label48:
;
                goto label51;
            }
            if ((temp181 == 1)) {
                this.Manager.Comment("reaching state \'S209\'");
                bool temp173;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp173);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp173);
                this.Manager.Comment("reaching state \'S494\'");
                int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker3)));
                if ((temp176 == 0)) {
                    this.Manager.Comment("reaching state \'S798\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp174;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp174 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1368\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp174, "return of NetrLogonControl2Ex, state S1368");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label49;
                }
                if ((temp176 == 1)) {
                    this.Manager.Comment("reaching state \'S799\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp175;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp175 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1369\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp175, "return of NetrLogonControl2Ex, state S1369");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label49;
                }
                throw new InvalidOperationException("never reached");
            label49:
;
                goto label51;
            }
            if ((temp181 == 2)) {
                this.Manager.Comment("reaching state \'S210\'");
                bool temp177;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp177);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp177);
                this.Manager.Comment("reaching state \'S495\'");
                int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker5)));
                if ((temp180 == 0)) {
                    this.Manager.Comment("reaching state \'S800\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp178;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp178 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1370\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp178, "return of NetrLogonControl2Ex, state S1370");
                    this.Manager.Comment("reaching state \'S1916\'");
                    goto label50;
                }
                if ((temp180 == 1)) {
                    this.Manager.Comment("reaching state \'S801\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp179;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp179 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1371\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp179, "return of NetrLogonControl2Ex, state S1371");
                    this.Manager.Comment("reaching state \'S1917\'");
                    goto label50;
                }
                throw new InvalidOperationException("never reached");
            label50:
;
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S493");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S493");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S494");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S494");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S495");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS12GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S495");
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120");
            this.Manager.Comment("reaching state \'S120\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp182;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp182);
            this.Manager.AddReturn(GetPlatformInfo, null, temp182);
            this.Manager.Comment("reaching state \'S121\'");
            int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetPlatformChecker2)));
            if ((temp195 == 0)) {
                this.Manager.Comment("reaching state \'S370\'");
                bool temp183;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp183);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp183);
                this.Manager.Comment("reaching state \'S655\'");
                int temp186 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker1)));
                if ((temp186 == 0)) {
                    this.Manager.Comment("reaching state \'S1120\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp184;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,4,Valid)\'");
                    temp184 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1690\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp184, "return of NetrLogonControl2Ex, state S1690");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label52;
                }
                if ((temp186 == 1)) {
                    this.Manager.Comment("reaching state \'S1121\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp185;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,4,Valid)\'");
                    temp185 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1691\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp185, "return of NetrLogonControl2Ex, state S1691");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label55;
            }
            if ((temp195 == 1)) {
                this.Manager.Comment("reaching state \'S371\'");
                bool temp187;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp187);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp187);
                this.Manager.Comment("reaching state \'S656\'");
                int temp190 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker3)));
                if ((temp190 == 0)) {
                    this.Manager.Comment("reaching state \'S1122\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp188;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp188 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1692\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp188, "return of NetrLogonControl2Ex, state S1692");
                    this.Manager.Comment("reaching state \'S2048\'");
                    goto label53;
                }
                if ((temp190 == 1)) {
                    this.Manager.Comment("reaching state \'S1123\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp189;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp189 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1693\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp189, "return of NetrLogonControl2Ex, state S1693");
                    this.Manager.Comment("reaching state \'S2049\'");
                    goto label53;
                }
                throw new InvalidOperationException("never reached");
            label53:
;
                goto label55;
            }
            if ((temp195 == 2)) {
                this.Manager.Comment("reaching state \'S372\'");
                bool temp191;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp191);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp191);
                this.Manager.Comment("reaching state \'S657\'");
                int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker5)));
                if ((temp194 == 0)) {
                    this.Manager.Comment("reaching state \'S1124\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp192;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp192 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1694\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp192, "return of NetrLogonControl2Ex, state S1694");
                    this.Manager.Comment("reaching state \'S2050\'");
                    goto label54;
                }
                if ((temp194 == 1)) {
                    this.Manager.Comment("reaching state \'S1125\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp193;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp193 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1695\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp193, "return of NetrLogonControl2Ex, state S1695");
                    this.Manager.Comment("reaching state \'S2051\'");
                    goto label54;
                }
                throw new InvalidOperationException("never reached");
            label54:
;
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S655");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S655");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S656");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S656");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S657");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS120GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S657");
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122");
            this.Manager.Comment("reaching state \'S122\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp196;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp196);
            this.Manager.AddReturn(GetPlatformInfo, null, temp196);
            this.Manager.Comment("reaching state \'S123\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetPlatformChecker2)));
            if ((temp209 == 0)) {
                this.Manager.Comment("reaching state \'S373\'");
                bool temp197;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp197);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp197);
                this.Manager.Comment("reaching state \'S658\'");
                int temp200 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker1)));
                if ((temp200 == 0)) {
                    this.Manager.Comment("reaching state \'S1126\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp198;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp198 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1696\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp198, "return of NetrLogonControl2Ex, state S1696");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label56;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S1127\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp199;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp199 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1697\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp199, "return of NetrLogonControl2Ex, state S1697");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label56;
                }
                throw new InvalidOperationException("never reached");
            label56:
;
                goto label59;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S374\'");
                bool temp201;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp201);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp201);
                this.Manager.Comment("reaching state \'S659\'");
                int temp204 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker3)));
                if ((temp204 == 0)) {
                    this.Manager.Comment("reaching state \'S1128\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp202;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp202 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1698\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp202, "return of NetrLogonControl2Ex, state S1698");
                    this.Manager.Comment("reaching state \'S2052\'");
                    goto label57;
                }
                if ((temp204 == 1)) {
                    this.Manager.Comment("reaching state \'S1129\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp203;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp203 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1699\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp203, "return of NetrLogonControl2Ex, state S1699");
                    this.Manager.Comment("reaching state \'S2053\'");
                    goto label57;
                }
                throw new InvalidOperationException("never reached");
            label57:
;
                goto label59;
            }
            if ((temp209 == 2)) {
                this.Manager.Comment("reaching state \'S375\'");
                bool temp205;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp205);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp205);
                this.Manager.Comment("reaching state \'S660\'");
                int temp208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker5)));
                if ((temp208 == 0)) {
                    this.Manager.Comment("reaching state \'S1130\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp206;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp206 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1700\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp206, "return of NetrLogonControl2Ex, state S1700");
                    this.Manager.Comment("reaching state \'S2054\'");
                    goto label58;
                }
                if ((temp208 == 1)) {
                    this.Manager.Comment("reaching state \'S1131\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp207;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp207 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1701\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp207, "return of NetrLogonControl2Ex, state S1701");
                    this.Manager.Comment("reaching state \'S2055\'");
                    goto label58;
                }
                throw new InvalidOperationException("never reached");
            label58:
;
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S658");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S658");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S659");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S659");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S660");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS122GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S660");
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp210;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp210);
            this.Manager.AddReturn(GetPlatformInfo, null, temp210);
            this.Manager.Comment("reaching state \'S125\'");
            int temp223 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetPlatformChecker2)));
            if ((temp223 == 0)) {
                this.Manager.Comment("reaching state \'S376\'");
                bool temp211;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp211);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp211);
                this.Manager.Comment("reaching state \'S661\'");
                int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker1)));
                if ((temp214 == 0)) {
                    this.Manager.Comment("reaching state \'S1132\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp212;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,4,Valid)\'");
                    temp212 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103931");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1702\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp212, "return of NetrLogonControl2Ex, state S1702");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label60;
                }
                if ((temp214 == 1)) {
                    this.Manager.Comment("reaching state \'S1133\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp213;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,4,Valid)\'");
                    temp213 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103931");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1703\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp213, "return of NetrLogonControl2Ex, state S1703");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label60;
                }
                throw new InvalidOperationException("never reached");
            label60:
;
                goto label63;
            }
            if ((temp223 == 1)) {
                this.Manager.Comment("reaching state \'S377\'");
                bool temp215;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp215);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp215);
                this.Manager.Comment("reaching state \'S662\'");
                int temp218 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker3)));
                if ((temp218 == 0)) {
                    this.Manager.Comment("reaching state \'S1134\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp216;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp216 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1704\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp216, "return of NetrLogonControl2Ex, state S1704");
                    this.Manager.Comment("reaching state \'S2056\'");
                    goto label61;
                }
                if ((temp218 == 1)) {
                    this.Manager.Comment("reaching state \'S1135\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp217;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp217 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1705\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp217, "return of NetrLogonControl2Ex, state S1705");
                    this.Manager.Comment("reaching state \'S2057\'");
                    goto label61;
                }
                throw new InvalidOperationException("never reached");
            label61:
;
                goto label63;
            }
            if ((temp223 == 2)) {
                this.Manager.Comment("reaching state \'S378\'");
                bool temp219;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp219);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp219);
                this.Manager.Comment("reaching state \'S663\'");
                int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker5)));
                if ((temp222 == 0)) {
                    this.Manager.Comment("reaching state \'S1136\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp220;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp220 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1706\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp220, "return of NetrLogonControl2Ex, state S1706");
                    this.Manager.Comment("reaching state \'S2058\'");
                    goto label62;
                }
                if ((temp222 == 1)) {
                    this.Manager.Comment("reaching state \'S1137\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp221;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp221 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1707\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp221, "return of NetrLogonControl2Ex, state S1707");
                    this.Manager.Comment("reaching state \'S2059\'");
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S661");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S661");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S662");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S662");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S663");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS124GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S663");
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp224;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp224);
            this.Manager.AddReturn(GetPlatformInfo, null, temp224);
            this.Manager.Comment("reaching state \'S127\'");
            int temp237 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetPlatformChecker2)));
            if ((temp237 == 0)) {
                this.Manager.Comment("reaching state \'S379\'");
                bool temp225;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp225);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp225);
                this.Manager.Comment("reaching state \'S664\'");
                int temp228 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker1)));
                if ((temp228 == 0)) {
                    this.Manager.Comment("reaching state \'S1138\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp226;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,4,Valid)\'");
                    temp226 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1708\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp226, "return of NetrLogonControl2Ex, state S1708");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label64;
                }
                if ((temp228 == 1)) {
                    this.Manager.Comment("reaching state \'S1139\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp227;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,4,Valid)\'");
                    temp227 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1709\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp227, "return of NetrLogonControl2Ex, state S1709");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label64;
                }
                throw new InvalidOperationException("never reached");
            label64:
;
                goto label67;
            }
            if ((temp237 == 1)) {
                this.Manager.Comment("reaching state \'S380\'");
                bool temp229;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp229);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp229);
                this.Manager.Comment("reaching state \'S665\'");
                int temp232 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker3)));
                if ((temp232 == 0)) {
                    this.Manager.Comment("reaching state \'S1140\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp230;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp230 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1710\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp230, "return of NetrLogonControl2Ex, state S1710");
                    this.Manager.Comment("reaching state \'S2060\'");
                    goto label65;
                }
                if ((temp232 == 1)) {
                    this.Manager.Comment("reaching state \'S1141\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp231;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp231 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1711\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp231, "return of NetrLogonControl2Ex, state S1711");
                    this.Manager.Comment("reaching state \'S2061\'");
                    goto label65;
                }
                throw new InvalidOperationException("never reached");
            label65:
;
                goto label67;
            }
            if ((temp237 == 2)) {
                this.Manager.Comment("reaching state \'S381\'");
                bool temp233;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp233);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp233);
                this.Manager.Comment("reaching state \'S666\'");
                int temp236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker5)));
                if ((temp236 == 0)) {
                    this.Manager.Comment("reaching state \'S1142\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp234;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp234 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1712\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp234, "return of NetrLogonControl2Ex, state S1712");
                    this.Manager.Comment("reaching state \'S2062\'");
                    goto label66;
                }
                if ((temp236 == 1)) {
                    this.Manager.Comment("reaching state \'S1143\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp235;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp235 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1713\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp235, "return of NetrLogonControl2Ex, state S1713");
                    this.Manager.Comment("reaching state \'S2063\'");
                    goto label66;
                }
                throw new InvalidOperationException("never reached");
            label66:
;
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S664");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S664");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S665");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S665");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S666");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS126GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S666");
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128");
            this.Manager.Comment("reaching state \'S128\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp238;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp238);
            this.Manager.AddReturn(GetPlatformInfo, null, temp238);
            this.Manager.Comment("reaching state \'S129\'");
            int temp251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetPlatformChecker2)));
            if ((temp251 == 0)) {
                this.Manager.Comment("reaching state \'S382\'");
                bool temp239;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp239);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp239);
                this.Manager.Comment("reaching state \'S667\'");
                int temp242 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker1)));
                if ((temp242 == 0)) {
                    this.Manager.Comment("reaching state \'S1144\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp240;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,4,Valid)\'");
                    temp240 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1714\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp240, "return of NetrLogonControl2Ex, state S1714");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label68;
                }
                if ((temp242 == 1)) {
                    this.Manager.Comment("reaching state \'S1145\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp241;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,4,Valid)\'");
                    temp241 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1715\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp241, "return of NetrLogonControl2Ex, state S1715");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label68;
                }
                throw new InvalidOperationException("never reached");
            label68:
;
                goto label71;
            }
            if ((temp251 == 1)) {
                this.Manager.Comment("reaching state \'S383\'");
                bool temp243;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp243);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp243);
                this.Manager.Comment("reaching state \'S668\'");
                int temp246 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker3)));
                if ((temp246 == 0)) {
                    this.Manager.Comment("reaching state \'S1146\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp244;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp244 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1716\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp244, "return of NetrLogonControl2Ex, state S1716");
                    this.Manager.Comment("reaching state \'S2064\'");
                    goto label69;
                }
                if ((temp246 == 1)) {
                    this.Manager.Comment("reaching state \'S1147\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp245;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp245 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1717\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp245, "return of NetrLogonControl2Ex, state S1717");
                    this.Manager.Comment("reaching state \'S2065\'");
                    goto label69;
                }
                throw new InvalidOperationException("never reached");
            label69:
;
                goto label71;
            }
            if ((temp251 == 2)) {
                this.Manager.Comment("reaching state \'S384\'");
                bool temp247;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp247);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp247);
                this.Manager.Comment("reaching state \'S669\'");
                int temp250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker5)));
                if ((temp250 == 0)) {
                    this.Manager.Comment("reaching state \'S1148\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp248;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp248 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1718\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp248, "return of NetrLogonControl2Ex, state S1718");
                    this.Manager.Comment("reaching state \'S2066\'");
                    goto label70;
                }
                if ((temp250 == 1)) {
                    this.Manager.Comment("reaching state \'S1149\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp249;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp249 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1719\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp249, "return of NetrLogonControl2Ex, state S1719");
                    this.Manager.Comment("reaching state \'S2067\'");
                    goto label70;
                }
                throw new InvalidOperationException("never reached");
            label70:
;
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S667");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S667");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S668");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S668");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S669");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS128GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S669");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp252;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp252);
            this.Manager.AddReturn(GetPlatformInfo, null, temp252);
            this.Manager.Comment("reaching state \'S131\'");
            int temp265 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetPlatformChecker2)));
            if ((temp265 == 0)) {
                this.Manager.Comment("reaching state \'S385\'");
                bool temp253;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp253);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp253);
                this.Manager.Comment("reaching state \'S670\'");
                int temp256 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker1)));
                if ((temp256 == 0)) {
                    this.Manager.Comment("reaching state \'S1150\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp254;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,4,Valid)\'");
                    temp254 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1720\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp254, "return of NetrLogonControl2Ex, state S1720");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label72;
                }
                if ((temp256 == 1)) {
                    this.Manager.Comment("reaching state \'S1151\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp255;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,4,Valid)\'");
                    temp255 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1721\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp255, "return of NetrLogonControl2Ex, state S1721");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label72;
                }
                throw new InvalidOperationException("never reached");
            label72:
;
                goto label75;
            }
            if ((temp265 == 1)) {
                this.Manager.Comment("reaching state \'S386\'");
                bool temp257;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp257);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp257);
                this.Manager.Comment("reaching state \'S671\'");
                int temp260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker3)));
                if ((temp260 == 0)) {
                    this.Manager.Comment("reaching state \'S1152\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp258;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp258 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1722\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp258, "return of NetrLogonControl2Ex, state S1722");
                    this.Manager.Comment("reaching state \'S2068\'");
                    goto label73;
                }
                if ((temp260 == 1)) {
                    this.Manager.Comment("reaching state \'S1153\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp259;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp259 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1723\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp259, "return of NetrLogonControl2Ex, state S1723");
                    this.Manager.Comment("reaching state \'S2069\'");
                    goto label73;
                }
                throw new InvalidOperationException("never reached");
            label73:
;
                goto label75;
            }
            if ((temp265 == 2)) {
                this.Manager.Comment("reaching state \'S387\'");
                bool temp261;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp261);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp261);
                this.Manager.Comment("reaching state \'S672\'");
                int temp264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker5)));
                if ((temp264 == 0)) {
                    this.Manager.Comment("reaching state \'S1154\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp262;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp262 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1724\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp262, "return of NetrLogonControl2Ex, state S1724");
                    this.Manager.Comment("reaching state \'S2070\'");
                    goto label74;
                }
                if ((temp264 == 1)) {
                    this.Manager.Comment("reaching state \'S1155\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp263;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp263 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1725\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp263, "return of NetrLogonControl2Ex, state S1725");
                    this.Manager.Comment("reaching state \'S2071\'");
                    goto label74;
                }
                throw new InvalidOperationException("never reached");
            label74:
;
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S670");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S670");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S671");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S671");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S672");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS130GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S672");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp266;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp266);
            this.Manager.AddReturn(GetPlatformInfo, null, temp266);
            this.Manager.Comment("reaching state \'S133\'");
            int temp279 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetPlatformChecker2)));
            if ((temp279 == 0)) {
                this.Manager.Comment("reaching state \'S388\'");
                bool temp267;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp267);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp267);
                this.Manager.Comment("reaching state \'S673\'");
                int temp270 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker1)));
                if ((temp270 == 0)) {
                    this.Manager.Comment("reaching state \'S1156\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp268;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,4,Valid)\'");
                    temp268 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1726\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp268, "return of NetrLogonControl2Ex, state S1726");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label76;
                }
                if ((temp270 == 1)) {
                    this.Manager.Comment("reaching state \'S1157\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp269;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,4,Valid)\'");
                    temp269 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1727\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp269, "return of NetrLogonControl2Ex, state S1727");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label76;
                }
                throw new InvalidOperationException("never reached");
            label76:
;
                goto label79;
            }
            if ((temp279 == 1)) {
                this.Manager.Comment("reaching state \'S389\'");
                bool temp271;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp271);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp271);
                this.Manager.Comment("reaching state \'S674\'");
                int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker3)));
                if ((temp274 == 0)) {
                    this.Manager.Comment("reaching state \'S1158\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp272;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp272 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1728\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp272, "return of NetrLogonControl2Ex, state S1728");
                    this.Manager.Comment("reaching state \'S2072\'");
                    goto label77;
                }
                if ((temp274 == 1)) {
                    this.Manager.Comment("reaching state \'S1159\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp273;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp273 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1729\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp273, "return of NetrLogonControl2Ex, state S1729");
                    this.Manager.Comment("reaching state \'S2073\'");
                    goto label77;
                }
                throw new InvalidOperationException("never reached");
            label77:
;
                goto label79;
            }
            if ((temp279 == 2)) {
                this.Manager.Comment("reaching state \'S390\'");
                bool temp275;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp275);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp275);
                this.Manager.Comment("reaching state \'S675\'");
                int temp278 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker5)));
                if ((temp278 == 0)) {
                    this.Manager.Comment("reaching state \'S1160\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp276;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp276 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1730\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp276, "return of NetrLogonControl2Ex, state S1730");
                    this.Manager.Comment("reaching state \'S2074\'");
                    goto label78;
                }
                if ((temp278 == 1)) {
                    this.Manager.Comment("reaching state \'S1161\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp277;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp277 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1731\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp277, "return of NetrLogonControl2Ex, state S1731");
                    this.Manager.Comment("reaching state \'S2075\'");
                    goto label78;
                }
                throw new InvalidOperationException("never reached");
            label78:
;
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S673");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S673");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S674");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S674");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S675");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS132GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S675");
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp280;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp280);
            this.Manager.AddReturn(GetPlatformInfo, null, temp280);
            this.Manager.Comment("reaching state \'S135\'");
            int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetPlatformChecker2)));
            if ((temp293 == 0)) {
                this.Manager.Comment("reaching state \'S391\'");
                bool temp281;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp281);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp281);
                this.Manager.Comment("reaching state \'S676\'");
                int temp284 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker1)));
                if ((temp284 == 0)) {
                    this.Manager.Comment("reaching state \'S1162\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp282;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,4,Valid)\'");
                    temp282 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1732\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp282, "return of NetrLogonControl2Ex, state S1732");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label80;
                }
                if ((temp284 == 1)) {
                    this.Manager.Comment("reaching state \'S1163\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp283;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,4,Valid)\'");
                    temp283 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1733\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp283, "return of NetrLogonControl2Ex, state S1733");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label80;
                }
                throw new InvalidOperationException("never reached");
            label80:
;
                goto label83;
            }
            if ((temp293 == 1)) {
                this.Manager.Comment("reaching state \'S392\'");
                bool temp285;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp285);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp285);
                this.Manager.Comment("reaching state \'S677\'");
                int temp288 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker3)));
                if ((temp288 == 0)) {
                    this.Manager.Comment("reaching state \'S1164\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp286;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp286 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1734\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp286, "return of NetrLogonControl2Ex, state S1734");
                    this.Manager.Comment("reaching state \'S2076\'");
                    goto label81;
                }
                if ((temp288 == 1)) {
                    this.Manager.Comment("reaching state \'S1165\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp287;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp287 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1735\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp287, "return of NetrLogonControl2Ex, state S1735");
                    this.Manager.Comment("reaching state \'S2077\'");
                    goto label81;
                }
                throw new InvalidOperationException("never reached");
            label81:
;
                goto label83;
            }
            if ((temp293 == 2)) {
                this.Manager.Comment("reaching state \'S393\'");
                bool temp289;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp289);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp289);
                this.Manager.Comment("reaching state \'S678\'");
                int temp292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker5)));
                if ((temp292 == 0)) {
                    this.Manager.Comment("reaching state \'S1166\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp290;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp290 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1736\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp290, "return of NetrLogonControl2Ex, state S1736");
                    this.Manager.Comment("reaching state \'S2078\'");
                    goto label82;
                }
                if ((temp292 == 1)) {
                    this.Manager.Comment("reaching state \'S1167\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp291;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp291 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1737\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp291, "return of NetrLogonControl2Ex, state S1737");
                    this.Manager.Comment("reaching state \'S2079\'");
                    goto label82;
                }
                throw new InvalidOperationException("never reached");
            label82:
;
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S676");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S676");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S677");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S677");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S678");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS134GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S678");
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp294;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp294);
            this.Manager.AddReturn(GetPlatformInfo, null, temp294);
            this.Manager.Comment("reaching state \'S137\'");
            int temp307 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetPlatformChecker2)));
            if ((temp307 == 0)) {
                this.Manager.Comment("reaching state \'S394\'");
                bool temp295;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp295);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp295);
                this.Manager.Comment("reaching state \'S679\'");
                int temp298 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker1)));
                if ((temp298 == 0)) {
                    this.Manager.Comment("reaching state \'S1168\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp296;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,3,Valid)\'");
                    temp296 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1738\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp296, "return of NetrLogonControl2Ex, state S1738");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label84;
                }
                if ((temp298 == 1)) {
                    this.Manager.Comment("reaching state \'S1169\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp297;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,3,Valid)\'");
                    temp297 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1739\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp297, "return of NetrLogonControl2Ex, state S1739");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label84;
                }
                throw new InvalidOperationException("never reached");
            label84:
;
                goto label87;
            }
            if ((temp307 == 1)) {
                this.Manager.Comment("reaching state \'S395\'");
                bool temp299;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp299);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp299);
                this.Manager.Comment("reaching state \'S680\'");
                int temp302 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker3)));
                if ((temp302 == 0)) {
                    this.Manager.Comment("reaching state \'S1170\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp300;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp300 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1740\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp300, "return of NetrLogonControl2Ex, state S1740");
                    this.Manager.Comment("reaching state \'S2080\'");
                    goto label85;
                }
                if ((temp302 == 1)) {
                    this.Manager.Comment("reaching state \'S1171\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp301;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp301 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1741\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp301, "return of NetrLogonControl2Ex, state S1741");
                    this.Manager.Comment("reaching state \'S2081\'");
                    goto label85;
                }
                throw new InvalidOperationException("never reached");
            label85:
;
                goto label87;
            }
            if ((temp307 == 2)) {
                this.Manager.Comment("reaching state \'S396\'");
                bool temp303;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp303);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp303);
                this.Manager.Comment("reaching state \'S681\'");
                int temp306 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker5)));
                if ((temp306 == 0)) {
                    this.Manager.Comment("reaching state \'S1172\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp304;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp304 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1742\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp304, "return of NetrLogonControl2Ex, state S1742");
                    this.Manager.Comment("reaching state \'S2082\'");
                    goto label86;
                }
                if ((temp306 == 1)) {
                    this.Manager.Comment("reaching state \'S1173\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp305;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp305 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1743\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp305, "return of NetrLogonControl2Ex, state S1743");
                    this.Manager.Comment("reaching state \'S2083\'");
                    goto label86;
                }
                throw new InvalidOperationException("never reached");
            label86:
;
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S679");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S679");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S680");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S680");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S681");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS136GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S681");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp308;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp308);
            this.Manager.AddReturn(GetPlatformInfo, null, temp308);
            this.Manager.Comment("reaching state \'S139\'");
            int temp321 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetPlatformChecker2)));
            if ((temp321 == 0)) {
                this.Manager.Comment("reaching state \'S397\'");
                bool temp309;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp309);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp309);
                this.Manager.Comment("reaching state \'S682\'");
                int temp312 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker1)));
                if ((temp312 == 0)) {
                    this.Manager.Comment("reaching state \'S1174\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp310;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,1,Valid)\'");
                    temp310 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1744\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp310, "return of NetrLogonControl2Ex, state S1744");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label88;
                }
                if ((temp312 == 1)) {
                    this.Manager.Comment("reaching state \'S1175\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp311;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,1,Valid)\'");
                    temp311 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1745\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp311, "return of NetrLogonControl2Ex, state S1745");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label88;
                }
                throw new InvalidOperationException("never reached");
            label88:
;
                goto label91;
            }
            if ((temp321 == 1)) {
                this.Manager.Comment("reaching state \'S398\'");
                bool temp313;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp313);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp313);
                this.Manager.Comment("reaching state \'S683\'");
                int temp316 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker3)));
                if ((temp316 == 0)) {
                    this.Manager.Comment("reaching state \'S1176\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp314;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp314 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1746\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp314, "return of NetrLogonControl2Ex, state S1746");
                    this.Manager.Comment("reaching state \'S2084\'");
                    goto label89;
                }
                if ((temp316 == 1)) {
                    this.Manager.Comment("reaching state \'S1177\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp315;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp315 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1747\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp315, "return of NetrLogonControl2Ex, state S1747");
                    this.Manager.Comment("reaching state \'S2085\'");
                    goto label89;
                }
                throw new InvalidOperationException("never reached");
            label89:
;
                goto label91;
            }
            if ((temp321 == 2)) {
                this.Manager.Comment("reaching state \'S399\'");
                bool temp317;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp317);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp317);
                this.Manager.Comment("reaching state \'S684\'");
                int temp320 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker5)));
                if ((temp320 == 0)) {
                    this.Manager.Comment("reaching state \'S1178\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp318;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp318 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1748\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp318, "return of NetrLogonControl2Ex, state S1748");
                    this.Manager.Comment("reaching state \'S2086\'");
                    goto label90;
                }
                if ((temp320 == 1)) {
                    this.Manager.Comment("reaching state \'S1179\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp319;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp319 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1749\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp319, "return of NetrLogonControl2Ex, state S1749");
                    this.Manager.Comment("reaching state \'S2087\'");
                    goto label90;
                }
                throw new InvalidOperationException("never reached");
            label90:
;
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S682");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S682");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S683");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S683");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S684");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS138GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S684");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14");
            this.Manager.Comment("reaching state \'S14\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp322;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp322);
            this.Manager.AddReturn(GetPlatformInfo, null, temp322);
            this.Manager.Comment("reaching state \'S15\'");
            int temp335 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetPlatformChecker2)));
            if ((temp335 == 0)) {
                this.Manager.Comment("reaching state \'S211\'");
                bool temp323;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp323);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp323);
                this.Manager.Comment("reaching state \'S496\'");
                int temp326 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker1)));
                if ((temp326 == 0)) {
                    this.Manager.Comment("reaching state \'S802\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp324;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp324 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1372\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp324, "return of NetrLogonControl2Ex, state S1372");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label92;
                }
                if ((temp326 == 1)) {
                    this.Manager.Comment("reaching state \'S803\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp325;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,2,Valid)\'");
                    temp325 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1373\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp325, "return of NetrLogonControl2Ex, state S1373");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label92;
                }
                throw new InvalidOperationException("never reached");
            label92:
;
                goto label95;
            }
            if ((temp335 == 1)) {
                this.Manager.Comment("reaching state \'S212\'");
                bool temp327;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp327);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp327);
                this.Manager.Comment("reaching state \'S497\'");
                int temp330 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker3)));
                if ((temp330 == 0)) {
                    this.Manager.Comment("reaching state \'S804\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp328;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,4,Valid)\'");
                    temp328 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1374\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp328, "return of NetrLogonControl2Ex, state S1374");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label93;
                }
                if ((temp330 == 1)) {
                    this.Manager.Comment("reaching state \'S805\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp329;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,4,Valid)\'");
                    temp329 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1375\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp329, "return of NetrLogonControl2Ex, state S1375");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label93;
                }
                throw new InvalidOperationException("never reached");
            label93:
;
                goto label95;
            }
            if ((temp335 == 2)) {
                this.Manager.Comment("reaching state \'S213\'");
                bool temp331;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp331);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp331);
                this.Manager.Comment("reaching state \'S498\'");
                int temp334 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker5)));
                if ((temp334 == 0)) {
                    this.Manager.Comment("reaching state \'S806\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp332;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp332 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1376\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp332, "return of NetrLogonControl2Ex, state S1376");
                    this.Manager.Comment("reaching state \'S1918\'");
                    goto label94;
                }
                if ((temp334 == 1)) {
                    this.Manager.Comment("reaching state \'S807\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp333;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp333 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1377\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp333, "return of NetrLogonControl2Ex, state S1377");
                    this.Manager.Comment("reaching state \'S1919\'");
                    goto label94;
                }
                throw new InvalidOperationException("never reached");
            label94:
;
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S496");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S496");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S497");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S497");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S498");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS14GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S498");
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp336;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp336);
            this.Manager.AddReturn(GetPlatformInfo, null, temp336);
            this.Manager.Comment("reaching state \'S141\'");
            int temp349 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetPlatformChecker2)));
            if ((temp349 == 0)) {
                this.Manager.Comment("reaching state \'S400\'");
                bool temp337;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp337);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp337);
                this.Manager.Comment("reaching state \'S685\'");
                int temp340 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker1)));
                if ((temp340 == 0)) {
                    this.Manager.Comment("reaching state \'S1180\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp338;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,1,Valid)\'");
                    temp338 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1750\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp338, "return of NetrLogonControl2Ex, state S1750");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label96;
                }
                if ((temp340 == 1)) {
                    this.Manager.Comment("reaching state \'S1181\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp339;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,1,Valid)\'");
                    temp339 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1751\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp339, "return of NetrLogonControl2Ex, state S1751");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label96;
                }
                throw new InvalidOperationException("never reached");
            label96:
;
                goto label99;
            }
            if ((temp349 == 1)) {
                this.Manager.Comment("reaching state \'S401\'");
                bool temp341;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp341);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp341);
                this.Manager.Comment("reaching state \'S686\'");
                int temp344 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker3)));
                if ((temp344 == 0)) {
                    this.Manager.Comment("reaching state \'S1182\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp342;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp342 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1752\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp342, "return of NetrLogonControl2Ex, state S1752");
                    this.Manager.Comment("reaching state \'S2088\'");
                    goto label97;
                }
                if ((temp344 == 1)) {
                    this.Manager.Comment("reaching state \'S1183\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp343;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp343 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1753\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp343, "return of NetrLogonControl2Ex, state S1753");
                    this.Manager.Comment("reaching state \'S2089\'");
                    goto label97;
                }
                throw new InvalidOperationException("never reached");
            label97:
;
                goto label99;
            }
            if ((temp349 == 2)) {
                this.Manager.Comment("reaching state \'S402\'");
                bool temp345;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp345);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp345);
                this.Manager.Comment("reaching state \'S687\'");
                int temp348 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker5)));
                if ((temp348 == 0)) {
                    this.Manager.Comment("reaching state \'S1184\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp346;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp346 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1754\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp346, "return of NetrLogonControl2Ex, state S1754");
                    this.Manager.Comment("reaching state \'S2090\'");
                    goto label98;
                }
                if ((temp348 == 1)) {
                    this.Manager.Comment("reaching state \'S1185\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp347;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp347 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1755\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp347, "return of NetrLogonControl2Ex, state S1755");
                    this.Manager.Comment("reaching state \'S2091\'");
                    goto label98;
                }
                throw new InvalidOperationException("never reached");
            label98:
;
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S685");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S685");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S686");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S686");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S687");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS140GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S687");
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp350;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp350);
            this.Manager.AddReturn(GetPlatformInfo, null, temp350);
            this.Manager.Comment("reaching state \'S143\'");
            int temp363 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetPlatformChecker2)));
            if ((temp363 == 0)) {
                this.Manager.Comment("reaching state \'S403\'");
                bool temp351;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp351);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp351);
                this.Manager.Comment("reaching state \'S688\'");
                int temp354 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker1)));
                if ((temp354 == 0)) {
                    this.Manager.Comment("reaching state \'S1186\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp352;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,1,Valid)\'");
                    temp352 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1756\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp352, "return of NetrLogonControl2Ex, state S1756");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label100;
                }
                if ((temp354 == 1)) {
                    this.Manager.Comment("reaching state \'S1187\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp353;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,1,Valid)\'");
                    temp353 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1757\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp353, "return of NetrLogonControl2Ex, state S1757");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label100;
                }
                throw new InvalidOperationException("never reached");
            label100:
;
                goto label103;
            }
            if ((temp363 == 1)) {
                this.Manager.Comment("reaching state \'S404\'");
                bool temp355;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp355);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp355);
                this.Manager.Comment("reaching state \'S689\'");
                int temp358 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker3)));
                if ((temp358 == 0)) {
                    this.Manager.Comment("reaching state \'S1188\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp356;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp356 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1758\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp356, "return of NetrLogonControl2Ex, state S1758");
                    this.Manager.Comment("reaching state \'S2092\'");
                    goto label101;
                }
                if ((temp358 == 1)) {
                    this.Manager.Comment("reaching state \'S1189\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp357;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp357 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1759\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp357, "return of NetrLogonControl2Ex, state S1759");
                    this.Manager.Comment("reaching state \'S2093\'");
                    goto label101;
                }
                throw new InvalidOperationException("never reached");
            label101:
;
                goto label103;
            }
            if ((temp363 == 2)) {
                this.Manager.Comment("reaching state \'S405\'");
                bool temp359;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp359);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp359);
                this.Manager.Comment("reaching state \'S690\'");
                int temp362 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker5)));
                if ((temp362 == 0)) {
                    this.Manager.Comment("reaching state \'S1190\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp360;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp360 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1760\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp360, "return of NetrLogonControl2Ex, state S1760");
                    this.Manager.Comment("reaching state \'S2094\'");
                    goto label102;
                }
                if ((temp362 == 1)) {
                    this.Manager.Comment("reaching state \'S1191\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp361;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp361 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1761\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp361, "return of NetrLogonControl2Ex, state S1761");
                    this.Manager.Comment("reaching state \'S2095\'");
                    goto label102;
                }
                throw new InvalidOperationException("never reached");
            label102:
;
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S688");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S688");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S689");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S689");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S690");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS142GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S690");
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144");
            this.Manager.Comment("reaching state \'S144\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp364;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp364);
            this.Manager.AddReturn(GetPlatformInfo, null, temp364);
            this.Manager.Comment("reaching state \'S145\'");
            int temp377 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetPlatformChecker2)));
            if ((temp377 == 0)) {
                this.Manager.Comment("reaching state \'S406\'");
                bool temp365;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp365);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp365);
                this.Manager.Comment("reaching state \'S691\'");
                int temp368 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker1)));
                if ((temp368 == 0)) {
                    this.Manager.Comment("reaching state \'S1192\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp366;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,1,Valid)\'");
                    temp366 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1762\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp366, "return of NetrLogonControl2Ex, state S1762");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label104;
                }
                if ((temp368 == 1)) {
                    this.Manager.Comment("reaching state \'S1193\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp367;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,1,Valid)\'");
                    temp367 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1763\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp367, "return of NetrLogonControl2Ex, state S1763");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label104;
                }
                throw new InvalidOperationException("never reached");
            label104:
;
                goto label107;
            }
            if ((temp377 == 1)) {
                this.Manager.Comment("reaching state \'S407\'");
                bool temp369;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp369);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp369);
                this.Manager.Comment("reaching state \'S692\'");
                int temp372 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker3)));
                if ((temp372 == 0)) {
                    this.Manager.Comment("reaching state \'S1194\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp370;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp370 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1764\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp370, "return of NetrLogonControl2Ex, state S1764");
                    this.Manager.Comment("reaching state \'S2096\'");
                    goto label105;
                }
                if ((temp372 == 1)) {
                    this.Manager.Comment("reaching state \'S1195\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp371;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp371 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1765\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp371, "return of NetrLogonControl2Ex, state S1765");
                    this.Manager.Comment("reaching state \'S2097\'");
                    goto label105;
                }
                throw new InvalidOperationException("never reached");
            label105:
;
                goto label107;
            }
            if ((temp377 == 2)) {
                this.Manager.Comment("reaching state \'S408\'");
                bool temp373;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp373);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp373);
                this.Manager.Comment("reaching state \'S693\'");
                int temp376 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker5)));
                if ((temp376 == 0)) {
                    this.Manager.Comment("reaching state \'S1196\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp374;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp374 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1766\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp374, "return of NetrLogonControl2Ex, state S1766");
                    this.Manager.Comment("reaching state \'S2098\'");
                    goto label106;
                }
                if ((temp376 == 1)) {
                    this.Manager.Comment("reaching state \'S1197\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp375;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp375 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1767\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp375, "return of NetrLogonControl2Ex, state S1767");
                    this.Manager.Comment("reaching state \'S2099\'");
                    goto label106;
                }
                throw new InvalidOperationException("never reached");
            label106:
;
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S691");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S691");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S692");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S692");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S693");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS144GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S693");
        }
        #endregion
        
        #region Test Starting in S146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp378;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp378);
            this.Manager.AddReturn(GetPlatformInfo, null, temp378);
            this.Manager.Comment("reaching state \'S147\'");
            int temp391 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetPlatformChecker2)));
            if ((temp391 == 0)) {
                this.Manager.Comment("reaching state \'S409\'");
                bool temp379;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp379);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp379);
                this.Manager.Comment("reaching state \'S694\'");
                int temp382 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker1)));
                if ((temp382 == 0)) {
                    this.Manager.Comment("reaching state \'S1198\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp380;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,3,Valid)\'");
                    temp380 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1768\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp380, "return of NetrLogonControl2Ex, state S1768");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label108;
                }
                if ((temp382 == 1)) {
                    this.Manager.Comment("reaching state \'S1199\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp381;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,3,Valid)\'");
                    temp381 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1769\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp381, "return of NetrLogonControl2Ex, state S1769");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label108;
                }
                throw new InvalidOperationException("never reached");
            label108:
;
                goto label111;
            }
            if ((temp391 == 1)) {
                this.Manager.Comment("reaching state \'S410\'");
                bool temp383;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp383);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp383);
                this.Manager.Comment("reaching state \'S695\'");
                int temp386 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker3)));
                if ((temp386 == 0)) {
                    this.Manager.Comment("reaching state \'S1200\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp384;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp384 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1770\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp384, "return of NetrLogonControl2Ex, state S1770");
                    this.Manager.Comment("reaching state \'S2100\'");
                    goto label109;
                }
                if ((temp386 == 1)) {
                    this.Manager.Comment("reaching state \'S1201\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp385;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp385 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1771\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp385, "return of NetrLogonControl2Ex, state S1771");
                    this.Manager.Comment("reaching state \'S2101\'");
                    goto label109;
                }
                throw new InvalidOperationException("never reached");
            label109:
;
                goto label111;
            }
            if ((temp391 == 2)) {
                this.Manager.Comment("reaching state \'S411\'");
                bool temp387;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp387);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp387);
                this.Manager.Comment("reaching state \'S696\'");
                int temp390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker5)));
                if ((temp390 == 0)) {
                    this.Manager.Comment("reaching state \'S1202\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp388;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp388 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1772\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp388, "return of NetrLogonControl2Ex, state S1772");
                    this.Manager.Comment("reaching state \'S2102\'");
                    goto label110;
                }
                if ((temp390 == 1)) {
                    this.Manager.Comment("reaching state \'S1203\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp389;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp389 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1773\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp389, "return of NetrLogonControl2Ex, state S1773");
                    this.Manager.Comment("reaching state \'S2103\'");
                    goto label110;
                }
                throw new InvalidOperationException("never reached");
            label110:
;
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S694");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S694");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S695");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S695");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S696");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS146GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S696");
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148");
            this.Manager.Comment("reaching state \'S148\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp392;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp392);
            this.Manager.AddReturn(GetPlatformInfo, null, temp392);
            this.Manager.Comment("reaching state \'S149\'");
            int temp405 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetPlatformChecker2)));
            if ((temp405 == 0)) {
                this.Manager.Comment("reaching state \'S412\'");
                bool temp393;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp393);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp393);
                this.Manager.Comment("reaching state \'S697\'");
                int temp396 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker1)));
                if ((temp396 == 0)) {
                    this.Manager.Comment("reaching state \'S1204\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp394;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,1,Valid)\'");
                    temp394 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1774\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp394, "return of NetrLogonControl2Ex, state S1774");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label112;
                }
                if ((temp396 == 1)) {
                    this.Manager.Comment("reaching state \'S1205\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp395;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,1,Valid)\'");
                    temp395 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1775\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp395, "return of NetrLogonControl2Ex, state S1775");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label112;
                }
                throw new InvalidOperationException("never reached");
            label112:
;
                goto label115;
            }
            if ((temp405 == 1)) {
                this.Manager.Comment("reaching state \'S413\'");
                bool temp397;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp397);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp397);
                this.Manager.Comment("reaching state \'S698\'");
                int temp400 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker3)));
                if ((temp400 == 0)) {
                    this.Manager.Comment("reaching state \'S1206\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp398;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp398 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1776\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp398, "return of NetrLogonControl2Ex, state S1776");
                    this.Manager.Comment("reaching state \'S2104\'");
                    goto label113;
                }
                if ((temp400 == 1)) {
                    this.Manager.Comment("reaching state \'S1207\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp399;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp399 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1777\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp399, "return of NetrLogonControl2Ex, state S1777");
                    this.Manager.Comment("reaching state \'S2105\'");
                    goto label113;
                }
                throw new InvalidOperationException("never reached");
            label113:
;
                goto label115;
            }
            if ((temp405 == 2)) {
                this.Manager.Comment("reaching state \'S414\'");
                bool temp401;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp401);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp401);
                this.Manager.Comment("reaching state \'S699\'");
                int temp404 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker5)));
                if ((temp404 == 0)) {
                    this.Manager.Comment("reaching state \'S1208\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp402;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp402 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1778\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp402, "return of NetrLogonControl2Ex, state S1778");
                    this.Manager.Comment("reaching state \'S2106\'");
                    goto label114;
                }
                if ((temp404 == 1)) {
                    this.Manager.Comment("reaching state \'S1209\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp403;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp403 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1779\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp403, "return of NetrLogonControl2Ex, state S1779");
                    this.Manager.Comment("reaching state \'S2107\'");
                    goto label114;
                }
                throw new InvalidOperationException("never reached");
            label114:
;
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S697");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S697");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S698");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S698");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S699");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS148GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S699");
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150");
            this.Manager.Comment("reaching state \'S150\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp406;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp406);
            this.Manager.AddReturn(GetPlatformInfo, null, temp406);
            this.Manager.Comment("reaching state \'S151\'");
            int temp419 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetPlatformChecker2)));
            if ((temp419 == 0)) {
                this.Manager.Comment("reaching state \'S415\'");
                bool temp407;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp407);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp407);
                this.Manager.Comment("reaching state \'S700\'");
                int temp410 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker1)));
                if ((temp410 == 0)) {
                    this.Manager.Comment("reaching state \'S1210\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp408;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,1,Valid)\'");
                    temp408 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1780\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp408, "return of NetrLogonControl2Ex, state S1780");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label116;
                }
                if ((temp410 == 1)) {
                    this.Manager.Comment("reaching state \'S1211\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp409;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,1,Valid)\'");
                    temp409 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1781\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp409, "return of NetrLogonControl2Ex, state S1781");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label116;
                }
                throw new InvalidOperationException("never reached");
            label116:
;
                goto label119;
            }
            if ((temp419 == 1)) {
                this.Manager.Comment("reaching state \'S416\'");
                bool temp411;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp411);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp411);
                this.Manager.Comment("reaching state \'S701\'");
                int temp414 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker3)));
                if ((temp414 == 0)) {
                    this.Manager.Comment("reaching state \'S1212\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp412;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp412 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1782\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp412, "return of NetrLogonControl2Ex, state S1782");
                    this.Manager.Comment("reaching state \'S2108\'");
                    goto label117;
                }
                if ((temp414 == 1)) {
                    this.Manager.Comment("reaching state \'S1213\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp413;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp413 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1783\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp413, "return of NetrLogonControl2Ex, state S1783");
                    this.Manager.Comment("reaching state \'S2109\'");
                    goto label117;
                }
                throw new InvalidOperationException("never reached");
            label117:
;
                goto label119;
            }
            if ((temp419 == 2)) {
                this.Manager.Comment("reaching state \'S417\'");
                bool temp415;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp415);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp415);
                this.Manager.Comment("reaching state \'S702\'");
                int temp418 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker5)));
                if ((temp418 == 0)) {
                    this.Manager.Comment("reaching state \'S1214\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp416;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp416 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1784\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp416, "return of NetrLogonControl2Ex, state S1784");
                    this.Manager.Comment("reaching state \'S2110\'");
                    goto label118;
                }
                if ((temp418 == 1)) {
                    this.Manager.Comment("reaching state \'S1215\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp417;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp417 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1785\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp417, "return of NetrLogonControl2Ex, state S1785");
                    this.Manager.Comment("reaching state \'S2111\'");
                    goto label118;
                }
                throw new InvalidOperationException("never reached");
            label118:
;
                goto label119;
            }
            throw new InvalidOperationException("never reached");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S700");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S700");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S701");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S701");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S702");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS150GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S702");
        }
        #endregion
        
        #region Test Starting in S152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152");
            this.Manager.Comment("reaching state \'S152\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp420;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp420);
            this.Manager.AddReturn(GetPlatformInfo, null, temp420);
            this.Manager.Comment("reaching state \'S153\'");
            int temp433 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetPlatformChecker2)));
            if ((temp433 == 0)) {
                this.Manager.Comment("reaching state \'S418\'");
                bool temp421;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp421);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp421);
                this.Manager.Comment("reaching state \'S703\'");
                int temp424 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker1)));
                if ((temp424 == 0)) {
                    this.Manager.Comment("reaching state \'S1216\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp422;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,3,Valid)\'");
                    temp422 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1786\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp422, "return of NetrLogonControl2Ex, state S1786");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label120;
                }
                if ((temp424 == 1)) {
                    this.Manager.Comment("reaching state \'S1217\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp423;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,3,Valid)\'");
                    temp423 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1787\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp423, "return of NetrLogonControl2Ex, state S1787");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label120;
                }
                throw new InvalidOperationException("never reached");
            label120:
;
                goto label123;
            }
            if ((temp433 == 1)) {
                this.Manager.Comment("reaching state \'S419\'");
                bool temp425;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp425);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp425);
                this.Manager.Comment("reaching state \'S704\'");
                int temp428 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker3)));
                if ((temp428 == 0)) {
                    this.Manager.Comment("reaching state \'S1218\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp426;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp426 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1788\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp426, "return of NetrLogonControl2Ex, state S1788");
                    this.Manager.Comment("reaching state \'S2112\'");
                    goto label121;
                }
                if ((temp428 == 1)) {
                    this.Manager.Comment("reaching state \'S1219\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp427;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp427 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1789\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp427, "return of NetrLogonControl2Ex, state S1789");
                    this.Manager.Comment("reaching state \'S2113\'");
                    goto label121;
                }
                throw new InvalidOperationException("never reached");
            label121:
;
                goto label123;
            }
            if ((temp433 == 2)) {
                this.Manager.Comment("reaching state \'S420\'");
                bool temp429;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp429);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp429);
                this.Manager.Comment("reaching state \'S705\'");
                int temp432 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker5)));
                if ((temp432 == 0)) {
                    this.Manager.Comment("reaching state \'S1220\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp430;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp430 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1790\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp430, "return of NetrLogonControl2Ex, state S1790");
                    this.Manager.Comment("reaching state \'S2114\'");
                    goto label122;
                }
                if ((temp432 == 1)) {
                    this.Manager.Comment("reaching state \'S1221\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp431;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp431 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1791\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp431, "return of NetrLogonControl2Ex, state S1791");
                    this.Manager.Comment("reaching state \'S2115\'");
                    goto label122;
                }
                throw new InvalidOperationException("never reached");
            label122:
;
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S703");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S703");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S704");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S704");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S705");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS152GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S705");
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154");
            this.Manager.Comment("reaching state \'S154\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp434;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp434);
            this.Manager.AddReturn(GetPlatformInfo, null, temp434);
            this.Manager.Comment("reaching state \'S155\'");
            int temp447 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetPlatformChecker2)));
            if ((temp447 == 0)) {
                this.Manager.Comment("reaching state \'S421\'");
                bool temp435;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp435);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp435);
                this.Manager.Comment("reaching state \'S706\'");
                int temp438 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker1)));
                if ((temp438 == 0)) {
                    this.Manager.Comment("reaching state \'S1222\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp436;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,3,Valid)\'");
                    temp436 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1792\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp436, "return of NetrLogonControl2Ex, state S1792");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label124;
                }
                if ((temp438 == 1)) {
                    this.Manager.Comment("reaching state \'S1223\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp437;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,3,Valid)\'");
                    temp437 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1793\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp437, "return of NetrLogonControl2Ex, state S1793");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label124;
                }
                throw new InvalidOperationException("never reached");
            label124:
;
                goto label127;
            }
            if ((temp447 == 1)) {
                this.Manager.Comment("reaching state \'S422\'");
                bool temp439;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp439);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp439);
                this.Manager.Comment("reaching state \'S707\'");
                int temp442 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker3)));
                if ((temp442 == 0)) {
                    this.Manager.Comment("reaching state \'S1224\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp440;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp440 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1794\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp440, "return of NetrLogonControl2Ex, state S1794");
                    this.Manager.Comment("reaching state \'S2116\'");
                    goto label125;
                }
                if ((temp442 == 1)) {
                    this.Manager.Comment("reaching state \'S1225\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp441;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp441 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1795\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp441, "return of NetrLogonControl2Ex, state S1795");
                    this.Manager.Comment("reaching state \'S2117\'");
                    goto label125;
                }
                throw new InvalidOperationException("never reached");
            label125:
;
                goto label127;
            }
            if ((temp447 == 2)) {
                this.Manager.Comment("reaching state \'S423\'");
                bool temp443;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp443);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp443);
                this.Manager.Comment("reaching state \'S708\'");
                int temp446 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker5)));
                if ((temp446 == 0)) {
                    this.Manager.Comment("reaching state \'S1226\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp444;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp444 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1796\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp444, "return of NetrLogonControl2Ex, state S1796");
                    this.Manager.Comment("reaching state \'S2118\'");
                    goto label126;
                }
                if ((temp446 == 1)) {
                    this.Manager.Comment("reaching state \'S1227\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp445;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp445 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1797\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp445, "return of NetrLogonControl2Ex, state S1797");
                    this.Manager.Comment("reaching state \'S2119\'");
                    goto label126;
                }
                throw new InvalidOperationException("never reached");
            label126:
;
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S706");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S706");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S707");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S707");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S708");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS154GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S708");
        }
        #endregion
        
        #region Test Starting in S156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156");
            this.Manager.Comment("reaching state \'S156\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp448;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp448);
            this.Manager.AddReturn(GetPlatformInfo, null, temp448);
            this.Manager.Comment("reaching state \'S157\'");
            int temp461 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetPlatformChecker2)));
            if ((temp461 == 0)) {
                this.Manager.Comment("reaching state \'S424\'");
                bool temp449;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp449);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp449);
                this.Manager.Comment("reaching state \'S709\'");
                int temp452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker1)));
                if ((temp452 == 0)) {
                    this.Manager.Comment("reaching state \'S1228\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp450;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,3,Valid)\'");
                    temp450 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1798\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp450, "return of NetrLogonControl2Ex, state S1798");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label128;
                }
                if ((temp452 == 1)) {
                    this.Manager.Comment("reaching state \'S1229\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp451;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,3,Valid)\'");
                    temp451 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1799\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp451, "return of NetrLogonControl2Ex, state S1799");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label128;
                }
                throw new InvalidOperationException("never reached");
            label128:
;
                goto label131;
            }
            if ((temp461 == 1)) {
                this.Manager.Comment("reaching state \'S425\'");
                bool temp453;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp453);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp453);
                this.Manager.Comment("reaching state \'S710\'");
                int temp456 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker3)));
                if ((temp456 == 0)) {
                    this.Manager.Comment("reaching state \'S1230\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp454;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp454 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1800\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp454, "return of NetrLogonControl2Ex, state S1800");
                    this.Manager.Comment("reaching state \'S2120\'");
                    goto label129;
                }
                if ((temp456 == 1)) {
                    this.Manager.Comment("reaching state \'S1231\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp455;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp455 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1801\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp455, "return of NetrLogonControl2Ex, state S1801");
                    this.Manager.Comment("reaching state \'S2121\'");
                    goto label129;
                }
                throw new InvalidOperationException("never reached");
            label129:
;
                goto label131;
            }
            if ((temp461 == 2)) {
                this.Manager.Comment("reaching state \'S426\'");
                bool temp457;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp457);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp457);
                this.Manager.Comment("reaching state \'S711\'");
                int temp460 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker5)));
                if ((temp460 == 0)) {
                    this.Manager.Comment("reaching state \'S1232\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp458;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp458 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1802\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp458, "return of NetrLogonControl2Ex, state S1802");
                    this.Manager.Comment("reaching state \'S2122\'");
                    goto label130;
                }
                if ((temp460 == 1)) {
                    this.Manager.Comment("reaching state \'S1233\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp459;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp459 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1803\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp459, "return of NetrLogonControl2Ex, state S1803");
                    this.Manager.Comment("reaching state \'S2123\'");
                    goto label130;
                }
                throw new InvalidOperationException("never reached");
            label130:
;
                goto label131;
            }
            throw new InvalidOperationException("never reached");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S709");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S709");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S710");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S710");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S711");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS156GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S711");
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158");
            this.Manager.Comment("reaching state \'S158\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp462;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp462);
            this.Manager.AddReturn(GetPlatformInfo, null, temp462);
            this.Manager.Comment("reaching state \'S159\'");
            int temp475 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetPlatformChecker2)));
            if ((temp475 == 0)) {
                this.Manager.Comment("reaching state \'S427\'");
                bool temp463;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp463);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp463);
                this.Manager.Comment("reaching state \'S712\'");
                int temp466 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker1)));
                if ((temp466 == 0)) {
                    this.Manager.Comment("reaching state \'S1234\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp464;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,3,Valid)\'");
                    temp464 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1804\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp464, "return of NetrLogonControl2Ex, state S1804");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label132;
                }
                if ((temp466 == 1)) {
                    this.Manager.Comment("reaching state \'S1235\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp465;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,3,Valid)\'");
                    temp465 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1805\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp465, "return of NetrLogonControl2Ex, state S1805");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label132;
                }
                throw new InvalidOperationException("never reached");
            label132:
;
                goto label135;
            }
            if ((temp475 == 1)) {
                this.Manager.Comment("reaching state \'S428\'");
                bool temp467;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp467);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp467);
                this.Manager.Comment("reaching state \'S713\'");
                int temp470 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker3)));
                if ((temp470 == 0)) {
                    this.Manager.Comment("reaching state \'S1236\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp468;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp468 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1806\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp468, "return of NetrLogonControl2Ex, state S1806");
                    this.Manager.Comment("reaching state \'S2124\'");
                    goto label133;
                }
                if ((temp470 == 1)) {
                    this.Manager.Comment("reaching state \'S1237\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp469;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp469 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1807\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp469, "return of NetrLogonControl2Ex, state S1807");
                    this.Manager.Comment("reaching state \'S2125\'");
                    goto label133;
                }
                throw new InvalidOperationException("never reached");
            label133:
;
                goto label135;
            }
            if ((temp475 == 2)) {
                this.Manager.Comment("reaching state \'S429\'");
                bool temp471;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp471);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp471);
                this.Manager.Comment("reaching state \'S714\'");
                int temp474 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker5)));
                if ((temp474 == 0)) {
                    this.Manager.Comment("reaching state \'S1238\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp472;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp472 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1808\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp472, "return of NetrLogonControl2Ex, state S1808");
                    this.Manager.Comment("reaching state \'S2126\'");
                    goto label134;
                }
                if ((temp474 == 1)) {
                    this.Manager.Comment("reaching state \'S1239\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp473;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp473 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1809\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp473, "return of NetrLogonControl2Ex, state S1809");
                    this.Manager.Comment("reaching state \'S2127\'");
                    goto label134;
                }
                throw new InvalidOperationException("never reached");
            label134:
;
                goto label135;
            }
            throw new InvalidOperationException("never reached");
        label135:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S712");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S712");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S713");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S713");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S714");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS158GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S714");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16");
            this.Manager.Comment("reaching state \'S16\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp476;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp476);
            this.Manager.AddReturn(GetPlatformInfo, null, temp476);
            this.Manager.Comment("reaching state \'S17\'");
            int temp489 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetPlatformChecker2)));
            if ((temp489 == 0)) {
                this.Manager.Comment("reaching state \'S214\'");
                bool temp477;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp477);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp477);
                this.Manager.Comment("reaching state \'S499\'");
                int temp480 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker1)));
                if ((temp480 == 0)) {
                    this.Manager.Comment("reaching state \'S808\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp478;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,2,Valid)\'");
                    temp478 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1378\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp478, "return of NetrLogonControl2Ex, state S1378");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label136;
                }
                if ((temp480 == 1)) {
                    this.Manager.Comment("reaching state \'S809\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp479;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,2,Valid)\'");
                    temp479 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1379\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp479, "return of NetrLogonControl2Ex, state S1379");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label136;
                }
                throw new InvalidOperationException("never reached");
            label136:
;
                goto label139;
            }
            if ((temp489 == 1)) {
                this.Manager.Comment("reaching state \'S215\'");
                bool temp481;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp481);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp481);
                this.Manager.Comment("reaching state \'S500\'");
                int temp484 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker3)));
                if ((temp484 == 0)) {
                    this.Manager.Comment("reaching state \'S810\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp482;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,4,Valid)\'");
                    temp482 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1380\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp482, "return of NetrLogonControl2Ex, state S1380");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label137;
                }
                if ((temp484 == 1)) {
                    this.Manager.Comment("reaching state \'S811\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp483;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,4,Valid)\'");
                    temp483 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1381\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp483, "return of NetrLogonControl2Ex, state S1381");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label137;
                }
                throw new InvalidOperationException("never reached");
            label137:
;
                goto label139;
            }
            if ((temp489 == 2)) {
                this.Manager.Comment("reaching state \'S216\'");
                bool temp485;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp485);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp485);
                this.Manager.Comment("reaching state \'S501\'");
                int temp488 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker5)));
                if ((temp488 == 0)) {
                    this.Manager.Comment("reaching state \'S812\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp486;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp486 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1382\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp486, "return of NetrLogonControl2Ex, state S1382");
                    this.Manager.Comment("reaching state \'S1920\'");
                    goto label138;
                }
                if ((temp488 == 1)) {
                    this.Manager.Comment("reaching state \'S813\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp487;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp487 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1383\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp487, "return of NetrLogonControl2Ex, state S1383");
                    this.Manager.Comment("reaching state \'S1921\'");
                    goto label138;
                }
                throw new InvalidOperationException("never reached");
            label138:
;
                goto label139;
            }
            throw new InvalidOperationException("never reached");
        label139:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S499");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S499");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S500");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S500");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S501");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS16GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S501");
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp490;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp490);
            this.Manager.AddReturn(GetPlatformInfo, null, temp490);
            this.Manager.Comment("reaching state \'S161\'");
            int temp503 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetPlatformChecker2)));
            if ((temp503 == 0)) {
                this.Manager.Comment("reaching state \'S430\'");
                bool temp491;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp491);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp491);
                this.Manager.Comment("reaching state \'S715\'");
                int temp494 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker1)));
                if ((temp494 == 0)) {
                    this.Manager.Comment("reaching state \'S1240\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp492;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,2,Valid)\'");
                    temp492 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1810\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp492, "return of NetrLogonControl2Ex, state S1810");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label140;
                }
                if ((temp494 == 1)) {
                    this.Manager.Comment("reaching state \'S1241\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp493;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,2,Valid)\'");
                    temp493 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1811\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp493, "return of NetrLogonControl2Ex, state S1811");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label140;
                }
                throw new InvalidOperationException("never reached");
            label140:
;
                goto label143;
            }
            if ((temp503 == 1)) {
                this.Manager.Comment("reaching state \'S431\'");
                bool temp495;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp495);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp495);
                this.Manager.Comment("reaching state \'S716\'");
                int temp498 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker3)));
                if ((temp498 == 0)) {
                    this.Manager.Comment("reaching state \'S1242\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp496;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp496 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1812\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp496, "return of NetrLogonControl2Ex, state S1812");
                    this.Manager.Comment("reaching state \'S2128\'");
                    goto label141;
                }
                if ((temp498 == 1)) {
                    this.Manager.Comment("reaching state \'S1243\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp497;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp497 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1813\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp497, "return of NetrLogonControl2Ex, state S1813");
                    this.Manager.Comment("reaching state \'S2129\'");
                    goto label141;
                }
                throw new InvalidOperationException("never reached");
            label141:
;
                goto label143;
            }
            if ((temp503 == 2)) {
                this.Manager.Comment("reaching state \'S432\'");
                bool temp499;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp499);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp499);
                this.Manager.Comment("reaching state \'S717\'");
                int temp502 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker5)));
                if ((temp502 == 0)) {
                    this.Manager.Comment("reaching state \'S1244\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp500;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp500 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1814\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp500, "return of NetrLogonControl2Ex, state S1814");
                    this.Manager.Comment("reaching state \'S2130\'");
                    goto label142;
                }
                if ((temp502 == 1)) {
                    this.Manager.Comment("reaching state \'S1245\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp501;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp501 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1815\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp501, "return of NetrLogonControl2Ex, state S1815");
                    this.Manager.Comment("reaching state \'S2131\'");
                    goto label142;
                }
                throw new InvalidOperationException("never reached");
            label142:
;
                goto label143;
            }
            throw new InvalidOperationException("never reached");
        label143:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S715");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S715");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S716");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S716");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S717");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS160GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S717");
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp504;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp504);
            this.Manager.AddReturn(GetPlatformInfo, null, temp504);
            this.Manager.Comment("reaching state \'S163\'");
            int temp517 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetPlatformChecker2)));
            if ((temp517 == 0)) {
                this.Manager.Comment("reaching state \'S433\'");
                bool temp505;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp505);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp505);
                this.Manager.Comment("reaching state \'S718\'");
                int temp508 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker1)));
                if ((temp508 == 0)) {
                    this.Manager.Comment("reaching state \'S1246\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp506;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,3,Valid)\'");
                    temp506 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1816\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp506, "return of NetrLogonControl2Ex, state S1816");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label144;
                }
                if ((temp508 == 1)) {
                    this.Manager.Comment("reaching state \'S1247\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp507;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,3,Valid)\'");
                    temp507 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1817\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp507, "return of NetrLogonControl2Ex, state S1817");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label144;
                }
                throw new InvalidOperationException("never reached");
            label144:
;
                goto label147;
            }
            if ((temp517 == 1)) {
                this.Manager.Comment("reaching state \'S434\'");
                bool temp509;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp509);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp509);
                this.Manager.Comment("reaching state \'S719\'");
                int temp512 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker3)));
                if ((temp512 == 0)) {
                    this.Manager.Comment("reaching state \'S1248\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp510;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp510 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1818\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp510, "return of NetrLogonControl2Ex, state S1818");
                    this.Manager.Comment("reaching state \'S2132\'");
                    goto label145;
                }
                if ((temp512 == 1)) {
                    this.Manager.Comment("reaching state \'S1249\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp511;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp511 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1819\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp511, "return of NetrLogonControl2Ex, state S1819");
                    this.Manager.Comment("reaching state \'S2133\'");
                    goto label145;
                }
                throw new InvalidOperationException("never reached");
            label145:
;
                goto label147;
            }
            if ((temp517 == 2)) {
                this.Manager.Comment("reaching state \'S435\'");
                bool temp513;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp513);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp513);
                this.Manager.Comment("reaching state \'S720\'");
                int temp516 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker5)));
                if ((temp516 == 0)) {
                    this.Manager.Comment("reaching state \'S1250\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp514;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp514 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1820\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp514, "return of NetrLogonControl2Ex, state S1820");
                    this.Manager.Comment("reaching state \'S2134\'");
                    goto label146;
                }
                if ((temp516 == 1)) {
                    this.Manager.Comment("reaching state \'S1251\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp515;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp515 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1821\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp515, "return of NetrLogonControl2Ex, state S1821");
                    this.Manager.Comment("reaching state \'S2135\'");
                    goto label146;
                }
                throw new InvalidOperationException("never reached");
            label146:
;
                goto label147;
            }
            throw new InvalidOperationException("never reached");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S718");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S718");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S719");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S719");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S720");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS162GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S720");
        }
        #endregion
        
        #region Test Starting in S164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164");
            this.Manager.Comment("reaching state \'S164\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp518;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp518);
            this.Manager.AddReturn(GetPlatformInfo, null, temp518);
            this.Manager.Comment("reaching state \'S165\'");
            int temp531 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetPlatformChecker2)));
            if ((temp531 == 0)) {
                this.Manager.Comment("reaching state \'S436\'");
                bool temp519;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp519);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp519);
                this.Manager.Comment("reaching state \'S721\'");
                int temp522 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker1)));
                if ((temp522 == 0)) {
                    this.Manager.Comment("reaching state \'S1252\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp520;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,3,Valid)\'");
                    temp520 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1822\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp520, "return of NetrLogonControl2Ex, state S1822");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label148;
                }
                if ((temp522 == 1)) {
                    this.Manager.Comment("reaching state \'S1253\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp521;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,3,Valid)\'");
                    temp521 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1823\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp521, "return of NetrLogonControl2Ex, state S1823");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label148;
                }
                throw new InvalidOperationException("never reached");
            label148:
;
                goto label151;
            }
            if ((temp531 == 1)) {
                this.Manager.Comment("reaching state \'S437\'");
                bool temp523;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp523);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp523);
                this.Manager.Comment("reaching state \'S722\'");
                int temp526 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker3)));
                if ((temp526 == 0)) {
                    this.Manager.Comment("reaching state \'S1254\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp524;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp524 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1824\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp524, "return of NetrLogonControl2Ex, state S1824");
                    this.Manager.Comment("reaching state \'S2136\'");
                    goto label149;
                }
                if ((temp526 == 1)) {
                    this.Manager.Comment("reaching state \'S1255\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp525;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp525 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1825\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp525, "return of NetrLogonControl2Ex, state S1825");
                    this.Manager.Comment("reaching state \'S2137\'");
                    goto label149;
                }
                throw new InvalidOperationException("never reached");
            label149:
;
                goto label151;
            }
            if ((temp531 == 2)) {
                this.Manager.Comment("reaching state \'S438\'");
                bool temp527;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp527);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp527);
                this.Manager.Comment("reaching state \'S723\'");
                int temp530 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker5)));
                if ((temp530 == 0)) {
                    this.Manager.Comment("reaching state \'S1256\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp528;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp528 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1826\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp528, "return of NetrLogonControl2Ex, state S1826");
                    this.Manager.Comment("reaching state \'S2138\'");
                    goto label150;
                }
                if ((temp530 == 1)) {
                    this.Manager.Comment("reaching state \'S1257\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp529;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp529 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1827\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp529, "return of NetrLogonControl2Ex, state S1827");
                    this.Manager.Comment("reaching state \'S2139\'");
                    goto label150;
                }
                throw new InvalidOperationException("never reached");
            label150:
;
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S721");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S721");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S722");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S722");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S723");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS164GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S723");
        }
        #endregion
        
        #region Test Starting in S166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166");
            this.Manager.Comment("reaching state \'S166\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp532;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp532);
            this.Manager.AddReturn(GetPlatformInfo, null, temp532);
            this.Manager.Comment("reaching state \'S167\'");
            int temp545 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetPlatformChecker2)));
            if ((temp545 == 0)) {
                this.Manager.Comment("reaching state \'S439\'");
                bool temp533;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp533);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp533);
                this.Manager.Comment("reaching state \'S724\'");
                int temp536 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker1)));
                if ((temp536 == 0)) {
                    this.Manager.Comment("reaching state \'S1258\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp534;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,1,Valid)\'");
                    temp534 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1828\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp534, "return of NetrLogonControl2Ex, state S1828");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label152;
                }
                if ((temp536 == 1)) {
                    this.Manager.Comment("reaching state \'S1259\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp535;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,1,Valid)\'");
                    temp535 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1829\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp535, "return of NetrLogonControl2Ex, state S1829");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label152;
                }
                throw new InvalidOperationException("never reached");
            label152:
;
                goto label155;
            }
            if ((temp545 == 1)) {
                this.Manager.Comment("reaching state \'S440\'");
                bool temp537;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp537);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp537);
                this.Manager.Comment("reaching state \'S725\'");
                int temp540 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker3)));
                if ((temp540 == 0)) {
                    this.Manager.Comment("reaching state \'S1260\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp538;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp538 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1830\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp538, "return of NetrLogonControl2Ex, state S1830");
                    this.Manager.Comment("reaching state \'S2140\'");
                    goto label153;
                }
                if ((temp540 == 1)) {
                    this.Manager.Comment("reaching state \'S1261\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp539;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp539 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1831\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp539, "return of NetrLogonControl2Ex, state S1831");
                    this.Manager.Comment("reaching state \'S2141\'");
                    goto label153;
                }
                throw new InvalidOperationException("never reached");
            label153:
;
                goto label155;
            }
            if ((temp545 == 2)) {
                this.Manager.Comment("reaching state \'S441\'");
                bool temp541;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp541);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp541);
                this.Manager.Comment("reaching state \'S726\'");
                int temp544 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker5)));
                if ((temp544 == 0)) {
                    this.Manager.Comment("reaching state \'S1262\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp542;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp542 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1832\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp542, "return of NetrLogonControl2Ex, state S1832");
                    this.Manager.Comment("reaching state \'S2142\'");
                    goto label154;
                }
                if ((temp544 == 1)) {
                    this.Manager.Comment("reaching state \'S1263\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp543;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp543 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1833\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp543, "return of NetrLogonControl2Ex, state S1833");
                    this.Manager.Comment("reaching state \'S2143\'");
                    goto label154;
                }
                throw new InvalidOperationException("never reached");
            label154:
;
                goto label155;
            }
            throw new InvalidOperationException("never reached");
        label155:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S724");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S724");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S725");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S725");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S726");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS166GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S726");
        }
        #endregion
        
        #region Test Starting in S168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168");
            this.Manager.Comment("reaching state \'S168\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp546;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp546);
            this.Manager.AddReturn(GetPlatformInfo, null, temp546);
            this.Manager.Comment("reaching state \'S169\'");
            int temp559 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetPlatformChecker2)));
            if ((temp559 == 0)) {
                this.Manager.Comment("reaching state \'S442\'");
                bool temp547;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp547);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp547);
                this.Manager.Comment("reaching state \'S727\'");
                int temp550 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker1)));
                if ((temp550 == 0)) {
                    this.Manager.Comment("reaching state \'S1264\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp548;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,2,Valid)\'");
                    temp548 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1834\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp548, "return of NetrLogonControl2Ex, state S1834");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label156;
                }
                if ((temp550 == 1)) {
                    this.Manager.Comment("reaching state \'S1265\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp549;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,2,Valid)\'");
                    temp549 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1835\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp549, "return of NetrLogonControl2Ex, state S1835");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label156;
                }
                throw new InvalidOperationException("never reached");
            label156:
;
                goto label159;
            }
            if ((temp559 == 1)) {
                this.Manager.Comment("reaching state \'S443\'");
                bool temp551;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp551);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp551);
                this.Manager.Comment("reaching state \'S728\'");
                int temp554 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker3)));
                if ((temp554 == 0)) {
                    this.Manager.Comment("reaching state \'S1266\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp552;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp552 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1836\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp552, "return of NetrLogonControl2Ex, state S1836");
                    this.Manager.Comment("reaching state \'S2144\'");
                    goto label157;
                }
                if ((temp554 == 1)) {
                    this.Manager.Comment("reaching state \'S1267\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp553;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp553 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1837\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp553, "return of NetrLogonControl2Ex, state S1837");
                    this.Manager.Comment("reaching state \'S2145\'");
                    goto label157;
                }
                throw new InvalidOperationException("never reached");
            label157:
;
                goto label159;
            }
            if ((temp559 == 2)) {
                this.Manager.Comment("reaching state \'S444\'");
                bool temp555;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp555);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp555);
                this.Manager.Comment("reaching state \'S729\'");
                int temp558 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker5)));
                if ((temp558 == 0)) {
                    this.Manager.Comment("reaching state \'S1268\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp556;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp556 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1838\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp556, "return of NetrLogonControl2Ex, state S1838");
                    this.Manager.Comment("reaching state \'S2146\'");
                    goto label158;
                }
                if ((temp558 == 1)) {
                    this.Manager.Comment("reaching state \'S1269\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp557;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp557 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1839\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp557, "return of NetrLogonControl2Ex, state S1839");
                    this.Manager.Comment("reaching state \'S2147\'");
                    goto label158;
                }
                throw new InvalidOperationException("never reached");
            label158:
;
                goto label159;
            }
            throw new InvalidOperationException("never reached");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S727");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S727");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S728");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S728");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S729");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS168GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S729");
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp560;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp560);
            this.Manager.AddReturn(GetPlatformInfo, null, temp560);
            this.Manager.Comment("reaching state \'S171\'");
            int temp573 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetPlatformChecker2)));
            if ((temp573 == 0)) {
                this.Manager.Comment("reaching state \'S445\'");
                bool temp561;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp561);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp561);
                this.Manager.Comment("reaching state \'S730\'");
                int temp564 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker1)));
                if ((temp564 == 0)) {
                    this.Manager.Comment("reaching state \'S1270\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp562;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,1,Valid)\'");
                    temp562 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1840\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp562, "return of NetrLogonControl2Ex, state S1840");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label160;
                }
                if ((temp564 == 1)) {
                    this.Manager.Comment("reaching state \'S1271\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp563;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,1,Valid)\'");
                    temp563 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1841\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp563, "return of NetrLogonControl2Ex, state S1841");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label160;
                }
                throw new InvalidOperationException("never reached");
            label160:
;
                goto label163;
            }
            if ((temp573 == 1)) {
                this.Manager.Comment("reaching state \'S446\'");
                bool temp565;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp565);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp565);
                this.Manager.Comment("reaching state \'S731\'");
                int temp568 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker3)));
                if ((temp568 == 0)) {
                    this.Manager.Comment("reaching state \'S1272\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp566;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp566 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1842\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp566, "return of NetrLogonControl2Ex, state S1842");
                    this.Manager.Comment("reaching state \'S2148\'");
                    goto label161;
                }
                if ((temp568 == 1)) {
                    this.Manager.Comment("reaching state \'S1273\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp567;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp567 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1843\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp567, "return of NetrLogonControl2Ex, state S1843");
                    this.Manager.Comment("reaching state \'S2149\'");
                    goto label161;
                }
                throw new InvalidOperationException("never reached");
            label161:
;
                goto label163;
            }
            if ((temp573 == 2)) {
                this.Manager.Comment("reaching state \'S447\'");
                bool temp569;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp569);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp569);
                this.Manager.Comment("reaching state \'S732\'");
                int temp572 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker5)));
                if ((temp572 == 0)) {
                    this.Manager.Comment("reaching state \'S1274\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp570;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp570 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1844\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp570, "return of NetrLogonControl2Ex, state S1844");
                    this.Manager.Comment("reaching state \'S2150\'");
                    goto label162;
                }
                if ((temp572 == 1)) {
                    this.Manager.Comment("reaching state \'S1275\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp571;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp571 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1845\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp571, "return of NetrLogonControl2Ex, state S1845");
                    this.Manager.Comment("reaching state \'S2151\'");
                    goto label162;
                }
                throw new InvalidOperationException("never reached");
            label162:
;
                goto label163;
            }
            throw new InvalidOperationException("never reached");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S730");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S730");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S731");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S731");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S732");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS170GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S732");
        }
        #endregion
        
        #region Test Starting in S172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172");
            this.Manager.Comment("reaching state \'S172\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp574;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp574);
            this.Manager.AddReturn(GetPlatformInfo, null, temp574);
            this.Manager.Comment("reaching state \'S173\'");
            int temp587 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetPlatformChecker2)));
            if ((temp587 == 0)) {
                this.Manager.Comment("reaching state \'S448\'");
                bool temp575;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp575);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp575);
                this.Manager.Comment("reaching state \'S733\'");
                int temp578 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker1)));
                if ((temp578 == 0)) {
                    this.Manager.Comment("reaching state \'S1276\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp576;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,3,Valid)\'");
                    temp576 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1846\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp576, "return of NetrLogonControl2Ex, state S1846");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label164;
                }
                if ((temp578 == 1)) {
                    this.Manager.Comment("reaching state \'S1277\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp577;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,3,Valid)\'");
                    temp577 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1847\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp577, "return of NetrLogonControl2Ex, state S1847");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label164;
                }
                throw new InvalidOperationException("never reached");
            label164:
;
                goto label167;
            }
            if ((temp587 == 1)) {
                this.Manager.Comment("reaching state \'S449\'");
                bool temp579;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp579);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp579);
                this.Manager.Comment("reaching state \'S734\'");
                int temp582 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker3)));
                if ((temp582 == 0)) {
                    this.Manager.Comment("reaching state \'S1278\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp580;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp580 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1848\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp580, "return of NetrLogonControl2Ex, state S1848");
                    this.Manager.Comment("reaching state \'S2152\'");
                    goto label165;
                }
                if ((temp582 == 1)) {
                    this.Manager.Comment("reaching state \'S1279\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp581;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp581 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1849\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp581, "return of NetrLogonControl2Ex, state S1849");
                    this.Manager.Comment("reaching state \'S2153\'");
                    goto label165;
                }
                throw new InvalidOperationException("never reached");
            label165:
;
                goto label167;
            }
            if ((temp587 == 2)) {
                this.Manager.Comment("reaching state \'S450\'");
                bool temp583;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp583);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp583);
                this.Manager.Comment("reaching state \'S735\'");
                int temp586 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker5)));
                if ((temp586 == 0)) {
                    this.Manager.Comment("reaching state \'S1280\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp584;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp584 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1850\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp584, "return of NetrLogonControl2Ex, state S1850");
                    this.Manager.Comment("reaching state \'S2154\'");
                    goto label166;
                }
                if ((temp586 == 1)) {
                    this.Manager.Comment("reaching state \'S1281\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp585;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp585 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1851\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp585, "return of NetrLogonControl2Ex, state S1851");
                    this.Manager.Comment("reaching state \'S2155\'");
                    goto label166;
                }
                throw new InvalidOperationException("never reached");
            label166:
;
                goto label167;
            }
            throw new InvalidOperationException("never reached");
        label167:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S733");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S733");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S734");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S734");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S735");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS172GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S735");
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp588;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp588);
            this.Manager.AddReturn(GetPlatformInfo, null, temp588);
            this.Manager.Comment("reaching state \'S175\'");
            int temp601 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetPlatformChecker2)));
            if ((temp601 == 0)) {
                this.Manager.Comment("reaching state \'S451\'");
                bool temp589;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp589);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp589);
                this.Manager.Comment("reaching state \'S736\'");
                int temp592 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker1)));
                if ((temp592 == 0)) {
                    this.Manager.Comment("reaching state \'S1282\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp590;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,3,Valid)\'");
                    temp590 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1852\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp590, "return of NetrLogonControl2Ex, state S1852");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label168;
                }
                if ((temp592 == 1)) {
                    this.Manager.Comment("reaching state \'S1283\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp591;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,3,Valid)\'");
                    temp591 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1853\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp591, "return of NetrLogonControl2Ex, state S1853");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label168;
                }
                throw new InvalidOperationException("never reached");
            label168:
;
                goto label171;
            }
            if ((temp601 == 1)) {
                this.Manager.Comment("reaching state \'S452\'");
                bool temp593;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp593);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp593);
                this.Manager.Comment("reaching state \'S737\'");
                int temp596 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker3)));
                if ((temp596 == 0)) {
                    this.Manager.Comment("reaching state \'S1284\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp594;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp594 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1854\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp594, "return of NetrLogonControl2Ex, state S1854");
                    this.Manager.Comment("reaching state \'S2156\'");
                    goto label169;
                }
                if ((temp596 == 1)) {
                    this.Manager.Comment("reaching state \'S1285\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp595;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp595 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1855\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp595, "return of NetrLogonControl2Ex, state S1855");
                    this.Manager.Comment("reaching state \'S2157\'");
                    goto label169;
                }
                throw new InvalidOperationException("never reached");
            label169:
;
                goto label171;
            }
            if ((temp601 == 2)) {
                this.Manager.Comment("reaching state \'S453\'");
                bool temp597;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp597);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp597);
                this.Manager.Comment("reaching state \'S738\'");
                int temp600 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker5)));
                if ((temp600 == 0)) {
                    this.Manager.Comment("reaching state \'S1286\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp598;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp598 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1856\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp598, "return of NetrLogonControl2Ex, state S1856");
                    this.Manager.Comment("reaching state \'S2158\'");
                    goto label170;
                }
                if ((temp600 == 1)) {
                    this.Manager.Comment("reaching state \'S1287\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp599;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp599 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1857\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp599, "return of NetrLogonControl2Ex, state S1857");
                    this.Manager.Comment("reaching state \'S2159\'");
                    goto label170;
                }
                throw new InvalidOperationException("never reached");
            label170:
;
                goto label171;
            }
            throw new InvalidOperationException("never reached");
        label171:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S736");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S736");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S737");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S737");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S738");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS174GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S738");
        }
        #endregion
        
        #region Test Starting in S176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176");
            this.Manager.Comment("reaching state \'S176\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp602;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp602);
            this.Manager.AddReturn(GetPlatformInfo, null, temp602);
            this.Manager.Comment("reaching state \'S177\'");
            int temp615 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetPlatformChecker2)));
            if ((temp615 == 0)) {
                this.Manager.Comment("reaching state \'S454\'");
                bool temp603;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp603);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp603);
                this.Manager.Comment("reaching state \'S739\'");
                int temp606 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker1)));
                if ((temp606 == 0)) {
                    this.Manager.Comment("reaching state \'S1288\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp604;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,2,Valid)\'");
                    temp604 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1858\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp604, "return of NetrLogonControl2Ex, state S1858");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label172;
                }
                if ((temp606 == 1)) {
                    this.Manager.Comment("reaching state \'S1289\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp605;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,2,Valid)\'");
                    temp605 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1859\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp605, "return of NetrLogonControl2Ex, state S1859");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label172;
                }
                throw new InvalidOperationException("never reached");
            label172:
;
                goto label175;
            }
            if ((temp615 == 1)) {
                this.Manager.Comment("reaching state \'S455\'");
                bool temp607;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp607);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp607);
                this.Manager.Comment("reaching state \'S740\'");
                int temp610 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker3)));
                if ((temp610 == 0)) {
                    this.Manager.Comment("reaching state \'S1290\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp608;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp608 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1860\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp608, "return of NetrLogonControl2Ex, state S1860");
                    this.Manager.Comment("reaching state \'S2160\'");
                    goto label173;
                }
                if ((temp610 == 1)) {
                    this.Manager.Comment("reaching state \'S1291\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp609;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp609 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1861\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp609, "return of NetrLogonControl2Ex, state S1861");
                    this.Manager.Comment("reaching state \'S2161\'");
                    goto label173;
                }
                throw new InvalidOperationException("never reached");
            label173:
;
                goto label175;
            }
            if ((temp615 == 2)) {
                this.Manager.Comment("reaching state \'S456\'");
                bool temp611;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp611);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp611);
                this.Manager.Comment("reaching state \'S741\'");
                int temp614 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker5)));
                if ((temp614 == 0)) {
                    this.Manager.Comment("reaching state \'S1292\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp612;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp612 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1862\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp612, "return of NetrLogonControl2Ex, state S1862");
                    this.Manager.Comment("reaching state \'S2162\'");
                    goto label174;
                }
                if ((temp614 == 1)) {
                    this.Manager.Comment("reaching state \'S1293\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp613;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp613 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1863\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp613, "return of NetrLogonControl2Ex, state S1863");
                    this.Manager.Comment("reaching state \'S2163\'");
                    goto label174;
                }
                throw new InvalidOperationException("never reached");
            label174:
;
                goto label175;
            }
            throw new InvalidOperationException("never reached");
        label175:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S739");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S739");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S740");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S740");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S741");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS176GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S741");
        }
        #endregion
        
        #region Test Starting in S178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178");
            this.Manager.Comment("reaching state \'S178\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp616;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp616);
            this.Manager.AddReturn(GetPlatformInfo, null, temp616);
            this.Manager.Comment("reaching state \'S179\'");
            int temp629 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetPlatformChecker2)));
            if ((temp629 == 0)) {
                this.Manager.Comment("reaching state \'S457\'");
                bool temp617;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp617);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp617);
                this.Manager.Comment("reaching state \'S742\'");
                int temp620 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker1)));
                if ((temp620 == 0)) {
                    this.Manager.Comment("reaching state \'S1294\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp618;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,2,Valid)\'");
                    temp618 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1864\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp618, "return of NetrLogonControl2Ex, state S1864");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label176;
                }
                if ((temp620 == 1)) {
                    this.Manager.Comment("reaching state \'S1295\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp619;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,2,Valid)\'");
                    temp619 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1865\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp619, "return of NetrLogonControl2Ex, state S1865");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label176;
                }
                throw new InvalidOperationException("never reached");
            label176:
;
                goto label179;
            }
            if ((temp629 == 1)) {
                this.Manager.Comment("reaching state \'S458\'");
                bool temp621;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp621);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp621);
                this.Manager.Comment("reaching state \'S743\'");
                int temp624 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker3)));
                if ((temp624 == 0)) {
                    this.Manager.Comment("reaching state \'S1296\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp622;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp622 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1866\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp622, "return of NetrLogonControl2Ex, state S1866");
                    this.Manager.Comment("reaching state \'S2164\'");
                    goto label177;
                }
                if ((temp624 == 1)) {
                    this.Manager.Comment("reaching state \'S1297\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp623;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp623 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1867\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp623, "return of NetrLogonControl2Ex, state S1867");
                    this.Manager.Comment("reaching state \'S2165\'");
                    goto label177;
                }
                throw new InvalidOperationException("never reached");
            label177:
;
                goto label179;
            }
            if ((temp629 == 2)) {
                this.Manager.Comment("reaching state \'S459\'");
                bool temp625;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp625);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp625);
                this.Manager.Comment("reaching state \'S744\'");
                int temp628 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker5)));
                if ((temp628 == 0)) {
                    this.Manager.Comment("reaching state \'S1298\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp626;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp626 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1868\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp626, "return of NetrLogonControl2Ex, state S1868");
                    this.Manager.Comment("reaching state \'S2166\'");
                    goto label178;
                }
                if ((temp628 == 1)) {
                    this.Manager.Comment("reaching state \'S1299\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp627;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp627 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1869\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp627, "return of NetrLogonControl2Ex, state S1869");
                    this.Manager.Comment("reaching state \'S2167\'");
                    goto label178;
                }
                throw new InvalidOperationException("never reached");
            label178:
;
                goto label179;
            }
            throw new InvalidOperationException("never reached");
        label179:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S742");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S742");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S743");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S743");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S744");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS178GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S744");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp630;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp630);
            this.Manager.AddReturn(GetPlatformInfo, null, temp630);
            this.Manager.Comment("reaching state \'S19\'");
            int temp643 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetPlatformChecker2)));
            if ((temp643 == 0)) {
                this.Manager.Comment("reaching state \'S217\'");
                bool temp631;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp631);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp631);
                this.Manager.Comment("reaching state \'S502\'");
                int temp634 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker1)));
                if ((temp634 == 0)) {
                    this.Manager.Comment("reaching state \'S814\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp632;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,2,Valid)\'");
                    temp632 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1384\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp632, "return of NetrLogonControl2Ex, state S1384");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label180;
                }
                if ((temp634 == 1)) {
                    this.Manager.Comment("reaching state \'S815\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp633;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp633 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1385\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp633, "return of NetrLogonControl2Ex, state S1385");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label180;
                }
                throw new InvalidOperationException("never reached");
            label180:
;
                goto label183;
            }
            if ((temp643 == 1)) {
                this.Manager.Comment("reaching state \'S218\'");
                bool temp635;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp635);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp635);
                this.Manager.Comment("reaching state \'S503\'");
                int temp638 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker3)));
                if ((temp638 == 0)) {
                    this.Manager.Comment("reaching state \'S816\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp636;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,4,Valid)\'");
                    temp636 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1386\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp636, "return of NetrLogonControl2Ex, state S1386");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label181;
                }
                if ((temp638 == 1)) {
                    this.Manager.Comment("reaching state \'S817\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp637;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,4,Valid)\'");
                    temp637 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1387\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp637, "return of NetrLogonControl2Ex, state S1387");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label181;
                }
                throw new InvalidOperationException("never reached");
            label181:
;
                goto label183;
            }
            if ((temp643 == 2)) {
                this.Manager.Comment("reaching state \'S219\'");
                bool temp639;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp639);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp639);
                this.Manager.Comment("reaching state \'S504\'");
                int temp642 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker5)));
                if ((temp642 == 0)) {
                    this.Manager.Comment("reaching state \'S818\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp640;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp640 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1388\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp640, "return of NetrLogonControl2Ex, state S1388");
                    this.Manager.Comment("reaching state \'S1922\'");
                    goto label182;
                }
                if ((temp642 == 1)) {
                    this.Manager.Comment("reaching state \'S819\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp641;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp641 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1389\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp641, "return of NetrLogonControl2Ex, state S1389");
                    this.Manager.Comment("reaching state \'S1923\'");
                    goto label182;
                }
                throw new InvalidOperationException("never reached");
            label182:
;
                goto label183;
            }
            throw new InvalidOperationException("never reached");
        label183:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S502");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S502");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S503");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S503");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S504");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS18GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S504");
        }
        #endregion
        
        #region Test Starting in S180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180");
            this.Manager.Comment("reaching state \'S180\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp644;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp644);
            this.Manager.AddReturn(GetPlatformInfo, null, temp644);
            this.Manager.Comment("reaching state \'S181\'");
            int temp657 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetPlatformChecker2)));
            if ((temp657 == 0)) {
                this.Manager.Comment("reaching state \'S460\'");
                bool temp645;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp645);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp645);
                this.Manager.Comment("reaching state \'S745\'");
                int temp648 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker1)));
                if ((temp648 == 0)) {
                    this.Manager.Comment("reaching state \'S1300\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp646;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,1,Valid)\'");
                    temp646 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1870\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp646, "return of NetrLogonControl2Ex, state S1870");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label184;
                }
                if ((temp648 == 1)) {
                    this.Manager.Comment("reaching state \'S1301\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp647;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,1,Valid)\'");
                    temp647 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1871\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp647, "return of NetrLogonControl2Ex, state S1871");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label184;
                }
                throw new InvalidOperationException("never reached");
            label184:
;
                goto label187;
            }
            if ((temp657 == 1)) {
                this.Manager.Comment("reaching state \'S461\'");
                bool temp649;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp649);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp649);
                this.Manager.Comment("reaching state \'S746\'");
                int temp652 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker3)));
                if ((temp652 == 0)) {
                    this.Manager.Comment("reaching state \'S1302\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp650;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp650 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1872\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp650, "return of NetrLogonControl2Ex, state S1872");
                    this.Manager.Comment("reaching state \'S2168\'");
                    goto label185;
                }
                if ((temp652 == 1)) {
                    this.Manager.Comment("reaching state \'S1303\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp651;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp651 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1873\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp651, "return of NetrLogonControl2Ex, state S1873");
                    this.Manager.Comment("reaching state \'S2169\'");
                    goto label185;
                }
                throw new InvalidOperationException("never reached");
            label185:
;
                goto label187;
            }
            if ((temp657 == 2)) {
                this.Manager.Comment("reaching state \'S462\'");
                bool temp653;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp653);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp653);
                this.Manager.Comment("reaching state \'S747\'");
                int temp656 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker5)));
                if ((temp656 == 0)) {
                    this.Manager.Comment("reaching state \'S1304\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp654;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp654 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1874\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp654, "return of NetrLogonControl2Ex, state S1874");
                    this.Manager.Comment("reaching state \'S2170\'");
                    goto label186;
                }
                if ((temp656 == 1)) {
                    this.Manager.Comment("reaching state \'S1305\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp655;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp655 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1875\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp655, "return of NetrLogonControl2Ex, state S1875");
                    this.Manager.Comment("reaching state \'S2171\'");
                    goto label186;
                }
                throw new InvalidOperationException("never reached");
            label186:
;
                goto label187;
            }
            throw new InvalidOperationException("never reached");
        label187:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S745");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S745");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S746");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S746");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S747");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS180GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S747");
        }
        #endregion
        
        #region Test Starting in S182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182");
            this.Manager.Comment("reaching state \'S182\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp658;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp658);
            this.Manager.AddReturn(GetPlatformInfo, null, temp658);
            this.Manager.Comment("reaching state \'S183\'");
            int temp671 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetPlatformChecker2)));
            if ((temp671 == 0)) {
                this.Manager.Comment("reaching state \'S463\'");
                bool temp659;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp659);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp659);
                this.Manager.Comment("reaching state \'S748\'");
                int temp662 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker1)));
                if ((temp662 == 0)) {
                    this.Manager.Comment("reaching state \'S1306\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp660;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,1,Valid)\'");
                    temp660 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1876\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp660, "return of NetrLogonControl2Ex, state S1876");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label188;
                }
                if ((temp662 == 1)) {
                    this.Manager.Comment("reaching state \'S1307\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp661;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,1,Valid)\'");
                    temp661 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1877\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp661, "return of NetrLogonControl2Ex, state S1877");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label188;
                }
                throw new InvalidOperationException("never reached");
            label188:
;
                goto label191;
            }
            if ((temp671 == 1)) {
                this.Manager.Comment("reaching state \'S464\'");
                bool temp663;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp663);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp663);
                this.Manager.Comment("reaching state \'S749\'");
                int temp666 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker3)));
                if ((temp666 == 0)) {
                    this.Manager.Comment("reaching state \'S1308\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp664;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp664 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1878\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp664, "return of NetrLogonControl2Ex, state S1878");
                    this.Manager.Comment("reaching state \'S2172\'");
                    goto label189;
                }
                if ((temp666 == 1)) {
                    this.Manager.Comment("reaching state \'S1309\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp665;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp665 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1879\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp665, "return of NetrLogonControl2Ex, state S1879");
                    this.Manager.Comment("reaching state \'S2173\'");
                    goto label189;
                }
                throw new InvalidOperationException("never reached");
            label189:
;
                goto label191;
            }
            if ((temp671 == 2)) {
                this.Manager.Comment("reaching state \'S465\'");
                bool temp667;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp667);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp667);
                this.Manager.Comment("reaching state \'S750\'");
                int temp670 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker5)));
                if ((temp670 == 0)) {
                    this.Manager.Comment("reaching state \'S1310\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp668;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp668 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1880\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp668, "return of NetrLogonControl2Ex, state S1880");
                    this.Manager.Comment("reaching state \'S2174\'");
                    goto label190;
                }
                if ((temp670 == 1)) {
                    this.Manager.Comment("reaching state \'S1311\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp669;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp669 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1881\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp669, "return of NetrLogonControl2Ex, state S1881");
                    this.Manager.Comment("reaching state \'S2175\'");
                    goto label190;
                }
                throw new InvalidOperationException("never reached");
            label190:
;
                goto label191;
            }
            throw new InvalidOperationException("never reached");
        label191:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S748");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S748");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S749");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S749");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S750");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS182GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S750");
        }
        #endregion
        
        #region Test Starting in S184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184");
            this.Manager.Comment("reaching state \'S184\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp672;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp672);
            this.Manager.AddReturn(GetPlatformInfo, null, temp672);
            this.Manager.Comment("reaching state \'S185\'");
            int temp685 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetPlatformChecker2)));
            if ((temp685 == 0)) {
                this.Manager.Comment("reaching state \'S466\'");
                bool temp673;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp673);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp673);
                this.Manager.Comment("reaching state \'S751\'");
                int temp676 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker1)));
                if ((temp676 == 0)) {
                    this.Manager.Comment("reaching state \'S1312\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp674;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,1,Valid)\'");
                    temp674 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1882\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp674, "return of NetrLogonControl2Ex, state S1882");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label192;
                }
                if ((temp676 == 1)) {
                    this.Manager.Comment("reaching state \'S1313\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp675;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,1,Valid)\'");
                    temp675 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1883\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp675, "return of NetrLogonControl2Ex, state S1883");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label192;
                }
                throw new InvalidOperationException("never reached");
            label192:
;
                goto label195;
            }
            if ((temp685 == 1)) {
                this.Manager.Comment("reaching state \'S467\'");
                bool temp677;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp677);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp677);
                this.Manager.Comment("reaching state \'S752\'");
                int temp680 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker3)));
                if ((temp680 == 0)) {
                    this.Manager.Comment("reaching state \'S1314\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp678;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp678 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1884\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp678, "return of NetrLogonControl2Ex, state S1884");
                    this.Manager.Comment("reaching state \'S2176\'");
                    goto label193;
                }
                if ((temp680 == 1)) {
                    this.Manager.Comment("reaching state \'S1315\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp679;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp679 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1885\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp679, "return of NetrLogonControl2Ex, state S1885");
                    this.Manager.Comment("reaching state \'S2177\'");
                    goto label193;
                }
                throw new InvalidOperationException("never reached");
            label193:
;
                goto label195;
            }
            if ((temp685 == 2)) {
                this.Manager.Comment("reaching state \'S468\'");
                bool temp681;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp681);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp681);
                this.Manager.Comment("reaching state \'S753\'");
                int temp684 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker5)));
                if ((temp684 == 0)) {
                    this.Manager.Comment("reaching state \'S1316\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp682;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp682 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1886\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp682, "return of NetrLogonControl2Ex, state S1886");
                    this.Manager.Comment("reaching state \'S2178\'");
                    goto label194;
                }
                if ((temp684 == 1)) {
                    this.Manager.Comment("reaching state \'S1317\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp683;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp683 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1887\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp683, "return of NetrLogonControl2Ex, state S1887");
                    this.Manager.Comment("reaching state \'S2179\'");
                    goto label194;
                }
                throw new InvalidOperationException("never reached");
            label194:
;
                goto label195;
            }
            throw new InvalidOperationException("never reached");
        label195:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S751");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S751");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S752");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S752");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S753");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS184GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S753");
        }
        #endregion
        
        #region Test Starting in S186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186");
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp686;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp686);
            this.Manager.AddReturn(GetPlatformInfo, null, temp686);
            this.Manager.Comment("reaching state \'S187\'");
            int temp699 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetPlatformChecker2)));
            if ((temp699 == 0)) {
                this.Manager.Comment("reaching state \'S469\'");
                bool temp687;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp687);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp687);
                this.Manager.Comment("reaching state \'S754\'");
                int temp690 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker1)));
                if ((temp690 == 0)) {
                    this.Manager.Comment("reaching state \'S1318\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp688;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,1,Valid)\'");
                    temp688 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1888\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp688, "return of NetrLogonControl2Ex, state S1888");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label196;
                }
                if ((temp690 == 1)) {
                    this.Manager.Comment("reaching state \'S1319\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp689;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,1,Valid)\'");
                    temp689 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1889\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp689, "return of NetrLogonControl2Ex, state S1889");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label196;
                }
                throw new InvalidOperationException("never reached");
            label196:
;
                goto label199;
            }
            if ((temp699 == 1)) {
                this.Manager.Comment("reaching state \'S470\'");
                bool temp691;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp691);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp691);
                this.Manager.Comment("reaching state \'S755\'");
                int temp694 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker3)));
                if ((temp694 == 0)) {
                    this.Manager.Comment("reaching state \'S1320\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp692;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp692 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1890\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp692, "return of NetrLogonControl2Ex, state S1890");
                    this.Manager.Comment("reaching state \'S2180\'");
                    goto label197;
                }
                if ((temp694 == 1)) {
                    this.Manager.Comment("reaching state \'S1321\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp693;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp693 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1891\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp693, "return of NetrLogonControl2Ex, state S1891");
                    this.Manager.Comment("reaching state \'S2181\'");
                    goto label197;
                }
                throw new InvalidOperationException("never reached");
            label197:
;
                goto label199;
            }
            if ((temp699 == 2)) {
                this.Manager.Comment("reaching state \'S471\'");
                bool temp695;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp695);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp695);
                this.Manager.Comment("reaching state \'S756\'");
                int temp698 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker5)));
                if ((temp698 == 0)) {
                    this.Manager.Comment("reaching state \'S1322\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp696;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp696 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1892\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp696, "return of NetrLogonControl2Ex, state S1892");
                    this.Manager.Comment("reaching state \'S2182\'");
                    goto label198;
                }
                if ((temp698 == 1)) {
                    this.Manager.Comment("reaching state \'S1323\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp697;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp697 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1893\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp697, "return of NetrLogonControl2Ex, state S1893");
                    this.Manager.Comment("reaching state \'S2183\'");
                    goto label198;
                }
                throw new InvalidOperationException("never reached");
            label198:
;
                goto label199;
            }
            throw new InvalidOperationException("never reached");
        label199:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S754");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S754");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S755");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S755");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S756");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS186GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S756");
        }
        #endregion
        
        #region Test Starting in S188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188");
            this.Manager.Comment("reaching state \'S188\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp700;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp700);
            this.Manager.AddReturn(GetPlatformInfo, null, temp700);
            this.Manager.Comment("reaching state \'S189\'");
            int temp713 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetPlatformChecker2)));
            if ((temp713 == 0)) {
                this.Manager.Comment("reaching state \'S472\'");
                bool temp701;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp701);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp701);
                this.Manager.Comment("reaching state \'S757\'");
                int temp704 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker1)));
                if ((temp704 == 0)) {
                    this.Manager.Comment("reaching state \'S1324\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp702;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,3,Valid)\'");
                    temp702 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1894\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp702, "return of NetrLogonControl2Ex, state S1894");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label200;
                }
                if ((temp704 == 1)) {
                    this.Manager.Comment("reaching state \'S1325\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp703;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,3,Valid)\'");
                    temp703 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1895\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp703, "return of NetrLogonControl2Ex, state S1895");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label200;
                }
                throw new InvalidOperationException("never reached");
            label200:
;
                goto label203;
            }
            if ((temp713 == 1)) {
                this.Manager.Comment("reaching state \'S473\'");
                bool temp705;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp705);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp705);
                this.Manager.Comment("reaching state \'S758\'");
                int temp708 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker3)));
                if ((temp708 == 0)) {
                    this.Manager.Comment("reaching state \'S1326\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp706;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp706 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1896\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp706, "return of NetrLogonControl2Ex, state S1896");
                    this.Manager.Comment("reaching state \'S2184\'");
                    goto label201;
                }
                if ((temp708 == 1)) {
                    this.Manager.Comment("reaching state \'S1327\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp707;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp707 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1897\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp707, "return of NetrLogonControl2Ex, state S1897");
                    this.Manager.Comment("reaching state \'S2185\'");
                    goto label201;
                }
                throw new InvalidOperationException("never reached");
            label201:
;
                goto label203;
            }
            if ((temp713 == 2)) {
                this.Manager.Comment("reaching state \'S474\'");
                bool temp709;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp709);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp709);
                this.Manager.Comment("reaching state \'S759\'");
                int temp712 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker5)));
                if ((temp712 == 0)) {
                    this.Manager.Comment("reaching state \'S1328\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp710;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp710 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1898\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp710, "return of NetrLogonControl2Ex, state S1898");
                    this.Manager.Comment("reaching state \'S2186\'");
                    goto label202;
                }
                if ((temp712 == 1)) {
                    this.Manager.Comment("reaching state \'S1329\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp711;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp711 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1899\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp711, "return of NetrLogonControl2Ex, state S1899");
                    this.Manager.Comment("reaching state \'S2187\'");
                    goto label202;
                }
                throw new InvalidOperationException("never reached");
            label202:
;
                goto label203;
            }
            throw new InvalidOperationException("never reached");
        label203:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S757");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S757");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S758");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S758");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S759");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS188GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S759");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2");
            this.Manager.Comment("reaching state \'S2\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp714;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp714);
            this.Manager.AddReturn(GetPlatformInfo, null, temp714);
            this.Manager.Comment("reaching state \'S3\'");
            int temp727 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetPlatformChecker2)));
            if ((temp727 == 0)) {
                this.Manager.Comment("reaching state \'S193\'");
                bool temp715;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp715);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp715);
                this.Manager.Comment("reaching state \'S478\'");
                int temp718 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker1)));
                if ((temp718 == 0)) {
                    this.Manager.Comment("reaching state \'S766\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp716;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp716 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1336\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp716, "return of NetrLogonControl2Ex, state S1336");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label204;
                }
                if ((temp718 == 1)) {
                    this.Manager.Comment("reaching state \'S767\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp717;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp717 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1337\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp717, "return of NetrLogonControl2Ex, state S1337");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label204;
                }
                throw new InvalidOperationException("never reached");
            label204:
;
                goto label207;
            }
            if ((temp727 == 1)) {
                this.Manager.Comment("reaching state \'S194\'");
                bool temp719;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp719);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp719);
                this.Manager.Comment("reaching state \'S479\'");
                int temp722 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker3)));
                if ((temp722 == 0)) {
                    this.Manager.Comment("reaching state \'S768\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp720;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp720 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1338\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp720, "return of NetrLogonControl2Ex, state S1338");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label205;
                }
                if ((temp722 == 1)) {
                    this.Manager.Comment("reaching state \'S769\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp721;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp721 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1339\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp721, "return of NetrLogonControl2Ex, state S1339");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label205;
                }
                throw new InvalidOperationException("never reached");
            label205:
;
                goto label207;
            }
            if ((temp727 == 2)) {
                this.Manager.Comment("reaching state \'S195\'");
                bool temp723;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp723);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp723);
                this.Manager.Comment("reaching state \'S480\'");
                int temp726 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker5)));
                if ((temp726 == 0)) {
                    this.Manager.Comment("reaching state \'S770\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp724;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp724 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1340\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp724, "return of NetrLogonControl2Ex, state S1340");
                    this.Manager.Comment("reaching state \'S1906\'");
                    goto label206;
                }
                if ((temp726 == 1)) {
                    this.Manager.Comment("reaching state \'S771\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp725;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp725 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1341\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp725, "return of NetrLogonControl2Ex, state S1341");
                    this.Manager.Comment("reaching state \'S1907\'");
                    goto label206;
                }
                throw new InvalidOperationException("never reached");
            label206:
;
                goto label207;
            }
            throw new InvalidOperationException("never reached");
        label207:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S478");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S478");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S479");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S479");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S480");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS2GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S480");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20");
            this.Manager.Comment("reaching state \'S20\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp728;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp728);
            this.Manager.AddReturn(GetPlatformInfo, null, temp728);
            this.Manager.Comment("reaching state \'S21\'");
            int temp741 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetPlatformChecker2)));
            if ((temp741 == 0)) {
                this.Manager.Comment("reaching state \'S220\'");
                bool temp729;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp729);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp729);
                this.Manager.Comment("reaching state \'S505\'");
                int temp732 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker1)));
                if ((temp732 == 0)) {
                    this.Manager.Comment("reaching state \'S820\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp730;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,2,Valid)\'");
                    temp730 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1390\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp730, "return of NetrLogonControl2Ex, state S1390");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label208;
                }
                if ((temp732 == 1)) {
                    this.Manager.Comment("reaching state \'S821\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp731;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,2,Valid)\'");
                    temp731 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1391\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp731, "return of NetrLogonControl2Ex, state S1391");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label208;
                }
                throw new InvalidOperationException("never reached");
            label208:
;
                goto label211;
            }
            if ((temp741 == 1)) {
                this.Manager.Comment("reaching state \'S221\'");
                bool temp733;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp733);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp733);
                this.Manager.Comment("reaching state \'S506\'");
                int temp736 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker3)));
                if ((temp736 == 0)) {
                    this.Manager.Comment("reaching state \'S822\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp734;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,4,Valid)\'");
                    temp734 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1392\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp734, "return of NetrLogonControl2Ex, state S1392");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label209;
                }
                if ((temp736 == 1)) {
                    this.Manager.Comment("reaching state \'S823\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp735;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,4,Valid)\'");
                    temp735 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1393\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp735, "return of NetrLogonControl2Ex, state S1393");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label209;
                }
                throw new InvalidOperationException("never reached");
            label209:
;
                goto label211;
            }
            if ((temp741 == 2)) {
                this.Manager.Comment("reaching state \'S222\'");
                bool temp737;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp737);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp737);
                this.Manager.Comment("reaching state \'S507\'");
                int temp740 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker5)));
                if ((temp740 == 0)) {
                    this.Manager.Comment("reaching state \'S824\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp738;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp738 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1394\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp738, "return of NetrLogonControl2Ex, state S1394");
                    this.Manager.Comment("reaching state \'S1924\'");
                    goto label210;
                }
                if ((temp740 == 1)) {
                    this.Manager.Comment("reaching state \'S825\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp739;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp739 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1395\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp739, "return of NetrLogonControl2Ex, state S1395");
                    this.Manager.Comment("reaching state \'S1925\'");
                    goto label210;
                }
                throw new InvalidOperationException("never reached");
            label210:
;
                goto label211;
            }
            throw new InvalidOperationException("never reached");
        label211:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S505");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S505");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S506");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S506");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S507");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS20GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S507");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22");
            this.Manager.Comment("reaching state \'S22\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp742;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp742);
            this.Manager.AddReturn(GetPlatformInfo, null, temp742);
            this.Manager.Comment("reaching state \'S23\'");
            int temp755 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetPlatformChecker2)));
            if ((temp755 == 0)) {
                this.Manager.Comment("reaching state \'S223\'");
                bool temp743;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp743);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp743);
                this.Manager.Comment("reaching state \'S508\'");
                int temp746 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker1)));
                if ((temp746 == 0)) {
                    this.Manager.Comment("reaching state \'S826\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp744;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,2,Valid)\'");
                    temp744 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1396\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp744, "return of NetrLogonControl2Ex, state S1396");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label212;
                }
                if ((temp746 == 1)) {
                    this.Manager.Comment("reaching state \'S827\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp745;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,2,Valid)\'");
                    temp745 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1397\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp745, "return of NetrLogonControl2Ex, state S1397");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label212;
                }
                throw new InvalidOperationException("never reached");
            label212:
;
                goto label215;
            }
            if ((temp755 == 1)) {
                this.Manager.Comment("reaching state \'S224\'");
                bool temp747;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp747);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp747);
                this.Manager.Comment("reaching state \'S509\'");
                int temp750 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker3)));
                if ((temp750 == 0)) {
                    this.Manager.Comment("reaching state \'S828\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp748;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,4,Valid)\'");
                    temp748 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1398\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp748, "return of NetrLogonControl2Ex, state S1398");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label213;
                }
                if ((temp750 == 1)) {
                    this.Manager.Comment("reaching state \'S829\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp749;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,4,Valid)\'");
                    temp749 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1399\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp749, "return of NetrLogonControl2Ex, state S1399");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label213;
                }
                throw new InvalidOperationException("never reached");
            label213:
;
                goto label215;
            }
            if ((temp755 == 2)) {
                this.Manager.Comment("reaching state \'S225\'");
                bool temp751;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp751);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp751);
                this.Manager.Comment("reaching state \'S510\'");
                int temp754 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker5)));
                if ((temp754 == 0)) {
                    this.Manager.Comment("reaching state \'S830\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp752;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp752 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1400\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp752, "return of NetrLogonControl2Ex, state S1400");
                    this.Manager.Comment("reaching state \'S1926\'");
                    goto label214;
                }
                if ((temp754 == 1)) {
                    this.Manager.Comment("reaching state \'S831\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp753;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp753 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1401\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp753, "return of NetrLogonControl2Ex, state S1401");
                    this.Manager.Comment("reaching state \'S1927\'");
                    goto label214;
                }
                throw new InvalidOperationException("never reached");
            label214:
;
                goto label215;
            }
            throw new InvalidOperationException("never reached");
        label215:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S508");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S508");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S509");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S509");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S510");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS22GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S510");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp756;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp756);
            this.Manager.AddReturn(GetPlatformInfo, null, temp756);
            this.Manager.Comment("reaching state \'S25\'");
            int temp769 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetPlatformChecker2)));
            if ((temp769 == 0)) {
                this.Manager.Comment("reaching state \'S226\'");
                bool temp757;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp757);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp757);
                this.Manager.Comment("reaching state \'S511\'");
                int temp760 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker1)));
                if ((temp760 == 0)) {
                    this.Manager.Comment("reaching state \'S832\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp758;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,2,Valid)\'");
                    temp758 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1402\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp758, "return of NetrLogonControl2Ex, state S1402");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label216;
                }
                if ((temp760 == 1)) {
                    this.Manager.Comment("reaching state \'S833\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp759;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,2,Valid)\'");
                    temp759 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1403\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp759, "return of NetrLogonControl2Ex, state S1403");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label216;
                }
                throw new InvalidOperationException("never reached");
            label216:
;
                goto label219;
            }
            if ((temp769 == 1)) {
                this.Manager.Comment("reaching state \'S227\'");
                bool temp761;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp761);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp761);
                this.Manager.Comment("reaching state \'S512\'");
                int temp764 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker3)));
                if ((temp764 == 0)) {
                    this.Manager.Comment("reaching state \'S834\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp762;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,4,Valid)\'");
                    temp762 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103931");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1404\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp762, "return of NetrLogonControl2Ex, state S1404");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label217;
                }
                if ((temp764 == 1)) {
                    this.Manager.Comment("reaching state \'S835\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp763;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,4,Valid)\'");
                    temp763 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103931");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1405\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp763, "return of NetrLogonControl2Ex, state S1405");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label217;
                }
                throw new InvalidOperationException("never reached");
            label217:
;
                goto label219;
            }
            if ((temp769 == 2)) {
                this.Manager.Comment("reaching state \'S228\'");
                bool temp765;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp765);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp765);
                this.Manager.Comment("reaching state \'S513\'");
                int temp768 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker5)));
                if ((temp768 == 0)) {
                    this.Manager.Comment("reaching state \'S836\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp766;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp766 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1406\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp766, "return of NetrLogonControl2Ex, state S1406");
                    this.Manager.Comment("reaching state \'S1928\'");
                    goto label218;
                }
                if ((temp768 == 1)) {
                    this.Manager.Comment("reaching state \'S837\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp767;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp767 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1407\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp767, "return of NetrLogonControl2Ex, state S1407");
                    this.Manager.Comment("reaching state \'S1929\'");
                    goto label218;
                }
                throw new InvalidOperationException("never reached");
            label218:
;
                goto label219;
            }
            throw new InvalidOperationException("never reached");
        label219:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S511");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S511");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S512");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S512");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S513");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS24GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S513");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp770;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp770);
            this.Manager.AddReturn(GetPlatformInfo, null, temp770);
            this.Manager.Comment("reaching state \'S27\'");
            int temp783 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetPlatformChecker2)));
            if ((temp783 == 0)) {
                this.Manager.Comment("reaching state \'S229\'");
                bool temp771;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp771);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp771);
                this.Manager.Comment("reaching state \'S514\'");
                int temp774 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker1)));
                if ((temp774 == 0)) {
                    this.Manager.Comment("reaching state \'S838\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp772;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,1,Valid)\'");
                    temp772 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1408\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp772, "return of NetrLogonControl2Ex, state S1408");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label220;
                }
                if ((temp774 == 1)) {
                    this.Manager.Comment("reaching state \'S839\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp773;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,2,Valid)\'");
                    temp773 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1409\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp773, "return of NetrLogonControl2Ex, state S1409");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label220;
                }
                throw new InvalidOperationException("never reached");
            label220:
;
                goto label223;
            }
            if ((temp783 == 1)) {
                this.Manager.Comment("reaching state \'S230\'");
                bool temp775;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp775);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp775);
                this.Manager.Comment("reaching state \'S515\'");
                int temp778 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker3)));
                if ((temp778 == 0)) {
                    this.Manager.Comment("reaching state \'S840\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp776;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,4,Valid)\'");
                    temp776 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1410\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp776, "return of NetrLogonControl2Ex, state S1410");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label221;
                }
                if ((temp778 == 1)) {
                    this.Manager.Comment("reaching state \'S841\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp777;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,4,Valid)\'");
                    temp777 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1411\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp777, "return of NetrLogonControl2Ex, state S1411");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label221;
                }
                throw new InvalidOperationException("never reached");
            label221:
;
                goto label223;
            }
            if ((temp783 == 2)) {
                this.Manager.Comment("reaching state \'S231\'");
                bool temp779;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp779);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp779);
                this.Manager.Comment("reaching state \'S516\'");
                int temp782 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker5)));
                if ((temp782 == 0)) {
                    this.Manager.Comment("reaching state \'S842\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp780;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp780 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1412\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp780, "return of NetrLogonControl2Ex, state S1412");
                    this.Manager.Comment("reaching state \'S1930\'");
                    goto label222;
                }
                if ((temp782 == 1)) {
                    this.Manager.Comment("reaching state \'S843\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp781;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp781 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1413\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp781, "return of NetrLogonControl2Ex, state S1413");
                    this.Manager.Comment("reaching state \'S1931\'");
                    goto label222;
                }
                throw new InvalidOperationException("never reached");
            label222:
;
                goto label223;
            }
            throw new InvalidOperationException("never reached");
        label223:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S514");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S514");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S515");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S515");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S516");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS26GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S516");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28");
            this.Manager.Comment("reaching state \'S28\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp784;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp784);
            this.Manager.AddReturn(GetPlatformInfo, null, temp784);
            this.Manager.Comment("reaching state \'S29\'");
            int temp797 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetPlatformChecker2)));
            if ((temp797 == 0)) {
                this.Manager.Comment("reaching state \'S232\'");
                bool temp785;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp785);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp785);
                this.Manager.Comment("reaching state \'S517\'");
                int temp788 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker1)));
                if ((temp788 == 0)) {
                    this.Manager.Comment("reaching state \'S844\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp786;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,3,Valid)\'");
                    temp786 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1414\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp786, "return of NetrLogonControl2Ex, state S1414");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label224;
                }
                if ((temp788 == 1)) {
                    this.Manager.Comment("reaching state \'S845\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp787;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,2,Valid)\'");
                    temp787 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1415\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp787, "return of NetrLogonControl2Ex, state S1415");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label224;
                }
                throw new InvalidOperationException("never reached");
            label224:
;
                goto label227;
            }
            if ((temp797 == 1)) {
                this.Manager.Comment("reaching state \'S233\'");
                bool temp789;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp789);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp789);
                this.Manager.Comment("reaching state \'S518\'");
                int temp792 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker3)));
                if ((temp792 == 0)) {
                    this.Manager.Comment("reaching state \'S846\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp790;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,3,Valid)\'");
                    temp790 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1416\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp790, "return of NetrLogonControl2Ex, state S1416");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label225;
                }
                if ((temp792 == 1)) {
                    this.Manager.Comment("reaching state \'S847\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp791;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,3,Valid)\'");
                    temp791 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1417\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp791, "return of NetrLogonControl2Ex, state S1417");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label225;
                }
                throw new InvalidOperationException("never reached");
            label225:
;
                goto label227;
            }
            if ((temp797 == 2)) {
                this.Manager.Comment("reaching state \'S234\'");
                bool temp793;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp793);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp793);
                this.Manager.Comment("reaching state \'S519\'");
                int temp796 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker5)));
                if ((temp796 == 0)) {
                    this.Manager.Comment("reaching state \'S848\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp794;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp794 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1418\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp794, "return of NetrLogonControl2Ex, state S1418");
                    this.Manager.Comment("reaching state \'S1932\'");
                    goto label226;
                }
                if ((temp796 == 1)) {
                    this.Manager.Comment("reaching state \'S849\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp795;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp795 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1419\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp795, "return of NetrLogonControl2Ex, state S1419");
                    this.Manager.Comment("reaching state \'S1933\'");
                    goto label226;
                }
                throw new InvalidOperationException("never reached");
            label226:
;
                goto label227;
            }
            throw new InvalidOperationException("never reached");
        label227:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S517");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S517");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S518");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S518");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S519");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS28GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S519");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp798;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp798);
            this.Manager.AddReturn(GetPlatformInfo, null, temp798);
            this.Manager.Comment("reaching state \'S31\'");
            int temp811 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetPlatformChecker2)));
            if ((temp811 == 0)) {
                this.Manager.Comment("reaching state \'S235\'");
                bool temp799;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp799);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp799);
                this.Manager.Comment("reaching state \'S520\'");
                int temp802 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker1)));
                if ((temp802 == 0)) {
                    this.Manager.Comment("reaching state \'S850\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp800;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,4,Valid)\'");
                    temp800 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1420\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp800, "return of NetrLogonControl2Ex, state S1420");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label228;
                }
                if ((temp802 == 1)) {
                    this.Manager.Comment("reaching state \'S851\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp801;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,1,Valid)\'");
                    temp801 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1421\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp801, "return of NetrLogonControl2Ex, state S1421");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label228;
                }
                throw new InvalidOperationException("never reached");
            label228:
;
                goto label231;
            }
            if ((temp811 == 1)) {
                this.Manager.Comment("reaching state \'S236\'");
                bool temp803;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp803);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp803);
                this.Manager.Comment("reaching state \'S521\'");
                int temp806 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker3)));
                if ((temp806 == 0)) {
                    this.Manager.Comment("reaching state \'S852\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp804;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,3,Valid)\'");
                    temp804 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1422\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp804, "return of NetrLogonControl2Ex, state S1422");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label229;
                }
                if ((temp806 == 1)) {
                    this.Manager.Comment("reaching state \'S853\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp805;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,3,Valid)\'");
                    temp805 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1423\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp805, "return of NetrLogonControl2Ex, state S1423");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label229;
                }
                throw new InvalidOperationException("never reached");
            label229:
;
                goto label231;
            }
            if ((temp811 == 2)) {
                this.Manager.Comment("reaching state \'S237\'");
                bool temp807;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp807);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp807);
                this.Manager.Comment("reaching state \'S522\'");
                int temp810 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker5)));
                if ((temp810 == 0)) {
                    this.Manager.Comment("reaching state \'S854\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp808;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp808 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1424\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp808, "return of NetrLogonControl2Ex, state S1424");
                    this.Manager.Comment("reaching state \'S1934\'");
                    goto label230;
                }
                if ((temp810 == 1)) {
                    this.Manager.Comment("reaching state \'S855\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp809;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp809 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1425\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp809, "return of NetrLogonControl2Ex, state S1425");
                    this.Manager.Comment("reaching state \'S1935\'");
                    goto label230;
                }
                throw new InvalidOperationException("never reached");
            label230:
;
                goto label231;
            }
            throw new InvalidOperationException("never reached");
        label231:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S520");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S520");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S521");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S521");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S522");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS30GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S522");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp812;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp812);
            this.Manager.AddReturn(GetPlatformInfo, null, temp812);
            this.Manager.Comment("reaching state \'S33\'");
            int temp825 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetPlatformChecker2)));
            if ((temp825 == 0)) {
                this.Manager.Comment("reaching state \'S238\'");
                bool temp813;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp813);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp813);
                this.Manager.Comment("reaching state \'S523\'");
                int temp816 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker1)));
                if ((temp816 == 0)) {
                    this.Manager.Comment("reaching state \'S856\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp814;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,1,Valid)\'");
                    temp814 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1426\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp814, "return of NetrLogonControl2Ex, state S1426");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label232;
                }
                if ((temp816 == 1)) {
                    this.Manager.Comment("reaching state \'S857\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp815;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,1,Valid)\'");
                    temp815 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1427\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp815, "return of NetrLogonControl2Ex, state S1427");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label232;
                }
                throw new InvalidOperationException("never reached");
            label232:
;
                goto label235;
            }
            if ((temp825 == 1)) {
                this.Manager.Comment("reaching state \'S239\'");
                bool temp817;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp817);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp817);
                this.Manager.Comment("reaching state \'S524\'");
                int temp820 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker3)));
                if ((temp820 == 0)) {
                    this.Manager.Comment("reaching state \'S858\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp818;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,3,Valid)\'");
                    temp818 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1428\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp818, "return of NetrLogonControl2Ex, state S1428");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label233;
                }
                if ((temp820 == 1)) {
                    this.Manager.Comment("reaching state \'S859\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp819;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,3,Valid)\'");
                    temp819 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1429\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp819, "return of NetrLogonControl2Ex, state S1429");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label233;
                }
                throw new InvalidOperationException("never reached");
            label233:
;
                goto label235;
            }
            if ((temp825 == 2)) {
                this.Manager.Comment("reaching state \'S240\'");
                bool temp821;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp821);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp821);
                this.Manager.Comment("reaching state \'S525\'");
                int temp824 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker5)));
                if ((temp824 == 0)) {
                    this.Manager.Comment("reaching state \'S860\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp822;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp822 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1430\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp822, "return of NetrLogonControl2Ex, state S1430");
                    this.Manager.Comment("reaching state \'S1936\'");
                    goto label234;
                }
                if ((temp824 == 1)) {
                    this.Manager.Comment("reaching state \'S861\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp823;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp823 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1431\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp823, "return of NetrLogonControl2Ex, state S1431");
                    this.Manager.Comment("reaching state \'S1937\'");
                    goto label234;
                }
                throw new InvalidOperationException("never reached");
            label234:
;
                goto label235;
            }
            throw new InvalidOperationException("never reached");
        label235:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S523");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S523");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S524");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S524");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S525");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS32GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S525");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34");
            this.Manager.Comment("reaching state \'S34\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp826;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp826);
            this.Manager.AddReturn(GetPlatformInfo, null, temp826);
            this.Manager.Comment("reaching state \'S35\'");
            int temp839 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetPlatformChecker2)));
            if ((temp839 == 0)) {
                this.Manager.Comment("reaching state \'S241\'");
                bool temp827;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp827);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp827);
                this.Manager.Comment("reaching state \'S526\'");
                int temp830 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker1)));
                if ((temp830 == 0)) {
                    this.Manager.Comment("reaching state \'S862\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp828;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,1,Valid)\'");
                    temp828 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1432\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp828, "return of NetrLogonControl2Ex, state S1432");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label236;
                }
                if ((temp830 == 1)) {
                    this.Manager.Comment("reaching state \'S863\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp829;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,3,Valid)\'");
                    temp829 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1433\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp829, "return of NetrLogonControl2Ex, state S1433");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label236;
                }
                throw new InvalidOperationException("never reached");
            label236:
;
                goto label239;
            }
            if ((temp839 == 1)) {
                this.Manager.Comment("reaching state \'S242\'");
                bool temp831;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp831);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp831);
                this.Manager.Comment("reaching state \'S527\'");
                int temp834 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker3)));
                if ((temp834 == 0)) {
                    this.Manager.Comment("reaching state \'S864\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp832;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,3,Valid)\'");
                    temp832 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1434\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp832, "return of NetrLogonControl2Ex, state S1434");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label237;
                }
                if ((temp834 == 1)) {
                    this.Manager.Comment("reaching state \'S865\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp833;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,3,Valid)\'");
                    temp833 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1435\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp833, "return of NetrLogonControl2Ex, state S1435");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label237;
                }
                throw new InvalidOperationException("never reached");
            label237:
;
                goto label239;
            }
            if ((temp839 == 2)) {
                this.Manager.Comment("reaching state \'S243\'");
                bool temp835;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp835);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp835);
                this.Manager.Comment("reaching state \'S528\'");
                int temp838 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker5)));
                if ((temp838 == 0)) {
                    this.Manager.Comment("reaching state \'S866\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp836;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp836 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1436\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp836, "return of NetrLogonControl2Ex, state S1436");
                    this.Manager.Comment("reaching state \'S1938\'");
                    goto label238;
                }
                if ((temp838 == 1)) {
                    this.Manager.Comment("reaching state \'S867\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp837;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp837 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1437\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp837, "return of NetrLogonControl2Ex, state S1437");
                    this.Manager.Comment("reaching state \'S1939\'");
                    goto label238;
                }
                throw new InvalidOperationException("never reached");
            label238:
;
                goto label239;
            }
            throw new InvalidOperationException("never reached");
        label239:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S526");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S526");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S527");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S527");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S528");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS34GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S528");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36");
            this.Manager.Comment("reaching state \'S36\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp840;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp840);
            this.Manager.AddReturn(GetPlatformInfo, null, temp840);
            this.Manager.Comment("reaching state \'S37\'");
            int temp853 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetPlatformChecker2)));
            if ((temp853 == 0)) {
                this.Manager.Comment("reaching state \'S244\'");
                bool temp841;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp841);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp841);
                this.Manager.Comment("reaching state \'S529\'");
                int temp844 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker1)));
                if ((temp844 == 0)) {
                    this.Manager.Comment("reaching state \'S868\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp842;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,1,Valid)\'");
                    temp842 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1438\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp842, "return of NetrLogonControl2Ex, state S1438");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label240;
                }
                if ((temp844 == 1)) {
                    this.Manager.Comment("reaching state \'S869\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp843;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,3,Valid)\'");
                    temp843 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1439\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp843, "return of NetrLogonControl2Ex, state S1439");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label240;
                }
                throw new InvalidOperationException("never reached");
            label240:
;
                goto label243;
            }
            if ((temp853 == 1)) {
                this.Manager.Comment("reaching state \'S245\'");
                bool temp845;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp845);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp845);
                this.Manager.Comment("reaching state \'S530\'");
                int temp848 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker3)));
                if ((temp848 == 0)) {
                    this.Manager.Comment("reaching state \'S870\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp846;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,3,Valid)\'");
                    temp846 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1440\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp846, "return of NetrLogonControl2Ex, state S1440");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label241;
                }
                if ((temp848 == 1)) {
                    this.Manager.Comment("reaching state \'S871\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp847;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,3,Valid)\'");
                    temp847 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1441\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp847, "return of NetrLogonControl2Ex, state S1441");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label241;
                }
                throw new InvalidOperationException("never reached");
            label241:
;
                goto label243;
            }
            if ((temp853 == 2)) {
                this.Manager.Comment("reaching state \'S246\'");
                bool temp849;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp849);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp849);
                this.Manager.Comment("reaching state \'S531\'");
                int temp852 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker5)));
                if ((temp852 == 0)) {
                    this.Manager.Comment("reaching state \'S872\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp850;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp850 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1442\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp850, "return of NetrLogonControl2Ex, state S1442");
                    this.Manager.Comment("reaching state \'S1940\'");
                    goto label242;
                }
                if ((temp852 == 1)) {
                    this.Manager.Comment("reaching state \'S873\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp851;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp851 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1443\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp851, "return of NetrLogonControl2Ex, state S1443");
                    this.Manager.Comment("reaching state \'S1941\'");
                    goto label242;
                }
                throw new InvalidOperationException("never reached");
            label242:
;
                goto label243;
            }
            throw new InvalidOperationException("never reached");
        label243:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S529");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S529");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S530");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S530");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S531");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS36GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S531");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38");
            this.Manager.Comment("reaching state \'S38\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp854;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp854);
            this.Manager.AddReturn(GetPlatformInfo, null, temp854);
            this.Manager.Comment("reaching state \'S39\'");
            int temp867 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetPlatformChecker2)));
            if ((temp867 == 0)) {
                this.Manager.Comment("reaching state \'S247\'");
                bool temp855;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp855);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp855);
                this.Manager.Comment("reaching state \'S532\'");
                int temp858 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker1)));
                if ((temp858 == 0)) {
                    this.Manager.Comment("reaching state \'S874\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp856;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,1,Valid)\'");
                    temp856 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1444\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp856, "return of NetrLogonControl2Ex, state S1444");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label244;
                }
                if ((temp858 == 1)) {
                    this.Manager.Comment("reaching state \'S875\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp857;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,3,Valid)\'");
                    temp857 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1445\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp857, "return of NetrLogonControl2Ex, state S1445");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label244;
                }
                throw new InvalidOperationException("never reached");
            label244:
;
                goto label247;
            }
            if ((temp867 == 1)) {
                this.Manager.Comment("reaching state \'S248\'");
                bool temp859;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp859);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp859);
                this.Manager.Comment("reaching state \'S533\'");
                int temp862 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker3)));
                if ((temp862 == 0)) {
                    this.Manager.Comment("reaching state \'S876\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp860;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,3,Valid)\'");
                    temp860 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1446\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp860, "return of NetrLogonControl2Ex, state S1446");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label245;
                }
                if ((temp862 == 1)) {
                    this.Manager.Comment("reaching state \'S877\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp861;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,3,Valid)\'");
                    temp861 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1447\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp861, "return of NetrLogonControl2Ex, state S1447");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label245;
                }
                throw new InvalidOperationException("never reached");
            label245:
;
                goto label247;
            }
            if ((temp867 == 2)) {
                this.Manager.Comment("reaching state \'S249\'");
                bool temp863;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp863);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp863);
                this.Manager.Comment("reaching state \'S534\'");
                int temp866 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker5)));
                if ((temp866 == 0)) {
                    this.Manager.Comment("reaching state \'S878\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp864;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp864 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1448\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp864, "return of NetrLogonControl2Ex, state S1448");
                    this.Manager.Comment("reaching state \'S1942\'");
                    goto label246;
                }
                if ((temp866 == 1)) {
                    this.Manager.Comment("reaching state \'S879\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp865;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp865 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1449\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp865, "return of NetrLogonControl2Ex, state S1449");
                    this.Manager.Comment("reaching state \'S1943\'");
                    goto label246;
                }
                throw new InvalidOperationException("never reached");
            label246:
;
                goto label247;
            }
            throw new InvalidOperationException("never reached");
        label247:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S532");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S532");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S533");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S533");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S534");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS38GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S534");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4");
            this.Manager.Comment("reaching state \'S4\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp868;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp868);
            this.Manager.AddReturn(GetPlatformInfo, null, temp868);
            this.Manager.Comment("reaching state \'S5\'");
            int temp881 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetPlatformChecker2)));
            if ((temp881 == 0)) {
                this.Manager.Comment("reaching state \'S196\'");
                bool temp869;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp869);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp869);
                this.Manager.Comment("reaching state \'S481\'");
                int temp872 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker1)));
                if ((temp872 == 0)) {
                    this.Manager.Comment("reaching state \'S772\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp870;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,2,Valid)\'");
                    temp870 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1342\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp870, "return of NetrLogonControl2Ex, state S1342");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label248;
                }
                if ((temp872 == 1)) {
                    this.Manager.Comment("reaching state \'S773\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp871;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,1,Valid)\'");
                    temp871 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1343\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp871, "return of NetrLogonControl2Ex, state S1343");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label248;
                }
                throw new InvalidOperationException("never reached");
            label248:
;
                goto label251;
            }
            if ((temp881 == 1)) {
                this.Manager.Comment("reaching state \'S197\'");
                bool temp873;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp873);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp873);
                this.Manager.Comment("reaching state \'S482\'");
                int temp876 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker3)));
                if ((temp876 == 0)) {
                    this.Manager.Comment("reaching state \'S774\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp874;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp874 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1344\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp874, "return of NetrLogonControl2Ex, state S1344");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label249;
                }
                if ((temp876 == 1)) {
                    this.Manager.Comment("reaching state \'S775\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp875;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp875 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1345\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp875, "return of NetrLogonControl2Ex, state S1345");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label249;
                }
                throw new InvalidOperationException("never reached");
            label249:
;
                goto label251;
            }
            if ((temp881 == 2)) {
                this.Manager.Comment("reaching state \'S198\'");
                bool temp877;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp877);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp877);
                this.Manager.Comment("reaching state \'S483\'");
                int temp880 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker5)));
                if ((temp880 == 0)) {
                    this.Manager.Comment("reaching state \'S776\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp878;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp878 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1346\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp878, "return of NetrLogonControl2Ex, state S1346");
                    this.Manager.Comment("reaching state \'S1908\'");
                    goto label250;
                }
                if ((temp880 == 1)) {
                    this.Manager.Comment("reaching state \'S777\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp879;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp879 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1347\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp879, "return of NetrLogonControl2Ex, state S1347");
                    this.Manager.Comment("reaching state \'S1909\'");
                    goto label250;
                }
                throw new InvalidOperationException("never reached");
            label250:
;
                goto label251;
            }
            throw new InvalidOperationException("never reached");
        label251:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S481");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S481");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S482");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S482");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S483");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS4GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S483");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp882;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp882);
            this.Manager.AddReturn(GetPlatformInfo, null, temp882);
            this.Manager.Comment("reaching state \'S41\'");
            int temp895 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetPlatformChecker2)));
            if ((temp895 == 0)) {
                this.Manager.Comment("reaching state \'S250\'");
                bool temp883;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp883);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp883);
                this.Manager.Comment("reaching state \'S535\'");
                int temp886 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker1)));
                if ((temp886 == 0)) {
                    this.Manager.Comment("reaching state \'S880\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp884;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,1,Valid)\'");
                    temp884 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1450\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp884, "return of NetrLogonControl2Ex, state S1450");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label252;
                }
                if ((temp886 == 1)) {
                    this.Manager.Comment("reaching state \'S881\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp885;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,1,Valid)\'");
                    temp885 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1451\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp885, "return of NetrLogonControl2Ex, state S1451");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label252;
                }
                throw new InvalidOperationException("never reached");
            label252:
;
                goto label255;
            }
            if ((temp895 == 1)) {
                this.Manager.Comment("reaching state \'S251\'");
                bool temp887;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp887);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp887);
                this.Manager.Comment("reaching state \'S536\'");
                int temp890 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker3)));
                if ((temp890 == 0)) {
                    this.Manager.Comment("reaching state \'S882\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp888;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,3,Valid)\'");
                    temp888 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1452\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp888, "return of NetrLogonControl2Ex, state S1452");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label253;
                }
                if ((temp890 == 1)) {
                    this.Manager.Comment("reaching state \'S883\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp889;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,3,Valid)\'");
                    temp889 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1453\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp889, "return of NetrLogonControl2Ex, state S1453");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label253;
                }
                throw new InvalidOperationException("never reached");
            label253:
;
                goto label255;
            }
            if ((temp895 == 2)) {
                this.Manager.Comment("reaching state \'S252\'");
                bool temp891;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp891);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp891);
                this.Manager.Comment("reaching state \'S537\'");
                int temp894 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker5)));
                if ((temp894 == 0)) {
                    this.Manager.Comment("reaching state \'S884\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp892;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp892 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1454\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp892, "return of NetrLogonControl2Ex, state S1454");
                    this.Manager.Comment("reaching state \'S1944\'");
                    goto label254;
                }
                if ((temp894 == 1)) {
                    this.Manager.Comment("reaching state \'S885\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp893;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp893 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1455\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp893, "return of NetrLogonControl2Ex, state S1455");
                    this.Manager.Comment("reaching state \'S1945\'");
                    goto label254;
                }
                throw new InvalidOperationException("never reached");
            label254:
;
                goto label255;
            }
            throw new InvalidOperationException("never reached");
        label255:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S535");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S535");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S536");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S536");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S537");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS40GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S537");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42");
            this.Manager.Comment("reaching state \'S42\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp896;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp896);
            this.Manager.AddReturn(GetPlatformInfo, null, temp896);
            this.Manager.Comment("reaching state \'S43\'");
            int temp909 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetPlatformChecker2)));
            if ((temp909 == 0)) {
                this.Manager.Comment("reaching state \'S253\'");
                bool temp897;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp897);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp897);
                this.Manager.Comment("reaching state \'S538\'");
                int temp900 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker1)));
                if ((temp900 == 0)) {
                    this.Manager.Comment("reaching state \'S886\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp898;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,4,Valid)\'");
                    temp898 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1456\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp898, "return of NetrLogonControl2Ex, state S1456");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label256;
                }
                if ((temp900 == 1)) {
                    this.Manager.Comment("reaching state \'S887\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp899;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,3,Valid)\'");
                    temp899 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1457\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp899, "return of NetrLogonControl2Ex, state S1457");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label256;
                }
                throw new InvalidOperationException("never reached");
            label256:
;
                goto label259;
            }
            if ((temp909 == 1)) {
                this.Manager.Comment("reaching state \'S254\'");
                bool temp901;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp901);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp901);
                this.Manager.Comment("reaching state \'S539\'");
                int temp904 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker3)));
                if ((temp904 == 0)) {
                    this.Manager.Comment("reaching state \'S888\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp902;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,1,Valid)\'");
                    temp902 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1458\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp902, "return of NetrLogonControl2Ex, state S1458");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label257;
                }
                if ((temp904 == 1)) {
                    this.Manager.Comment("reaching state \'S889\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp903;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,1,Valid)\'");
                    temp903 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1459\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp903, "return of NetrLogonControl2Ex, state S1459");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label257;
                }
                throw new InvalidOperationException("never reached");
            label257:
;
                goto label259;
            }
            if ((temp909 == 2)) {
                this.Manager.Comment("reaching state \'S255\'");
                bool temp905;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp905);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp905);
                this.Manager.Comment("reaching state \'S540\'");
                int temp908 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker5)));
                if ((temp908 == 0)) {
                    this.Manager.Comment("reaching state \'S890\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp906;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp906 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1460\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp906, "return of NetrLogonControl2Ex, state S1460");
                    this.Manager.Comment("reaching state \'S1946\'");
                    goto label258;
                }
                if ((temp908 == 1)) {
                    this.Manager.Comment("reaching state \'S891\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp907;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp907 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1461\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp907, "return of NetrLogonControl2Ex, state S1461");
                    this.Manager.Comment("reaching state \'S1947\'");
                    goto label258;
                }
                throw new InvalidOperationException("never reached");
            label258:
;
                goto label259;
            }
            throw new InvalidOperationException("never reached");
        label259:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S538");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S538");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S539");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S539");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S540");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS42GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S540");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44");
            this.Manager.Comment("reaching state \'S44\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp910;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp910);
            this.Manager.AddReturn(GetPlatformInfo, null, temp910);
            this.Manager.Comment("reaching state \'S45\'");
            int temp923 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetPlatformChecker2)));
            if ((temp923 == 0)) {
                this.Manager.Comment("reaching state \'S256\'");
                bool temp911;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp911);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp911);
                this.Manager.Comment("reaching state \'S541\'");
                int temp914 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker1)));
                if ((temp914 == 0)) {
                    this.Manager.Comment("reaching state \'S892\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp912;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,4,Valid)\'");
                    temp912 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1462\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp912, "return of NetrLogonControl2Ex, state S1462");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label260;
                }
                if ((temp914 == 1)) {
                    this.Manager.Comment("reaching state \'S893\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp913;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,1,Valid)\'");
                    temp913 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1463\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp913, "return of NetrLogonControl2Ex, state S1463");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label260;
                }
                throw new InvalidOperationException("never reached");
            label260:
;
                goto label263;
            }
            if ((temp923 == 1)) {
                this.Manager.Comment("reaching state \'S257\'");
                bool temp915;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp915);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp915);
                this.Manager.Comment("reaching state \'S542\'");
                int temp918 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker3)));
                if ((temp918 == 0)) {
                    this.Manager.Comment("reaching state \'S894\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp916;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,2,Valid)\'");
                    temp916 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1464\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp916, "return of NetrLogonControl2Ex, state S1464");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label261;
                }
                if ((temp918 == 1)) {
                    this.Manager.Comment("reaching state \'S895\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp917;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,2,Valid)\'");
                    temp917 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1465\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp917, "return of NetrLogonControl2Ex, state S1465");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label261;
                }
                throw new InvalidOperationException("never reached");
            label261:
;
                goto label263;
            }
            if ((temp923 == 2)) {
                this.Manager.Comment("reaching state \'S258\'");
                bool temp919;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp919);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp919);
                this.Manager.Comment("reaching state \'S543\'");
                int temp922 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker5)));
                if ((temp922 == 0)) {
                    this.Manager.Comment("reaching state \'S896\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp920;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp920 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1466\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp920, "return of NetrLogonControl2Ex, state S1466");
                    this.Manager.Comment("reaching state \'S1948\'");
                    goto label262;
                }
                if ((temp922 == 1)) {
                    this.Manager.Comment("reaching state \'S897\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp921;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp921 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1467\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp921, "return of NetrLogonControl2Ex, state S1467");
                    this.Manager.Comment("reaching state \'S1949\'");
                    goto label262;
                }
                throw new InvalidOperationException("never reached");
            label262:
;
                goto label263;
            }
            throw new InvalidOperationException("never reached");
        label263:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S541");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S541");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S542");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S542");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S543");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS44GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S543");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46");
            this.Manager.Comment("reaching state \'S46\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp924;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp924);
            this.Manager.AddReturn(GetPlatformInfo, null, temp924);
            this.Manager.Comment("reaching state \'S47\'");
            int temp937 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetPlatformChecker2)));
            if ((temp937 == 0)) {
                this.Manager.Comment("reaching state \'S259\'");
                bool temp925;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp925);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp925);
                this.Manager.Comment("reaching state \'S544\'");
                int temp928 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker1)));
                if ((temp928 == 0)) {
                    this.Manager.Comment("reaching state \'S898\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp926;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,4,Valid)\'");
                    temp926 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1468\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp926, "return of NetrLogonControl2Ex, state S1468");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label264;
                }
                if ((temp928 == 1)) {
                    this.Manager.Comment("reaching state \'S899\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp927;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,1,Valid)\'");
                    temp927 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1469\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp927, "return of NetrLogonControl2Ex, state S1469");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label264;
                }
                throw new InvalidOperationException("never reached");
            label264:
;
                goto label267;
            }
            if ((temp937 == 1)) {
                this.Manager.Comment("reaching state \'S260\'");
                bool temp929;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp929);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp929);
                this.Manager.Comment("reaching state \'S545\'");
                int temp932 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker3)));
                if ((temp932 == 0)) {
                    this.Manager.Comment("reaching state \'S900\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp930;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,2,Valid)\'");
                    temp930 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1470\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp930, "return of NetrLogonControl2Ex, state S1470");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label265;
                }
                if ((temp932 == 1)) {
                    this.Manager.Comment("reaching state \'S901\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp931;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,2,Valid)\'");
                    temp931 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1471\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp931, "return of NetrLogonControl2Ex, state S1471");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label265;
                }
                throw new InvalidOperationException("never reached");
            label265:
;
                goto label267;
            }
            if ((temp937 == 2)) {
                this.Manager.Comment("reaching state \'S261\'");
                bool temp933;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp933);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp933);
                this.Manager.Comment("reaching state \'S546\'");
                int temp936 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker5)));
                if ((temp936 == 0)) {
                    this.Manager.Comment("reaching state \'S902\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp934;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp934 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1472\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp934, "return of NetrLogonControl2Ex, state S1472");
                    this.Manager.Comment("reaching state \'S1950\'");
                    goto label266;
                }
                if ((temp936 == 1)) {
                    this.Manager.Comment("reaching state \'S903\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp935;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp935 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1473\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp935, "return of NetrLogonControl2Ex, state S1473");
                    this.Manager.Comment("reaching state \'S1951\'");
                    goto label266;
                }
                throw new InvalidOperationException("never reached");
            label266:
;
                goto label267;
            }
            throw new InvalidOperationException("never reached");
        label267:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S544");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S544");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S545");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S545");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S546");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS46GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S546");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp938;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp938);
            this.Manager.AddReturn(GetPlatformInfo, null, temp938);
            this.Manager.Comment("reaching state \'S49\'");
            int temp951 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetPlatformChecker2)));
            if ((temp951 == 0)) {
                this.Manager.Comment("reaching state \'S262\'");
                bool temp939;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp939);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp939);
                this.Manager.Comment("reaching state \'S547\'");
                int temp942 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker1)));
                if ((temp942 == 0)) {
                    this.Manager.Comment("reaching state \'S904\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp940;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,4,Valid)\'");
                    temp940 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103931");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1474\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp940, "return of NetrLogonControl2Ex, state S1474");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label268;
                }
                if ((temp942 == 1)) {
                    this.Manager.Comment("reaching state \'S905\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp941;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,1,Valid)\'");
                    temp941 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1475\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp941, "return of NetrLogonControl2Ex, state S1475");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label268;
                }
                throw new InvalidOperationException("never reached");
            label268:
;
                goto label271;
            }
            if ((temp951 == 1)) {
                this.Manager.Comment("reaching state \'S263\'");
                bool temp943;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp943);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp943);
                this.Manager.Comment("reaching state \'S548\'");
                int temp946 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker3)));
                if ((temp946 == 0)) {
                    this.Manager.Comment("reaching state \'S906\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp944;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,2,Valid)\'");
                    temp944 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1476\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp944, "return of NetrLogonControl2Ex, state S1476");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label269;
                }
                if ((temp946 == 1)) {
                    this.Manager.Comment("reaching state \'S907\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp945;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,2,Valid)\'");
                    temp945 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1477\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp945, "return of NetrLogonControl2Ex, state S1477");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label269;
                }
                throw new InvalidOperationException("never reached");
            label269:
;
                goto label271;
            }
            if ((temp951 == 2)) {
                this.Manager.Comment("reaching state \'S264\'");
                bool temp947;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp947);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp947);
                this.Manager.Comment("reaching state \'S549\'");
                int temp950 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker5)));
                if ((temp950 == 0)) {
                    this.Manager.Comment("reaching state \'S908\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp948;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp948 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1478\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp948, "return of NetrLogonControl2Ex, state S1478");
                    this.Manager.Comment("reaching state \'S1952\'");
                    goto label270;
                }
                if ((temp950 == 1)) {
                    this.Manager.Comment("reaching state \'S909\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp949;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp949 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1479\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp949, "return of NetrLogonControl2Ex, state S1479");
                    this.Manager.Comment("reaching state \'S1953\'");
                    goto label270;
                }
                throw new InvalidOperationException("never reached");
            label270:
;
                goto label271;
            }
            throw new InvalidOperationException("never reached");
        label271:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S547");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S547");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S548");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S548");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S549");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS48GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S549");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50");
            this.Manager.Comment("reaching state \'S50\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp952;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp952);
            this.Manager.AddReturn(GetPlatformInfo, null, temp952);
            this.Manager.Comment("reaching state \'S51\'");
            int temp965 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetPlatformChecker2)));
            if ((temp965 == 0)) {
                this.Manager.Comment("reaching state \'S265\'");
                bool temp953;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp953);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp953);
                this.Manager.Comment("reaching state \'S550\'");
                int temp956 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker1)));
                if ((temp956 == 0)) {
                    this.Manager.Comment("reaching state \'S910\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp954;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,4,Valid)\'");
                    temp954 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1480\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp954, "return of NetrLogonControl2Ex, state S1480");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label272;
                }
                if ((temp956 == 1)) {
                    this.Manager.Comment("reaching state \'S911\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp955;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,1,Valid)\'");
                    temp955 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1481\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp955, "return of NetrLogonControl2Ex, state S1481");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label272;
                }
                throw new InvalidOperationException("never reached");
            label272:
;
                goto label275;
            }
            if ((temp965 == 1)) {
                this.Manager.Comment("reaching state \'S266\'");
                bool temp957;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp957);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp957);
                this.Manager.Comment("reaching state \'S551\'");
                int temp960 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker3)));
                if ((temp960 == 0)) {
                    this.Manager.Comment("reaching state \'S912\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp958;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,2,Valid)\'");
                    temp958 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1482\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp958, "return of NetrLogonControl2Ex, state S1482");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label273;
                }
                if ((temp960 == 1)) {
                    this.Manager.Comment("reaching state \'S913\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp959;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,2,Valid)\'");
                    temp959 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1483\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp959, "return of NetrLogonControl2Ex, state S1483");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label273;
                }
                throw new InvalidOperationException("never reached");
            label273:
;
                goto label275;
            }
            if ((temp965 == 2)) {
                this.Manager.Comment("reaching state \'S267\'");
                bool temp961;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp961);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp961);
                this.Manager.Comment("reaching state \'S552\'");
                int temp964 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker5)));
                if ((temp964 == 0)) {
                    this.Manager.Comment("reaching state \'S914\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp962;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp962 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1484\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp962, "return of NetrLogonControl2Ex, state S1484");
                    this.Manager.Comment("reaching state \'S1954\'");
                    goto label274;
                }
                if ((temp964 == 1)) {
                    this.Manager.Comment("reaching state \'S915\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp963;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp963 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1485\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp963, "return of NetrLogonControl2Ex, state S1485");
                    this.Manager.Comment("reaching state \'S1955\'");
                    goto label274;
                }
                throw new InvalidOperationException("never reached");
            label274:
;
                goto label275;
            }
            throw new InvalidOperationException("never reached");
        label275:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S550");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S550");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S551");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S551");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S552");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS50GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S552");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp966;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp966);
            this.Manager.AddReturn(GetPlatformInfo, null, temp966);
            this.Manager.Comment("reaching state \'S53\'");
            int temp979 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetPlatformChecker2)));
            if ((temp979 == 0)) {
                this.Manager.Comment("reaching state \'S268\'");
                bool temp967;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp967);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp967);
                this.Manager.Comment("reaching state \'S553\'");
                int temp970 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker1)));
                if ((temp970 == 0)) {
                    this.Manager.Comment("reaching state \'S916\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp968;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,4,Valid)\'");
                    temp968 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1486\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp968, "return of NetrLogonControl2Ex, state S1486");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label276;
                }
                if ((temp970 == 1)) {
                    this.Manager.Comment("reaching state \'S917\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp969;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,4,Valid)\'");
                    temp969 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1487\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp969, "return of NetrLogonControl2Ex, state S1487");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label276;
                }
                throw new InvalidOperationException("never reached");
            label276:
;
                goto label279;
            }
            if ((temp979 == 1)) {
                this.Manager.Comment("reaching state \'S269\'");
                bool temp971;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp971);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp971);
                this.Manager.Comment("reaching state \'S554\'");
                int temp974 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker3)));
                if ((temp974 == 0)) {
                    this.Manager.Comment("reaching state \'S918\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp972;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,2,Valid)\'");
                    temp972 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1488\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp972, "return of NetrLogonControl2Ex, state S1488");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label277;
                }
                if ((temp974 == 1)) {
                    this.Manager.Comment("reaching state \'S919\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp973;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,2,Valid)\'");
                    temp973 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1489\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp973, "return of NetrLogonControl2Ex, state S1489");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label277;
                }
                throw new InvalidOperationException("never reached");
            label277:
;
                goto label279;
            }
            if ((temp979 == 2)) {
                this.Manager.Comment("reaching state \'S270\'");
                bool temp975;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp975);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp975);
                this.Manager.Comment("reaching state \'S555\'");
                int temp978 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker5)));
                if ((temp978 == 0)) {
                    this.Manager.Comment("reaching state \'S920\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp976;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp976 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1490\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp976, "return of NetrLogonControl2Ex, state S1490");
                    this.Manager.Comment("reaching state \'S1956\'");
                    goto label278;
                }
                if ((temp978 == 1)) {
                    this.Manager.Comment("reaching state \'S921\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp977;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp977 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1491\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp977, "return of NetrLogonControl2Ex, state S1491");
                    this.Manager.Comment("reaching state \'S1957\'");
                    goto label278;
                }
                throw new InvalidOperationException("never reached");
            label278:
;
                goto label279;
            }
            throw new InvalidOperationException("never reached");
        label279:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S553");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S553");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S554");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S554");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S555");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS52GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S555");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp980;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp980);
            this.Manager.AddReturn(GetPlatformInfo, null, temp980);
            this.Manager.Comment("reaching state \'S55\'");
            int temp993 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetPlatformChecker2)));
            if ((temp993 == 0)) {
                this.Manager.Comment("reaching state \'S271\'");
                bool temp981;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp981);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp981);
                this.Manager.Comment("reaching state \'S556\'");
                int temp984 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker1)));
                if ((temp984 == 0)) {
                    this.Manager.Comment("reaching state \'S922\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp982;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,4,Valid)\'");
                    temp982 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1492\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp982, "return of NetrLogonControl2Ex, state S1492");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label280;
                }
                if ((temp984 == 1)) {
                    this.Manager.Comment("reaching state \'S923\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp983;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,4,Valid)\'");
                    temp983 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1493\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp983, "return of NetrLogonControl2Ex, state S1493");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label280;
                }
                throw new InvalidOperationException("never reached");
            label280:
;
                goto label283;
            }
            if ((temp993 == 1)) {
                this.Manager.Comment("reaching state \'S272\'");
                bool temp985;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp985);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp985);
                this.Manager.Comment("reaching state \'S557\'");
                int temp988 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker3)));
                if ((temp988 == 0)) {
                    this.Manager.Comment("reaching state \'S924\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp986;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,2,Valid)\'");
                    temp986 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1494\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp986, "return of NetrLogonControl2Ex, state S1494");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label281;
                }
                if ((temp988 == 1)) {
                    this.Manager.Comment("reaching state \'S925\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp987;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,2,Valid)\'");
                    temp987 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1495\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp987, "return of NetrLogonControl2Ex, state S1495");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label281;
                }
                throw new InvalidOperationException("never reached");
            label281:
;
                goto label283;
            }
            if ((temp993 == 2)) {
                this.Manager.Comment("reaching state \'S273\'");
                bool temp989;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp989);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp989);
                this.Manager.Comment("reaching state \'S558\'");
                int temp992 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker5)));
                if ((temp992 == 0)) {
                    this.Manager.Comment("reaching state \'S926\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp990;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp990 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1496\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp990, "return of NetrLogonControl2Ex, state S1496");
                    this.Manager.Comment("reaching state \'S1958\'");
                    goto label282;
                }
                if ((temp992 == 1)) {
                    this.Manager.Comment("reaching state \'S927\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp991;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp991 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1497\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp991, "return of NetrLogonControl2Ex, state S1497");
                    this.Manager.Comment("reaching state \'S1959\'");
                    goto label282;
                }
                throw new InvalidOperationException("never reached");
            label282:
;
                goto label283;
            }
            throw new InvalidOperationException("never reached");
        label283:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S556");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S556");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S557");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S557");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S558");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS54GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S558");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp994;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp994);
            this.Manager.AddReturn(GetPlatformInfo, null, temp994);
            this.Manager.Comment("reaching state \'S57\'");
            int temp1007 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetPlatformChecker2)));
            if ((temp1007 == 0)) {
                this.Manager.Comment("reaching state \'S274\'");
                bool temp995;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp995);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp995);
                this.Manager.Comment("reaching state \'S559\'");
                int temp998 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker1)));
                if ((temp998 == 0)) {
                    this.Manager.Comment("reaching state \'S928\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp996;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,4,Valid)\'");
                    temp996 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1498\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp996, "return of NetrLogonControl2Ex, state S1498");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label284;
                }
                if ((temp998 == 1)) {
                    this.Manager.Comment("reaching state \'S929\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp997;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,4,Valid)\'");
                    temp997 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1499\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp997, "return of NetrLogonControl2Ex, state S1499");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label284;
                }
                throw new InvalidOperationException("never reached");
            label284:
;
                goto label287;
            }
            if ((temp1007 == 1)) {
                this.Manager.Comment("reaching state \'S275\'");
                bool temp999;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp999);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp999);
                this.Manager.Comment("reaching state \'S560\'");
                int temp1002 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker3)));
                if ((temp1002 == 0)) {
                    this.Manager.Comment("reaching state \'S930\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1000;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,2,Valid)\'");
                    temp1000 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1500\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1000, "return of NetrLogonControl2Ex, state S1500");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label285;
                }
                if ((temp1002 == 1)) {
                    this.Manager.Comment("reaching state \'S931\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1001;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,2,Valid)\'");
                    temp1001 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1501\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1001, "return of NetrLogonControl2Ex, state S1501");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label285;
                }
                throw new InvalidOperationException("never reached");
            label285:
;
                goto label287;
            }
            if ((temp1007 == 2)) {
                this.Manager.Comment("reaching state \'S276\'");
                bool temp1003;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1003);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1003);
                this.Manager.Comment("reaching state \'S561\'");
                int temp1006 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker5)));
                if ((temp1006 == 0)) {
                    this.Manager.Comment("reaching state \'S932\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1004;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1004 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1502\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1004, "return of NetrLogonControl2Ex, state S1502");
                    this.Manager.Comment("reaching state \'S1960\'");
                    goto label286;
                }
                if ((temp1006 == 1)) {
                    this.Manager.Comment("reaching state \'S933\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1005;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1005 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1503\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1005, "return of NetrLogonControl2Ex, state S1503");
                    this.Manager.Comment("reaching state \'S1961\'");
                    goto label286;
                }
                throw new InvalidOperationException("never reached");
            label286:
;
                goto label287;
            }
            throw new InvalidOperationException("never reached");
        label287:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S559");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S559");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S560");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S560");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S561");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS56GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S561");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1008;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1008);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1008);
            this.Manager.Comment("reaching state \'S59\'");
            int temp1021 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetPlatformChecker2)));
            if ((temp1021 == 0)) {
                this.Manager.Comment("reaching state \'S277\'");
                bool temp1009;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1009);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1009);
                this.Manager.Comment("reaching state \'S562\'");
                int temp1012 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker1)));
                if ((temp1012 == 0)) {
                    this.Manager.Comment("reaching state \'S934\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1010;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,4,Valid)\'");
                    temp1010 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1504\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1010, "return of NetrLogonControl2Ex, state S1504");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label288;
                }
                if ((temp1012 == 1)) {
                    this.Manager.Comment("reaching state \'S935\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1011;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1011 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1505\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1011, "return of NetrLogonControl2Ex, state S1505");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label288;
                }
                throw new InvalidOperationException("never reached");
            label288:
;
                goto label291;
            }
            if ((temp1021 == 1)) {
                this.Manager.Comment("reaching state \'S278\'");
                bool temp1013;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1013);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1013);
                this.Manager.Comment("reaching state \'S563\'");
                int temp1016 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker3)));
                if ((temp1016 == 0)) {
                    this.Manager.Comment("reaching state \'S936\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1014;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,2,Valid)\'");
                    temp1014 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1506\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1014, "return of NetrLogonControl2Ex, state S1506");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label289;
                }
                if ((temp1016 == 1)) {
                    this.Manager.Comment("reaching state \'S937\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1015;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,2,Valid)\'");
                    temp1015 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1507\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1015, "return of NetrLogonControl2Ex, state S1507");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label289;
                }
                throw new InvalidOperationException("never reached");
            label289:
;
                goto label291;
            }
            if ((temp1021 == 2)) {
                this.Manager.Comment("reaching state \'S279\'");
                bool temp1017;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1017);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1017);
                this.Manager.Comment("reaching state \'S564\'");
                int temp1020 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker5)));
                if ((temp1020 == 0)) {
                    this.Manager.Comment("reaching state \'S938\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1018;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1018 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1508\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1018, "return of NetrLogonControl2Ex, state S1508");
                    this.Manager.Comment("reaching state \'S1962\'");
                    goto label290;
                }
                if ((temp1020 == 1)) {
                    this.Manager.Comment("reaching state \'S939\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1019;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1019 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1509\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1019, "return of NetrLogonControl2Ex, state S1509");
                    this.Manager.Comment("reaching state \'S1963\'");
                    goto label290;
                }
                throw new InvalidOperationException("never reached");
            label290:
;
                goto label291;
            }
            throw new InvalidOperationException("never reached");
        label291:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S562");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S562");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S563");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S563");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S564");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS58GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S564");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6");
            this.Manager.Comment("reaching state \'S6\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1022;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1022);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1022);
            this.Manager.Comment("reaching state \'S7\'");
            int temp1035 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetPlatformChecker2)));
            if ((temp1035 == 0)) {
                this.Manager.Comment("reaching state \'S199\'");
                bool temp1023;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1023);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1023);
                this.Manager.Comment("reaching state \'S484\'");
                int temp1026 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker1)));
                if ((temp1026 == 0)) {
                    this.Manager.Comment("reaching state \'S778\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1024;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,3,Valid)\'");
                    temp1024 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1348\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1024, "return of NetrLogonControl2Ex, state S1348");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label292;
                }
                if ((temp1026 == 1)) {
                    this.Manager.Comment("reaching state \'S779\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1025;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,2,Valid)\'");
                    temp1025 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1349\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1025, "return of NetrLogonControl2Ex, state S1349");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label292;
                }
                throw new InvalidOperationException("never reached");
            label292:
;
                goto label295;
            }
            if ((temp1035 == 1)) {
                this.Manager.Comment("reaching state \'S200\'");
                bool temp1027;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1027);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1027);
                this.Manager.Comment("reaching state \'S485\'");
                int temp1030 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker3)));
                if ((temp1030 == 0)) {
                    this.Manager.Comment("reaching state \'S780\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1028;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,4,Valid)\'");
                    temp1028 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1350\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1028, "return of NetrLogonControl2Ex, state S1350");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label293;
                }
                if ((temp1030 == 1)) {
                    this.Manager.Comment("reaching state \'S781\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1029;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,4,Valid)\'");
                    temp1029 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1351\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1029, "return of NetrLogonControl2Ex, state S1351");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label293;
                }
                throw new InvalidOperationException("never reached");
            label293:
;
                goto label295;
            }
            if ((temp1035 == 2)) {
                this.Manager.Comment("reaching state \'S201\'");
                bool temp1031;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1031);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1031);
                this.Manager.Comment("reaching state \'S486\'");
                int temp1034 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker5)));
                if ((temp1034 == 0)) {
                    this.Manager.Comment("reaching state \'S782\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1032;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1032 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1352\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1032, "return of NetrLogonControl2Ex, state S1352");
                    this.Manager.Comment("reaching state \'S1910\'");
                    goto label294;
                }
                if ((temp1034 == 1)) {
                    this.Manager.Comment("reaching state \'S783\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1033;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1033 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1353\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1033, "return of NetrLogonControl2Ex, state S1353");
                    this.Manager.Comment("reaching state \'S1911\'");
                    goto label294;
                }
                throw new InvalidOperationException("never reached");
            label294:
;
                goto label295;
            }
            throw new InvalidOperationException("never reached");
        label295:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S484");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S484");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S485");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S485");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S486");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS6GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S486");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60");
            this.Manager.Comment("reaching state \'S60\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1036;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1036);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1036);
            this.Manager.Comment("reaching state \'S61\'");
            int temp1049 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetPlatformChecker2)));
            if ((temp1049 == 0)) {
                this.Manager.Comment("reaching state \'S280\'");
                bool temp1037;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1037);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1037);
                this.Manager.Comment("reaching state \'S565\'");
                int temp1040 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker1)));
                if ((temp1040 == 0)) {
                    this.Manager.Comment("reaching state \'S940\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1038;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1038 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1510\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1038, "return of NetrLogonControl2Ex, state S1510");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label296;
                }
                if ((temp1040 == 1)) {
                    this.Manager.Comment("reaching state \'S941\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1039;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,4,Valid)\'");
                    temp1039 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1511\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1039, "return of NetrLogonControl2Ex, state S1511");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label296;
                }
                throw new InvalidOperationException("never reached");
            label296:
;
                goto label299;
            }
            if ((temp1049 == 1)) {
                this.Manager.Comment("reaching state \'S281\'");
                bool temp1041;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1041);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1041);
                this.Manager.Comment("reaching state \'S566\'");
                int temp1044 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker3)));
                if ((temp1044 == 0)) {
                    this.Manager.Comment("reaching state \'S942\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1042;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,2,Valid)\'");
                    temp1042 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1512\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1042, "return of NetrLogonControl2Ex, state S1512");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label297;
                }
                if ((temp1044 == 1)) {
                    this.Manager.Comment("reaching state \'S943\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1043;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,2,Valid)\'");
                    temp1043 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1513\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1043, "return of NetrLogonControl2Ex, state S1513");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label297;
                }
                throw new InvalidOperationException("never reached");
            label297:
;
                goto label299;
            }
            if ((temp1049 == 2)) {
                this.Manager.Comment("reaching state \'S282\'");
                bool temp1045;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1045);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1045);
                this.Manager.Comment("reaching state \'S567\'");
                int temp1048 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker5)));
                if ((temp1048 == 0)) {
                    this.Manager.Comment("reaching state \'S944\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1046;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1046 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1514\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1046, "return of NetrLogonControl2Ex, state S1514");
                    this.Manager.Comment("reaching state \'S1964\'");
                    goto label298;
                }
                if ((temp1048 == 1)) {
                    this.Manager.Comment("reaching state \'S945\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1047;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1047 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1515\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1047, "return of NetrLogonControl2Ex, state S1515");
                    this.Manager.Comment("reaching state \'S1965\'");
                    goto label298;
                }
                throw new InvalidOperationException("never reached");
            label298:
;
                goto label299;
            }
            throw new InvalidOperationException("never reached");
        label299:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S565");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S565");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S566");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S566");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S567");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS60GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S567");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1050;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1050);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1050);
            this.Manager.Comment("reaching state \'S63\'");
            int temp1063 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetPlatformChecker2)));
            if ((temp1063 == 0)) {
                this.Manager.Comment("reaching state \'S283\'");
                bool temp1051;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1051);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1051);
                this.Manager.Comment("reaching state \'S568\'");
                int temp1054 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker1)));
                if ((temp1054 == 0)) {
                    this.Manager.Comment("reaching state \'S946\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1052;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,3,Valid)\'");
                    temp1052 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1516\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1052, "return of NetrLogonControl2Ex, state S1516");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label300;
                }
                if ((temp1054 == 1)) {
                    this.Manager.Comment("reaching state \'S947\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1053;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,4,Valid)\'");
                    temp1053 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1517\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1053, "return of NetrLogonControl2Ex, state S1517");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label300;
                }
                throw new InvalidOperationException("never reached");
            label300:
;
                goto label303;
            }
            if ((temp1063 == 1)) {
                this.Manager.Comment("reaching state \'S284\'");
                bool temp1055;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1055);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1055);
                this.Manager.Comment("reaching state \'S569\'");
                int temp1058 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker3)));
                if ((temp1058 == 0)) {
                    this.Manager.Comment("reaching state \'S948\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1056;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,2,Valid)\'");
                    temp1056 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1518\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1056, "return of NetrLogonControl2Ex, state S1518");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label301;
                }
                if ((temp1058 == 1)) {
                    this.Manager.Comment("reaching state \'S949\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1057;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,2,Valid)\'");
                    temp1057 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1519\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1057, "return of NetrLogonControl2Ex, state S1519");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label301;
                }
                throw new InvalidOperationException("never reached");
            label301:
;
                goto label303;
            }
            if ((temp1063 == 2)) {
                this.Manager.Comment("reaching state \'S285\'");
                bool temp1059;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1059);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1059);
                this.Manager.Comment("reaching state \'S570\'");
                int temp1062 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker5)));
                if ((temp1062 == 0)) {
                    this.Manager.Comment("reaching state \'S950\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1060;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1060 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1520\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1060, "return of NetrLogonControl2Ex, state S1520");
                    this.Manager.Comment("reaching state \'S1966\'");
                    goto label302;
                }
                if ((temp1062 == 1)) {
                    this.Manager.Comment("reaching state \'S951\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1061;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1061 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1521\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1061, "return of NetrLogonControl2Ex, state S1521");
                    this.Manager.Comment("reaching state \'S1967\'");
                    goto label302;
                }
                throw new InvalidOperationException("never reached");
            label302:
;
                goto label303;
            }
            throw new InvalidOperationException("never reached");
        label303:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S568");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S568");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S569");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S569");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S570");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS62GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S570");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1064;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1064);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1064);
            this.Manager.Comment("reaching state \'S65\'");
            int temp1077 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetPlatformChecker2)));
            if ((temp1077 == 0)) {
                this.Manager.Comment("reaching state \'S286\'");
                bool temp1065;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1065);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1065);
                this.Manager.Comment("reaching state \'S571\'");
                int temp1068 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker1)));
                if ((temp1068 == 0)) {
                    this.Manager.Comment("reaching state \'S952\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1066;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,2,Valid)\'");
                    temp1066 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1522\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1066, "return of NetrLogonControl2Ex, state S1522");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label304;
                }
                if ((temp1068 == 1)) {
                    this.Manager.Comment("reaching state \'S953\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1067;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,4,Valid)\'");
                    temp1067 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1523\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1067, "return of NetrLogonControl2Ex, state S1523");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label304;
                }
                throw new InvalidOperationException("never reached");
            label304:
;
                goto label307;
            }
            if ((temp1077 == 1)) {
                this.Manager.Comment("reaching state \'S287\'");
                bool temp1069;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1069);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1069);
                this.Manager.Comment("reaching state \'S572\'");
                int temp1072 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker3)));
                if ((temp1072 == 0)) {
                    this.Manager.Comment("reaching state \'S954\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1070;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,2,Valid)\'");
                    temp1070 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1524\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1070, "return of NetrLogonControl2Ex, state S1524");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label305;
                }
                if ((temp1072 == 1)) {
                    this.Manager.Comment("reaching state \'S955\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1071;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,2,Valid)\'");
                    temp1071 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103981");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1525\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1071, "return of NetrLogonControl2Ex, state S1525");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label305;
                }
                throw new InvalidOperationException("never reached");
            label305:
;
                goto label307;
            }
            if ((temp1077 == 2)) {
                this.Manager.Comment("reaching state \'S288\'");
                bool temp1073;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1073);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1073);
                this.Manager.Comment("reaching state \'S573\'");
                int temp1076 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker5)));
                if ((temp1076 == 0)) {
                    this.Manager.Comment("reaching state \'S956\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1074;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1074 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1526\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1074, "return of NetrLogonControl2Ex, state S1526");
                    this.Manager.Comment("reaching state \'S1968\'");
                    goto label306;
                }
                if ((temp1076 == 1)) {
                    this.Manager.Comment("reaching state \'S957\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1075;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1075 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1527\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1075, "return of NetrLogonControl2Ex, state S1527");
                    this.Manager.Comment("reaching state \'S1969\'");
                    goto label306;
                }
                throw new InvalidOperationException("never reached");
            label306:
;
                goto label307;
            }
            throw new InvalidOperationException("never reached");
        label307:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S571");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S571");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S572");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S572");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S573");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS64GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S573");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1078;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1078);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1078);
            this.Manager.Comment("reaching state \'S67\'");
            int temp1091 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetPlatformChecker2)));
            if ((temp1091 == 0)) {
                this.Manager.Comment("reaching state \'S289\'");
                bool temp1079;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1079);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1079);
                this.Manager.Comment("reaching state \'S574\'");
                int temp1082 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker1)));
                if ((temp1082 == 0)) {
                    this.Manager.Comment("reaching state \'S958\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1080;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,1,Valid)\'");
                    temp1080 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1528\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1080, "return of NetrLogonControl2Ex, state S1528");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label308;
                }
                if ((temp1082 == 1)) {
                    this.Manager.Comment("reaching state \'S959\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1081;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,4,Valid)\'");
                    temp1081 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1529\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1081, "return of NetrLogonControl2Ex, state S1529");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label308;
                }
                throw new InvalidOperationException("never reached");
            label308:
;
                goto label311;
            }
            if ((temp1091 == 1)) {
                this.Manager.Comment("reaching state \'S290\'");
                bool temp1083;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1083);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1083);
                this.Manager.Comment("reaching state \'S575\'");
                int temp1086 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker3)));
                if ((temp1086 == 0)) {
                    this.Manager.Comment("reaching state \'S960\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1084;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,3,Valid)\'");
                    temp1084 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1530\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1084, "return of NetrLogonControl2Ex, state S1530");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label309;
                }
                if ((temp1086 == 1)) {
                    this.Manager.Comment("reaching state \'S961\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1085;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,3,Valid)\'");
                    temp1085 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1531\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1085, "return of NetrLogonControl2Ex, state S1531");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label309;
                }
                throw new InvalidOperationException("never reached");
            label309:
;
                goto label311;
            }
            if ((temp1091 == 2)) {
                this.Manager.Comment("reaching state \'S291\'");
                bool temp1087;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1087);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1087);
                this.Manager.Comment("reaching state \'S576\'");
                int temp1090 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker5)));
                if ((temp1090 == 0)) {
                    this.Manager.Comment("reaching state \'S962\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1088;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1088 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1532\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1088, "return of NetrLogonControl2Ex, state S1532");
                    this.Manager.Comment("reaching state \'S1970\'");
                    goto label310;
                }
                if ((temp1090 == 1)) {
                    this.Manager.Comment("reaching state \'S963\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1089;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1089 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1533\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1089, "return of NetrLogonControl2Ex, state S1533");
                    this.Manager.Comment("reaching state \'S1971\'");
                    goto label310;
                }
                throw new InvalidOperationException("never reached");
            label310:
;
                goto label311;
            }
            throw new InvalidOperationException("never reached");
        label311:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S574");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S574");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S575");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S575");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S576");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS66GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S576");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1092;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1092);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1092);
            this.Manager.Comment("reaching state \'S69\'");
            int temp1105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetPlatformChecker2)));
            if ((temp1105 == 0)) {
                this.Manager.Comment("reaching state \'S292\'");
                bool temp1093;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1093);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1093);
                this.Manager.Comment("reaching state \'S577\'");
                int temp1096 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker1)));
                if ((temp1096 == 0)) {
                    this.Manager.Comment("reaching state \'S964\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1094;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,1,Valid)\'");
                    temp1094 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1534\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1094, "return of NetrLogonControl2Ex, state S1534");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label312;
                }
                if ((temp1096 == 1)) {
                    this.Manager.Comment("reaching state \'S965\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1095;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,4,Valid)\'");
                    temp1095 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1535\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1095, "return of NetrLogonControl2Ex, state S1535");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label312;
                }
                throw new InvalidOperationException("never reached");
            label312:
;
                goto label315;
            }
            if ((temp1105 == 1)) {
                this.Manager.Comment("reaching state \'S293\'");
                bool temp1097;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1097);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1097);
                this.Manager.Comment("reaching state \'S578\'");
                int temp1100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker3)));
                if ((temp1100 == 0)) {
                    this.Manager.Comment("reaching state \'S966\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1098;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,1,Valid)\'");
                    temp1098 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1536\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1098, "return of NetrLogonControl2Ex, state S1536");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label313;
                }
                if ((temp1100 == 1)) {
                    this.Manager.Comment("reaching state \'S967\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1099;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,1,Valid)\'");
                    temp1099 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1537\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1099, "return of NetrLogonControl2Ex, state S1537");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label313;
                }
                throw new InvalidOperationException("never reached");
            label313:
;
                goto label315;
            }
            if ((temp1105 == 2)) {
                this.Manager.Comment("reaching state \'S294\'");
                bool temp1101;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1101);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1101);
                this.Manager.Comment("reaching state \'S579\'");
                int temp1104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker5)));
                if ((temp1104 == 0)) {
                    this.Manager.Comment("reaching state \'S968\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1102;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1102 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1538\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1102, "return of NetrLogonControl2Ex, state S1538");
                    this.Manager.Comment("reaching state \'S1972\'");
                    goto label314;
                }
                if ((temp1104 == 1)) {
                    this.Manager.Comment("reaching state \'S969\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1103;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1103 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1539\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1103, "return of NetrLogonControl2Ex, state S1539");
                    this.Manager.Comment("reaching state \'S1973\'");
                    goto label314;
                }
                throw new InvalidOperationException("never reached");
            label314:
;
                goto label315;
            }
            throw new InvalidOperationException("never reached");
        label315:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S577");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S577");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S578");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S578");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S579");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS68GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S579");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1106;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1106);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1106);
            this.Manager.Comment("reaching state \'S71\'");
            int temp1119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetPlatformChecker2)));
            if ((temp1119 == 0)) {
                this.Manager.Comment("reaching state \'S295\'");
                bool temp1107;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1107);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1107);
                this.Manager.Comment("reaching state \'S580\'");
                int temp1110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker1)));
                if ((temp1110 == 0)) {
                    this.Manager.Comment("reaching state \'S970\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1108;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,1,Valid)\'");
                    temp1108 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1540\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1108, "return of NetrLogonControl2Ex, state S1540");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label316;
                }
                if ((temp1110 == 1)) {
                    this.Manager.Comment("reaching state \'S971\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1109;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,4,Valid)\'");
                    temp1109 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1541\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1109, "return of NetrLogonControl2Ex, state S1541");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label316;
                }
                throw new InvalidOperationException("never reached");
            label316:
;
                goto label319;
            }
            if ((temp1119 == 1)) {
                this.Manager.Comment("reaching state \'S296\'");
                bool temp1111;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1111);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1111);
                this.Manager.Comment("reaching state \'S581\'");
                int temp1114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker3)));
                if ((temp1114 == 0)) {
                    this.Manager.Comment("reaching state \'S972\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1112;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,1,Valid)\'");
                    temp1112 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1542\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1112, "return of NetrLogonControl2Ex, state S1542");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label317;
                }
                if ((temp1114 == 1)) {
                    this.Manager.Comment("reaching state \'S973\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1113;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,1,Valid)\'");
                    temp1113 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1543\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1113, "return of NetrLogonControl2Ex, state S1543");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label317;
                }
                throw new InvalidOperationException("never reached");
            label317:
;
                goto label319;
            }
            if ((temp1119 == 2)) {
                this.Manager.Comment("reaching state \'S297\'");
                bool temp1115;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1115);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1115);
                this.Manager.Comment("reaching state \'S582\'");
                int temp1118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker5)));
                if ((temp1118 == 0)) {
                    this.Manager.Comment("reaching state \'S974\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1116;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1116 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1544\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1116, "return of NetrLogonControl2Ex, state S1544");
                    this.Manager.Comment("reaching state \'S1974\'");
                    goto label318;
                }
                if ((temp1118 == 1)) {
                    this.Manager.Comment("reaching state \'S975\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1117;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1117 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1545\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1117, "return of NetrLogonControl2Ex, state S1545");
                    this.Manager.Comment("reaching state \'S1975\'");
                    goto label318;
                }
                throw new InvalidOperationException("never reached");
            label318:
;
                goto label319;
            }
            throw new InvalidOperationException("never reached");
        label319:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S580");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S580");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S581");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S581");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S582");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS70GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S582");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1120;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1120);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1120);
            this.Manager.Comment("reaching state \'S73\'");
            int temp1133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetPlatformChecker2)));
            if ((temp1133 == 0)) {
                this.Manager.Comment("reaching state \'S298\'");
                bool temp1121;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1121);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1121);
                this.Manager.Comment("reaching state \'S583\'");
                int temp1124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker1)));
                if ((temp1124 == 0)) {
                    this.Manager.Comment("reaching state \'S976\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1122;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,1,Valid)\'");
                    temp1122 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1546\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1122, "return of NetrLogonControl2Ex, state S1546");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label320;
                }
                if ((temp1124 == 1)) {
                    this.Manager.Comment("reaching state \'S977\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1123;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,4,Valid)\'");
                    temp1123 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103931");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1547\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1123, "return of NetrLogonControl2Ex, state S1547");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label320;
                }
                throw new InvalidOperationException("never reached");
            label320:
;
                goto label323;
            }
            if ((temp1133 == 1)) {
                this.Manager.Comment("reaching state \'S299\'");
                bool temp1125;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1125);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1125);
                this.Manager.Comment("reaching state \'S584\'");
                int temp1128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker3)));
                if ((temp1128 == 0)) {
                    this.Manager.Comment("reaching state \'S978\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1126;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,1,Valid)\'");
                    temp1126 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1548\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1126, "return of NetrLogonControl2Ex, state S1548");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label321;
                }
                if ((temp1128 == 1)) {
                    this.Manager.Comment("reaching state \'S979\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1127;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,1,Valid)\'");
                    temp1127 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1549\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1127, "return of NetrLogonControl2Ex, state S1549");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label321;
                }
                throw new InvalidOperationException("never reached");
            label321:
;
                goto label323;
            }
            if ((temp1133 == 2)) {
                this.Manager.Comment("reaching state \'S300\'");
                bool temp1129;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1129);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1129);
                this.Manager.Comment("reaching state \'S585\'");
                int temp1132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker5)));
                if ((temp1132 == 0)) {
                    this.Manager.Comment("reaching state \'S980\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1130;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1130 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1550\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1130, "return of NetrLogonControl2Ex, state S1550");
                    this.Manager.Comment("reaching state \'S1976\'");
                    goto label322;
                }
                if ((temp1132 == 1)) {
                    this.Manager.Comment("reaching state \'S981\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1131;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1131 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1551\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1131, "return of NetrLogonControl2Ex, state S1551");
                    this.Manager.Comment("reaching state \'S1977\'");
                    goto label322;
                }
                throw new InvalidOperationException("never reached");
            label322:
;
                goto label323;
            }
            throw new InvalidOperationException("never reached");
        label323:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S583");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S583");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S584");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S584");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S585");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS72GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S585");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1134;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1134);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1134);
            this.Manager.Comment("reaching state \'S75\'");
            int temp1147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetPlatformChecker2)));
            if ((temp1147 == 0)) {
                this.Manager.Comment("reaching state \'S301\'");
                bool temp1135;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1135);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1135);
                this.Manager.Comment("reaching state \'S586\'");
                int temp1138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker1)));
                if ((temp1138 == 0)) {
                    this.Manager.Comment("reaching state \'S982\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1136;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,1,Valid)\'");
                    temp1136 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1552\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1136, "return of NetrLogonControl2Ex, state S1552");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label324;
                }
                if ((temp1138 == 1)) {
                    this.Manager.Comment("reaching state \'S983\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1137;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,3,Valid)\'");
                    temp1137 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1553\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1137, "return of NetrLogonControl2Ex, state S1553");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label324;
                }
                throw new InvalidOperationException("never reached");
            label324:
;
                goto label327;
            }
            if ((temp1147 == 1)) {
                this.Manager.Comment("reaching state \'S302\'");
                bool temp1139;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1139);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1139);
                this.Manager.Comment("reaching state \'S587\'");
                int temp1142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker3)));
                if ((temp1142 == 0)) {
                    this.Manager.Comment("reaching state \'S984\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1140;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,1,Valid)\'");
                    temp1140 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1554\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1140, "return of NetrLogonControl2Ex, state S1554");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label325;
                }
                if ((temp1142 == 1)) {
                    this.Manager.Comment("reaching state \'S985\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1141;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,1,Valid)\'");
                    temp1141 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1555\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1141, "return of NetrLogonControl2Ex, state S1555");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label325;
                }
                throw new InvalidOperationException("never reached");
            label325:
;
                goto label327;
            }
            if ((temp1147 == 2)) {
                this.Manager.Comment("reaching state \'S303\'");
                bool temp1143;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1143);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1143);
                this.Manager.Comment("reaching state \'S588\'");
                int temp1146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker5)));
                if ((temp1146 == 0)) {
                    this.Manager.Comment("reaching state \'S986\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1144;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1144 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1556\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1144, "return of NetrLogonControl2Ex, state S1556");
                    this.Manager.Comment("reaching state \'S1978\'");
                    goto label326;
                }
                if ((temp1146 == 1)) {
                    this.Manager.Comment("reaching state \'S987\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1145;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1145 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1557\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1145, "return of NetrLogonControl2Ex, state S1557");
                    this.Manager.Comment("reaching state \'S1979\'");
                    goto label326;
                }
                throw new InvalidOperationException("never reached");
            label326:
;
                goto label327;
            }
            throw new InvalidOperationException("never reached");
        label327:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S586");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S586");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S587");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S587");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S588");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS74GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S588");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1148;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1148);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1148);
            this.Manager.Comment("reaching state \'S77\'");
            int temp1161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetPlatformChecker2)));
            if ((temp1161 == 0)) {
                this.Manager.Comment("reaching state \'S304\'");
                bool temp1149;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1149);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1149);
                this.Manager.Comment("reaching state \'S589\'");
                int temp1152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker1)));
                if ((temp1152 == 0)) {
                    this.Manager.Comment("reaching state \'S988\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1150;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,1,Valid)\'");
                    temp1150 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1558\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1150, "return of NetrLogonControl2Ex, state S1558");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label328;
                }
                if ((temp1152 == 1)) {
                    this.Manager.Comment("reaching state \'S989\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1151;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,3,Valid)\'");
                    temp1151 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1559\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1151, "return of NetrLogonControl2Ex, state S1559");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label328;
                }
                throw new InvalidOperationException("never reached");
            label328:
;
                goto label331;
            }
            if ((temp1161 == 1)) {
                this.Manager.Comment("reaching state \'S305\'");
                bool temp1153;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1153);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1153);
                this.Manager.Comment("reaching state \'S590\'");
                int temp1156 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker3)));
                if ((temp1156 == 0)) {
                    this.Manager.Comment("reaching state \'S990\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1154;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,1,Valid)\'");
                    temp1154 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1560\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1154, "return of NetrLogonControl2Ex, state S1560");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label329;
                }
                if ((temp1156 == 1)) {
                    this.Manager.Comment("reaching state \'S991\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1155;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,1,Valid)\'");
                    temp1155 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1561\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1155, "return of NetrLogonControl2Ex, state S1561");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label329;
                }
                throw new InvalidOperationException("never reached");
            label329:
;
                goto label331;
            }
            if ((temp1161 == 2)) {
                this.Manager.Comment("reaching state \'S306\'");
                bool temp1157;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1157);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1157);
                this.Manager.Comment("reaching state \'S591\'");
                int temp1160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker5)));
                if ((temp1160 == 0)) {
                    this.Manager.Comment("reaching state \'S992\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1158;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1158 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1562\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1158, "return of NetrLogonControl2Ex, state S1562");
                    this.Manager.Comment("reaching state \'S1980\'");
                    goto label330;
                }
                if ((temp1160 == 1)) {
                    this.Manager.Comment("reaching state \'S993\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1159;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1159 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1563\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1159, "return of NetrLogonControl2Ex, state S1563");
                    this.Manager.Comment("reaching state \'S1981\'");
                    goto label330;
                }
                throw new InvalidOperationException("never reached");
            label330:
;
                goto label331;
            }
            throw new InvalidOperationException("never reached");
        label331:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S589");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S589");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S590");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S590");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S591");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS76GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S591");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1162;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1162);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1162);
            this.Manager.Comment("reaching state \'S79\'");
            int temp1175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetPlatformChecker2)));
            if ((temp1175 == 0)) {
                this.Manager.Comment("reaching state \'S307\'");
                bool temp1163;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1163);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1163);
                this.Manager.Comment("reaching state \'S592\'");
                int temp1166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker1)));
                if ((temp1166 == 0)) {
                    this.Manager.Comment("reaching state \'S994\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1164;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,8,3,Valid)\'");
                    temp1164 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103929");
                    this.Manager.Checkpoint("MS-NRPC_R203983");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1564\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1164, "return of NetrLogonControl2Ex, state S1564");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label332;
                }
                if ((temp1166 == 1)) {
                    this.Manager.Comment("reaching state \'S995\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1165;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,3,Valid)\'");
                    temp1165 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1565\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1165, "return of NetrLogonControl2Ex, state S1565");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label332;
                }
                throw new InvalidOperationException("never reached");
            label332:
;
                goto label335;
            }
            if ((temp1175 == 1)) {
                this.Manager.Comment("reaching state \'S308\'");
                bool temp1167;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1167);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1167);
                this.Manager.Comment("reaching state \'S593\'");
                int temp1170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker3)));
                if ((temp1170 == 0)) {
                    this.Manager.Comment("reaching state \'S996\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1168;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,1,Valid)\'");
                    temp1168 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1566\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1168, "return of NetrLogonControl2Ex, state S1566");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label333;
                }
                if ((temp1170 == 1)) {
                    this.Manager.Comment("reaching state \'S997\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1169;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,1,Valid)\'");
                    temp1169 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1567\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1169, "return of NetrLogonControl2Ex, state S1567");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label333;
                }
                throw new InvalidOperationException("never reached");
            label333:
;
                goto label335;
            }
            if ((temp1175 == 2)) {
                this.Manager.Comment("reaching state \'S309\'");
                bool temp1171;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1171);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1171);
                this.Manager.Comment("reaching state \'S594\'");
                int temp1174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker5)));
                if ((temp1174 == 0)) {
                    this.Manager.Comment("reaching state \'S998\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1172;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1172 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1568\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1172, "return of NetrLogonControl2Ex, state S1568");
                    this.Manager.Comment("reaching state \'S1982\'");
                    goto label334;
                }
                if ((temp1174 == 1)) {
                    this.Manager.Comment("reaching state \'S999\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1173;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1173 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1569\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1173, "return of NetrLogonControl2Ex, state S1569");
                    this.Manager.Comment("reaching state \'S1983\'");
                    goto label334;
                }
                throw new InvalidOperationException("never reached");
            label334:
;
                goto label335;
            }
            throw new InvalidOperationException("never reached");
        label335:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S592");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S592");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S593");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S593");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S594");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS78GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S594");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8");
            this.Manager.Comment("reaching state \'S8\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1176;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1176);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1176);
            this.Manager.Comment("reaching state \'S9\'");
            int temp1189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetPlatformChecker2)));
            if ((temp1189 == 0)) {
                this.Manager.Comment("reaching state \'S202\'");
                bool temp1177;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1177);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1177);
                this.Manager.Comment("reaching state \'S487\'");
                int temp1180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker1)));
                if ((temp1180 == 0)) {
                    this.Manager.Comment("reaching state \'S784\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1178;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,3,Valid)\'");
                    temp1178 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1354\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1178, "return of NetrLogonControl2Ex, state S1354");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label336;
                }
                if ((temp1180 == 1)) {
                    this.Manager.Comment("reaching state \'S785\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1179;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,2,Valid)\'");
                    temp1179 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1355\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1179, "return of NetrLogonControl2Ex, state S1355");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label336;
                }
                throw new InvalidOperationException("never reached");
            label336:
;
                goto label339;
            }
            if ((temp1189 == 1)) {
                this.Manager.Comment("reaching state \'S203\'");
                bool temp1181;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1181);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1181);
                this.Manager.Comment("reaching state \'S488\'");
                int temp1184 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker3)));
                if ((temp1184 == 0)) {
                    this.Manager.Comment("reaching state \'S786\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1182;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,4,Valid)\'");
                    temp1182 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1356\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1182, "return of NetrLogonControl2Ex, state S1356");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label337;
                }
                if ((temp1184 == 1)) {
                    this.Manager.Comment("reaching state \'S787\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1183;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,4,Valid)\'");
                    temp1183 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1357\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1183, "return of NetrLogonControl2Ex, state S1357");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label337;
                }
                throw new InvalidOperationException("never reached");
            label337:
;
                goto label339;
            }
            if ((temp1189 == 2)) {
                this.Manager.Comment("reaching state \'S204\'");
                bool temp1185;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1185);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1185);
                this.Manager.Comment("reaching state \'S489\'");
                int temp1188 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker5)));
                if ((temp1188 == 0)) {
                    this.Manager.Comment("reaching state \'S788\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1186;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1186 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1358\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1186, "return of NetrLogonControl2Ex, state S1358");
                    this.Manager.Comment("reaching state \'S1912\'");
                    goto label338;
                }
                if ((temp1188 == 1)) {
                    this.Manager.Comment("reaching state \'S789\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1187;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1187 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1359\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1187, "return of NetrLogonControl2Ex, state S1359");
                    this.Manager.Comment("reaching state \'S1913\'");
                    goto label338;
                }
                throw new InvalidOperationException("never reached");
            label338:
;
                goto label339;
            }
            throw new InvalidOperationException("never reached");
        label339:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S487");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S487");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S488");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S488");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S489");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS8GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S489");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80");
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1190;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1190);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1190);
            this.Manager.Comment("reaching state \'S81\'");
            int temp1203 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetPlatformChecker2)));
            if ((temp1203 == 0)) {
                this.Manager.Comment("reaching state \'S310\'");
                bool temp1191;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1191);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1191);
                this.Manager.Comment("reaching state \'S595\'");
                int temp1194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker1)));
                if ((temp1194 == 0)) {
                    this.Manager.Comment("reaching state \'S1000\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1192;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,3,Valid)\'");
                    temp1192 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1570\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1192, "return of NetrLogonControl2Ex, state S1570");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label340;
                }
                if ((temp1194 == 1)) {
                    this.Manager.Comment("reaching state \'S1001\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1193;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,3,Valid)\'");
                    temp1193 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1571\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1193, "return of NetrLogonControl2Ex, state S1571");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label340;
                }
                throw new InvalidOperationException("never reached");
            label340:
;
                goto label343;
            }
            if ((temp1203 == 1)) {
                this.Manager.Comment("reaching state \'S311\'");
                bool temp1195;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1195);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1195);
                this.Manager.Comment("reaching state \'S596\'");
                int temp1198 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker3)));
                if ((temp1198 == 0)) {
                    this.Manager.Comment("reaching state \'S1002\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1196;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,1,Valid)\'");
                    temp1196 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1572\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1196, "return of NetrLogonControl2Ex, state S1572");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label341;
                }
                if ((temp1198 == 1)) {
                    this.Manager.Comment("reaching state \'S1003\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1197;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,1,Valid)\'");
                    temp1197 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1573\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1197, "return of NetrLogonControl2Ex, state S1573");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label341;
                }
                throw new InvalidOperationException("never reached");
            label341:
;
                goto label343;
            }
            if ((temp1203 == 2)) {
                this.Manager.Comment("reaching state \'S312\'");
                bool temp1199;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1199);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1199);
                this.Manager.Comment("reaching state \'S597\'");
                int temp1202 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker5)));
                if ((temp1202 == 0)) {
                    this.Manager.Comment("reaching state \'S1004\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1200;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1200 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1574\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1200, "return of NetrLogonControl2Ex, state S1574");
                    this.Manager.Comment("reaching state \'S1984\'");
                    goto label342;
                }
                if ((temp1202 == 1)) {
                    this.Manager.Comment("reaching state \'S1005\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1201;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1201 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1575\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1201, "return of NetrLogonControl2Ex, state S1575");
                    this.Manager.Comment("reaching state \'S1985\'");
                    goto label342;
                }
                throw new InvalidOperationException("never reached");
            label342:
;
                goto label343;
            }
            throw new InvalidOperationException("never reached");
        label343:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S595");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S595");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S596");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S596");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S597");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS80GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S597");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1204;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1204);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1204);
            this.Manager.Comment("reaching state \'S83\'");
            int temp1217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetPlatformChecker2)));
            if ((temp1217 == 0)) {
                this.Manager.Comment("reaching state \'S313\'");
                bool temp1205;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1205);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1205);
                this.Manager.Comment("reaching state \'S598\'");
                int temp1208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker1)));
                if ((temp1208 == 0)) {
                    this.Manager.Comment("reaching state \'S1006\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1206;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65533,3,Valid)\'");
                    temp1206 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1576\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1206, "return of NetrLogonControl2Ex, state S1576");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label344;
                }
                if ((temp1208 == 1)) {
                    this.Manager.Comment("reaching state \'S1007\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1207;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,3,Valid)\'");
                    temp1207 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1577\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1207, "return of NetrLogonControl2Ex, state S1577");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label344;
                }
                throw new InvalidOperationException("never reached");
            label344:
;
                goto label347;
            }
            if ((temp1217 == 1)) {
                this.Manager.Comment("reaching state \'S314\'");
                bool temp1209;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1209);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1209);
                this.Manager.Comment("reaching state \'S599\'");
                int temp1212 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker3)));
                if ((temp1212 == 0)) {
                    this.Manager.Comment("reaching state \'S1008\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1210;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,3,Valid)\'");
                    temp1210 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1578\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1210, "return of NetrLogonControl2Ex, state S1578");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label345;
                }
                if ((temp1212 == 1)) {
                    this.Manager.Comment("reaching state \'S1009\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1211;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,3,Valid)\'");
                    temp1211 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1579\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1211, "return of NetrLogonControl2Ex, state S1579");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label345;
                }
                throw new InvalidOperationException("never reached");
            label345:
;
                goto label347;
            }
            if ((temp1217 == 2)) {
                this.Manager.Comment("reaching state \'S315\'");
                bool temp1213;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1213);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1213);
                this.Manager.Comment("reaching state \'S600\'");
                int temp1216 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker5)));
                if ((temp1216 == 0)) {
                    this.Manager.Comment("reaching state \'S1010\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1214;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1214 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1580\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1214, "return of NetrLogonControl2Ex, state S1580");
                    this.Manager.Comment("reaching state \'S1986\'");
                    goto label346;
                }
                if ((temp1216 == 1)) {
                    this.Manager.Comment("reaching state \'S1011\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1215;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1215 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1581\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1215, "return of NetrLogonControl2Ex, state S1581");
                    this.Manager.Comment("reaching state \'S1987\'");
                    goto label346;
                }
                throw new InvalidOperationException("never reached");
            label346:
;
                goto label347;
            }
            throw new InvalidOperationException("never reached");
        label347:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S598");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S598");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S599");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S599");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S600");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS82GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S600");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1218;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1218);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1218);
            this.Manager.Comment("reaching state \'S85\'");
            int temp1231 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetPlatformChecker2)));
            if ((temp1231 == 0)) {
                this.Manager.Comment("reaching state \'S316\'");
                bool temp1219;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1219);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1219);
                this.Manager.Comment("reaching state \'S601\'");
                int temp1222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker1)));
                if ((temp1222 == 0)) {
                    this.Manager.Comment("reaching state \'S1012\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1220;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,11,3,Valid)\'");
                    temp1220 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1582\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1220, "return of NetrLogonControl2Ex, state S1582");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label348;
                }
                if ((temp1222 == 1)) {
                    this.Manager.Comment("reaching state \'S1013\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1221;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,3,Valid)\'");
                    temp1221 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1583\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1221, "return of NetrLogonControl2Ex, state S1583");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label348;
                }
                throw new InvalidOperationException("never reached");
            label348:
;
                goto label351;
            }
            if ((temp1231 == 1)) {
                this.Manager.Comment("reaching state \'S317\'");
                bool temp1223;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1223);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1223);
                this.Manager.Comment("reaching state \'S602\'");
                int temp1226 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker3)));
                if ((temp1226 == 0)) {
                    this.Manager.Comment("reaching state \'S1014\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1224;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,3,Valid)\'");
                    temp1224 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1584\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1224, "return of NetrLogonControl2Ex, state S1584");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label349;
                }
                if ((temp1226 == 1)) {
                    this.Manager.Comment("reaching state \'S1015\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1225;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,3,Valid)\'");
                    temp1225 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1585\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1225, "return of NetrLogonControl2Ex, state S1585");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label349;
                }
                throw new InvalidOperationException("never reached");
            label349:
;
                goto label351;
            }
            if ((temp1231 == 2)) {
                this.Manager.Comment("reaching state \'S318\'");
                bool temp1227;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1227);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1227);
                this.Manager.Comment("reaching state \'S603\'");
                int temp1230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker5)));
                if ((temp1230 == 0)) {
                    this.Manager.Comment("reaching state \'S1016\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1228;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1228 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1586\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1228, "return of NetrLogonControl2Ex, state S1586");
                    this.Manager.Comment("reaching state \'S1988\'");
                    goto label350;
                }
                if ((temp1230 == 1)) {
                    this.Manager.Comment("reaching state \'S1017\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1229;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1229 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1587\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1229, "return of NetrLogonControl2Ex, state S1587");
                    this.Manager.Comment("reaching state \'S1989\'");
                    goto label350;
                }
                throw new InvalidOperationException("never reached");
            label350:
;
                goto label351;
            }
            throw new InvalidOperationException("never reached");
        label351:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S601");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S601");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S602");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S602");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S603");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS84GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S603");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1232;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1232);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1232);
            this.Manager.Comment("reaching state \'S87\'");
            int temp1245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetPlatformChecker2)));
            if ((temp1245 == 0)) {
                this.Manager.Comment("reaching state \'S319\'");
                bool temp1233;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1233);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1233);
                this.Manager.Comment("reaching state \'S604\'");
                int temp1236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker1)));
                if ((temp1236 == 0)) {
                    this.Manager.Comment("reaching state \'S1018\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1234;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,3,Valid)\'");
                    temp1234 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1588\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1234, "return of NetrLogonControl2Ex, state S1588");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label352;
                }
                if ((temp1236 == 1)) {
                    this.Manager.Comment("reaching state \'S1019\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1235;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,3,Valid)\'");
                    temp1235 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1589\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1235, "return of NetrLogonControl2Ex, state S1589");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label352;
                }
                throw new InvalidOperationException("never reached");
            label352:
;
                goto label355;
            }
            if ((temp1245 == 1)) {
                this.Manager.Comment("reaching state \'S320\'");
                bool temp1237;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1237);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1237);
                this.Manager.Comment("reaching state \'S605\'");
                int temp1240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker3)));
                if ((temp1240 == 0)) {
                    this.Manager.Comment("reaching state \'S1020\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1238;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,3,Valid)\'");
                    temp1238 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1590\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1238, "return of NetrLogonControl2Ex, state S1590");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label353;
                }
                if ((temp1240 == 1)) {
                    this.Manager.Comment("reaching state \'S1021\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1239;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,3,Valid)\'");
                    temp1239 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1591\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1239, "return of NetrLogonControl2Ex, state S1591");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label353;
                }
                throw new InvalidOperationException("never reached");
            label353:
;
                goto label355;
            }
            if ((temp1245 == 2)) {
                this.Manager.Comment("reaching state \'S321\'");
                bool temp1241;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1241);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1241);
                this.Manager.Comment("reaching state \'S606\'");
                int temp1244 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker5)));
                if ((temp1244 == 0)) {
                    this.Manager.Comment("reaching state \'S1022\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1242;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1242 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1592\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1242, "return of NetrLogonControl2Ex, state S1592");
                    this.Manager.Comment("reaching state \'S1990\'");
                    goto label354;
                }
                if ((temp1244 == 1)) {
                    this.Manager.Comment("reaching state \'S1023\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1243;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1243 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1593\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1243, "return of NetrLogonControl2Ex, state S1593");
                    this.Manager.Comment("reaching state \'S1991\'");
                    goto label354;
                }
                throw new InvalidOperationException("never reached");
            label354:
;
                goto label355;
            }
            throw new InvalidOperationException("never reached");
        label355:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S604");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S604");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S605");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S605");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S606");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS86GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S606");
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1246;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1246);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1246);
            this.Manager.Comment("reaching state \'S89\'");
            int temp1259 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetPlatformChecker2)));
            if ((temp1259 == 0)) {
                this.Manager.Comment("reaching state \'S322\'");
                bool temp1247;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1247);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1247);
                this.Manager.Comment("reaching state \'S607\'");
                int temp1250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker1)));
                if ((temp1250 == 0)) {
                    this.Manager.Comment("reaching state \'S1024\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1248;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,12,3,Valid)\'");
                    temp1248 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1594\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1248, "return of NetrLogonControl2Ex, state S1594");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label356;
                }
                if ((temp1250 == 1)) {
                    this.Manager.Comment("reaching state \'S1025\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1249;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,1,3,Valid)\'");
                    temp1249 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1595\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1249, "return of NetrLogonControl2Ex, state S1595");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label356;
                }
                throw new InvalidOperationException("never reached");
            label356:
;
                goto label359;
            }
            if ((temp1259 == 1)) {
                this.Manager.Comment("reaching state \'S323\'");
                bool temp1251;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1251);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1251);
                this.Manager.Comment("reaching state \'S608\'");
                int temp1254 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker3)));
                if ((temp1254 == 0)) {
                    this.Manager.Comment("reaching state \'S1026\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1252;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,3,Valid)\'");
                    temp1252 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1596\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1252, "return of NetrLogonControl2Ex, state S1596");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label357;
                }
                if ((temp1254 == 1)) {
                    this.Manager.Comment("reaching state \'S1027\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1253;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,3,Valid)\'");
                    temp1253 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1597\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1253, "return of NetrLogonControl2Ex, state S1597");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label357;
                }
                throw new InvalidOperationException("never reached");
            label357:
;
                goto label359;
            }
            if ((temp1259 == 2)) {
                this.Manager.Comment("reaching state \'S324\'");
                bool temp1255;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1255);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1255);
                this.Manager.Comment("reaching state \'S609\'");
                int temp1258 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker5)));
                if ((temp1258 == 0)) {
                    this.Manager.Comment("reaching state \'S1028\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1256;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1256 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1598\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1256, "return of NetrLogonControl2Ex, state S1598");
                    this.Manager.Comment("reaching state \'S1992\'");
                    goto label358;
                }
                if ((temp1258 == 1)) {
                    this.Manager.Comment("reaching state \'S1029\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1257;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1257 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1599\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1257, "return of NetrLogonControl2Ex, state S1599");
                    this.Manager.Comment("reaching state \'S1993\'");
                    goto label358;
                }
                throw new InvalidOperationException("never reached");
            label358:
;
                goto label359;
            }
            throw new InvalidOperationException("never reached");
        label359:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S607");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S607");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S608");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S608");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S609");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS88GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S609");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1260;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1260);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1260);
            this.Manager.Comment("reaching state \'S91\'");
            int temp1273 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetPlatformChecker2)));
            if ((temp1273 == 0)) {
                this.Manager.Comment("reaching state \'S325\'");
                bool temp1261;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1261);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1261);
                this.Manager.Comment("reaching state \'S610\'");
                int temp1264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker1)));
                if ((temp1264 == 0)) {
                    this.Manager.Comment("reaching state \'S1030\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1262;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,3,3,Valid)\'");
                    temp1262 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1600\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1262, "return of NetrLogonControl2Ex, state S1600");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label360;
                }
                if ((temp1264 == 1)) {
                    this.Manager.Comment("reaching state \'S1031\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1263;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,1,Valid)\'");
                    temp1263 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1601\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1263, "return of NetrLogonControl2Ex, state S1601");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label360;
                }
                throw new InvalidOperationException("never reached");
            label360:
;
                goto label363;
            }
            if ((temp1273 == 1)) {
                this.Manager.Comment("reaching state \'S326\'");
                bool temp1265;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1265);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1265);
                this.Manager.Comment("reaching state \'S611\'");
                int temp1268 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker3)));
                if ((temp1268 == 0)) {
                    this.Manager.Comment("reaching state \'S1032\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1266;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,1,Valid)\'");
                    temp1266 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1602\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1266, "return of NetrLogonControl2Ex, state S1602");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label361;
                }
                if ((temp1268 == 1)) {
                    this.Manager.Comment("reaching state \'S1033\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1267;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,1,Valid)\'");
                    temp1267 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1603\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1267, "return of NetrLogonControl2Ex, state S1603");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label361;
                }
                throw new InvalidOperationException("never reached");
            label361:
;
                goto label363;
            }
            if ((temp1273 == 2)) {
                this.Manager.Comment("reaching state \'S327\'");
                bool temp1269;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1269);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1269);
                this.Manager.Comment("reaching state \'S612\'");
                int temp1272 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker5)));
                if ((temp1272 == 0)) {
                    this.Manager.Comment("reaching state \'S1034\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1270;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1270 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1604\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1270, "return of NetrLogonControl2Ex, state S1604");
                    this.Manager.Comment("reaching state \'S1994\'");
                    goto label362;
                }
                if ((temp1272 == 1)) {
                    this.Manager.Comment("reaching state \'S1035\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1271;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1271 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1605\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1271, "return of NetrLogonControl2Ex, state S1605");
                    this.Manager.Comment("reaching state \'S1995\'");
                    goto label362;
                }
                throw new InvalidOperationException("never reached");
            label362:
;
                goto label363;
            }
            throw new InvalidOperationException("never reached");
        label363:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S610");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S610");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S611");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S611");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S612");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS90GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S612");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1274;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1274);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1274);
            this.Manager.Comment("reaching state \'S93\'");
            int temp1287 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetPlatformChecker2)));
            if ((temp1287 == 0)) {
                this.Manager.Comment("reaching state \'S328\'");
                bool temp1275;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1275);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1275);
                this.Manager.Comment("reaching state \'S613\'");
                int temp1278 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker1)));
                if ((temp1278 == 0)) {
                    this.Manager.Comment("reaching state \'S1036\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1276;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,3,Valid)\'");
                    temp1276 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1606\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1276, "return of NetrLogonControl2Ex, state S1606");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label364;
                }
                if ((temp1278 == 1)) {
                    this.Manager.Comment("reaching state \'S1037\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1277;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,1,Valid)\'");
                    temp1277 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1607\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1277, "return of NetrLogonControl2Ex, state S1607");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label364;
                }
                throw new InvalidOperationException("never reached");
            label364:
;
                goto label367;
            }
            if ((temp1287 == 1)) {
                this.Manager.Comment("reaching state \'S329\'");
                bool temp1279;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1279);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1279);
                this.Manager.Comment("reaching state \'S614\'");
                int temp1282 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker3)));
                if ((temp1282 == 0)) {
                    this.Manager.Comment("reaching state \'S1038\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1280;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,1,Valid)\'");
                    temp1280 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1608\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1280, "return of NetrLogonControl2Ex, state S1608");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label365;
                }
                if ((temp1282 == 1)) {
                    this.Manager.Comment("reaching state \'S1039\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1281;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,7,1,Valid)\'");
                    temp1281 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103974");
                    this.Manager.Comment("reaching state \'S1609\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1281, "return of NetrLogonControl2Ex, state S1609");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label365;
                }
                throw new InvalidOperationException("never reached");
            label365:
;
                goto label367;
            }
            if ((temp1287 == 2)) {
                this.Manager.Comment("reaching state \'S330\'");
                bool temp1283;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1283);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1283);
                this.Manager.Comment("reaching state \'S615\'");
                int temp1286 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker5)));
                if ((temp1286 == 0)) {
                    this.Manager.Comment("reaching state \'S1040\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1284;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1284 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1610\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1284, "return of NetrLogonControl2Ex, state S1610");
                    this.Manager.Comment("reaching state \'S1996\'");
                    goto label366;
                }
                if ((temp1286 == 1)) {
                    this.Manager.Comment("reaching state \'S1041\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1285;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1285 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1611\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1285, "return of NetrLogonControl2Ex, state S1611");
                    this.Manager.Comment("reaching state \'S1997\'");
                    goto label366;
                }
                throw new InvalidOperationException("never reached");
            label366:
;
                goto label367;
            }
            throw new InvalidOperationException("never reached");
        label367:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S613");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S613");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S614");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S614");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S615");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS92GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S615");
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1288;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1288);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1288);
            this.Manager.Comment("reaching state \'S95\'");
            int temp1301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetPlatformChecker2)));
            if ((temp1301 == 0)) {
                this.Manager.Comment("reaching state \'S331\'");
                bool temp1289;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1289);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1289);
                this.Manager.Comment("reaching state \'S616\'");
                int temp1292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker1)));
                if ((temp1292 == 0)) {
                    this.Manager.Comment("reaching state \'S1042\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1290;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,2,Valid)\'");
                    temp1290 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1612\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1290, "return of NetrLogonControl2Ex, state S1612");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1905();
                    goto label368;
                }
                if ((temp1292 == 1)) {
                    this.Manager.Comment("reaching state \'S1043\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1291;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,2,1,Valid)\'");
                    temp1291 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1613\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1291, "return of NetrLogonControl2Ex, state S1613");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1904();
                    goto label368;
                }
                throw new InvalidOperationException("never reached");
            label368:
;
                goto label371;
            }
            if ((temp1301 == 1)) {
                this.Manager.Comment("reaching state \'S332\'");
                bool temp1293;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1293);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1293);
                this.Manager.Comment("reaching state \'S617\'");
                int temp1296 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker3)));
                if ((temp1296 == 0)) {
                    this.Manager.Comment("reaching state \'S1044\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1294;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,1,Valid)\'");
                    temp1294 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R203997");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1614\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1294, "return of NetrLogonControl2Ex, state S1614");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1903();
                    goto label369;
                }
                if ((temp1296 == 1)) {
                    this.Manager.Comment("reaching state \'S1045\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1295;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,1,Valid)\'");
                    temp1295 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R203997");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1615\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1295, "return of NetrLogonControl2Ex, state S1615");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1902();
                    goto label369;
                }
                throw new InvalidOperationException("never reached");
            label369:
;
                goto label371;
            }
            if ((temp1301 == 2)) {
                this.Manager.Comment("reaching state \'S333\'");
                bool temp1297;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1297);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1297);
                this.Manager.Comment("reaching state \'S618\'");
                int temp1300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker5)));
                if ((temp1300 == 0)) {
                    this.Manager.Comment("reaching state \'S1046\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1298;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1298 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1616\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1298, "return of NetrLogonControl2Ex, state S1616");
                    this.Manager.Comment("reaching state \'S1998\'");
                    goto label370;
                }
                if ((temp1300 == 1)) {
                    this.Manager.Comment("reaching state \'S1047\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1299;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1299 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1617\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1299, "return of NetrLogonControl2Ex, state S1617");
                    this.Manager.Comment("reaching state \'S1999\'");
                    goto label370;
                }
                throw new InvalidOperationException("never reached");
            label370:
;
                goto label371;
            }
            throw new InvalidOperationException("never reached");
        label371:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S616");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S616");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S617");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S617");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S618");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS94GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S618");
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1302;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1302);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1302);
            this.Manager.Comment("reaching state \'S97\'");
            int temp1315 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetPlatformChecker2)));
            if ((temp1315 == 0)) {
                this.Manager.Comment("reaching state \'S334\'");
                bool temp1303;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1303);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1303);
                this.Manager.Comment("reaching state \'S619\'");
                int temp1306 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker1)));
                if ((temp1306 == 0)) {
                    this.Manager.Comment("reaching state \'S1048\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1304;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1304 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1618\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1304, "return of NetrLogonControl2Ex, state S1618");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label372;
                }
                if ((temp1306 == 1)) {
                    this.Manager.Comment("reaching state \'S1049\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1305;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65534,4,Valid)\'");
                    temp1305 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1619\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1305, "return of NetrLogonControl2Ex, state S1619");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label372;
                }
                throw new InvalidOperationException("never reached");
            label372:
;
                goto label375;
            }
            if ((temp1315 == 1)) {
                this.Manager.Comment("reaching state \'S335\'");
                bool temp1307;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1307);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1307);
                this.Manager.Comment("reaching state \'S620\'");
                int temp1310 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker3)));
                if ((temp1310 == 0)) {
                    this.Manager.Comment("reaching state \'S1050\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1308;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp1308 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1620\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1308, "return of NetrLogonControl2Ex, state S1620");
                    this.Manager.Comment("reaching state \'S2000\'");
                    goto label373;
                }
                if ((temp1310 == 1)) {
                    this.Manager.Comment("reaching state \'S1051\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1309;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp1309 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1621\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1309, "return of NetrLogonControl2Ex, state S1621");
                    this.Manager.Comment("reaching state \'S2001\'");
                    goto label373;
                }
                throw new InvalidOperationException("never reached");
            label373:
;
                goto label375;
            }
            if ((temp1315 == 2)) {
                this.Manager.Comment("reaching state \'S336\'");
                bool temp1311;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1311);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1311);
                this.Manager.Comment("reaching state \'S621\'");
                int temp1314 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker5)));
                if ((temp1314 == 0)) {
                    this.Manager.Comment("reaching state \'S1052\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1312;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp1312 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1622\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1312, "return of NetrLogonControl2Ex, state S1622");
                    this.Manager.Comment("reaching state \'S2002\'");
                    goto label374;
                }
                if ((temp1314 == 1)) {
                    this.Manager.Comment("reaching state \'S1053\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1313;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp1313 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1623\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1313, "return of NetrLogonControl2Ex, state S1623");
                    this.Manager.Comment("reaching state \'S2003\'");
                    goto label374;
                }
                throw new InvalidOperationException("never reached");
            label374:
;
                goto label375;
            }
            throw new InvalidOperationException("never reached");
        label375:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S619");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S619");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S620");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S620");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S621");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS96GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S621");
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1316;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1316);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1316);
            this.Manager.Comment("reaching state \'S99\'");
            int temp1329 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetPlatformChecker2)));
            if ((temp1329 == 0)) {
                this.Manager.Comment("reaching state \'S337\'");
                bool temp1317;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1317);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1317);
                this.Manager.Comment("reaching state \'S622\'");
                int temp1320 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker1)));
                if ((temp1320 == 0)) {
                    this.Manager.Comment("reaching state \'S1054\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1318;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,2,Valid)\'");
                    temp1318 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1624\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1318, "return of NetrLogonControl2Ex, state S1624");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1901();
                    goto label376;
                }
                if ((temp1320 == 1)) {
                    this.Manager.Comment("reaching state \'S1055\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1319;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65532,2,Valid)\'");
                    temp1319 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1625\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1319, "return of NetrLogonControl2Ex, state S1625");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS1900();
                    goto label376;
                }
                throw new InvalidOperationException("never reached");
            label376:
;
                goto label379;
            }
            if ((temp1329 == 1)) {
                this.Manager.Comment("reaching state \'S338\'");
                bool temp1321;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1321);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1321);
                this.Manager.Comment("reaching state \'S623\'");
                int temp1324 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker3)));
                if ((temp1324 == 0)) {
                    this.Manager.Comment("reaching state \'S1056\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1322;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp1322 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1626\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1322, "return of NetrLogonControl2Ex, state S1626");
                    this.Manager.Comment("reaching state \'S2004\'");
                    goto label377;
                }
                if ((temp1324 == 1)) {
                    this.Manager.Comment("reaching state \'S1057\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1323;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,65535,4,Valid)\'");
                    temp1323 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103979");
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1627\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1323, "return of NetrLogonControl2Ex, state S1627");
                    this.Manager.Comment("reaching state \'S2005\'");
                    goto label377;
                }
                throw new InvalidOperationException("never reached");
            label377:
;
                goto label379;
            }
            if ((temp1329 == 2)) {
                this.Manager.Comment("reaching state \'S339\'");
                bool temp1325;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1325);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1325);
                this.Manager.Comment("reaching state \'S624\'");
                int temp1328 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServer.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker5)));
                if ((temp1328 == 0)) {
                    this.Manager.Comment("reaching state \'S1058\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1326;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp1326 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1628\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1326, "return of NetrLogonControl2Ex, state S1628");
                    this.Manager.Comment("reaching state \'S2006\'");
                    goto label378;
                }
                if ((temp1328 == 1)) {
                    this.Manager.Comment("reaching state \'S1059\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1327;
                    this.Manager.Comment("executing step \'call NetrLogonControl2Ex(NonDcServer,4,2,Valid)\'");
                    temp1327 = this.INrpcServerAdapterInstance.NetrLogonControl2Ex(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.NonDcServer, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103975");
                    this.Manager.Comment("reaching state \'S1629\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2Ex/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1327, "return of NetrLogonControl2Ex, state S1629");
                    this.Manager.Comment("reaching state \'S2007\'");
                    goto label378;
                }
                throw new InvalidOperationException("never reached");
            label378:
;
                goto label379;
            }
            throw new InvalidOperationException("never reached");
        label379:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S622");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S622");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S623");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S623");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S624");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2Ex_NonDcServerS98GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S624");
        }
        #endregion
    }
}
