// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.Nrpc {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc : PtfTestClassBase {
        
        public Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetPlatformDelegate1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform);
        
        public delegate void GetClientAccountTypeDelegate1(bool isAdministrator);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetPlatformInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter), "GetPlatform", typeof(Microsoft.Protocols.TestSuites.Nrpc.PlatformType).MakeByRefType());
        
        static System.Reflection.MethodBase GetClientAccountTypeInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter), "GetClientAccountType", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter INrpcServerAdapterInstance;
        
        private Microsoft.Protocols.TestSuites.Nrpc.INrpcServerSutControlAdapter INrpcServerSutControlAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.INrpcServerAdapterInstance = ((Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerAdapter))));
            this.INrpcServerSutControlAdapterInstance = ((Microsoft.Protocols.TestSuites.Nrpc.INrpcServerSutControlAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.Nrpc.INrpcServerSutControlAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp0;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp0);
            this.Manager.AddReturn(GetPlatformInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetPlatformChecker2)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S326\'");
                bool temp1;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1);
                this.Manager.Comment("reaching state \'S815\'");
                int temp4 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker1)));
                if ((temp4 == 0)) {
                    this.Manager.Comment("reaching state \'S1304\'");
                    this.Manager.Comment("executing step \'call PauseNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.PauseNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S2282\'");
                    this.Manager.Comment("checking step \'return PauseNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3260\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp2 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104070");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3758\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_LOGON_SERVERS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_LOGON_SERVERS, temp2, "return of NetrLogonControl2, state S3758");
                    this.Manager.Comment("reaching state \'S3764\'");
                    this.Manager.Comment("executing step \'call ResumeNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.ResumeNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S3770\'");
                    this.Manager.Comment("checking step \'return ResumeNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3776\'");
                    goto label0;
                }
                if ((temp4 == 1)) {
                    this.Manager.Comment("reaching state \'S1305\'");
                    this.Manager.Comment("executing step \'call PauseNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.PauseNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S2283\'");
                    this.Manager.Comment("checking step \'return PauseNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3261\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp3;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp3 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3759\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp3, "return of NetrLogonControl2, state S3759");
                    this.Manager.Comment("reaching state \'S3765\'");
                    this.Manager.Comment("executing step \'call ResumeNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.ResumeNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S3771\'");
                    this.Manager.Comment("checking step \'return ResumeNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3777\'");
                    goto label0;
                }
                throw new InvalidOperationException("never reached");
            label0:
;
                goto label3;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S327\'");
                bool temp5;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp5);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp5);
                this.Manager.Comment("reaching state \'S816\'");
                int temp8 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker3)));
                if ((temp8 == 0)) {
                    this.Manager.Comment("reaching state \'S1306\'");
                    this.Manager.Comment("executing step \'call PauseNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.PauseNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S2284\'");
                    this.Manager.Comment("checking step \'return PauseNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3262\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp6;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp6 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104070");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3760\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_LOGON_SERVERS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_LOGON_SERVERS, temp6, "return of NetrLogonControl2, state S3760");
                    this.Manager.Comment("reaching state \'S3766\'");
                    this.Manager.Comment("executing step \'call ResumeNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.ResumeNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S3772\'");
                    this.Manager.Comment("checking step \'return ResumeNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3778\'");
                    goto label1;
                }
                if ((temp8 == 1)) {
                    this.Manager.Comment("reaching state \'S1307\'");
                    this.Manager.Comment("executing step \'call PauseNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.PauseNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S2285\'");
                    this.Manager.Comment("checking step \'return PauseNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3263\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp7;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp7 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3761\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp7, "return of NetrLogonControl2, state S3761");
                    this.Manager.Comment("reaching state \'S3767\'");
                    this.Manager.Comment("executing step \'call ResumeNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.ResumeNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S3773\'");
                    this.Manager.Comment("checking step \'return ResumeNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3779\'");
                    goto label1;
                }
                throw new InvalidOperationException("never reached");
            label1:
;
                goto label3;
            }
            if ((temp13 == 2)) {
                this.Manager.Comment("reaching state \'S328\'");
                bool temp9;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp9);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp9);
                this.Manager.Comment("reaching state \'S817\'");
                int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker5)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S1308\'");
                    this.Manager.Comment("executing step \'call PauseNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.PauseNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S2286\'");
                    this.Manager.Comment("checking step \'return PauseNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3264\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp10;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp10 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104070");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3762\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_LOGON_SERVERS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_LOGON_SERVERS, temp10, "return of NetrLogonControl2, state S3762");
                    this.Manager.Comment("reaching state \'S3768\'");
                    this.Manager.Comment("executing step \'call ResumeNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.ResumeNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S3774\'");
                    this.Manager.Comment("checking step \'return ResumeNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3780\'");
                    goto label2;
                }
                if ((temp12 == 1)) {
                    this.Manager.Comment("reaching state \'S1309\'");
                    this.Manager.Comment("executing step \'call PauseNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.PauseNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S2287\'");
                    this.Manager.Comment("checking step \'return PauseNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3265\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp11;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp11 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3763\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp11, "return of NetrLogonControl2, state S3763");
                    this.Manager.Comment("reaching state \'S3769\'");
                    this.Manager.Comment("executing step \'call ResumeNetlogonService(TrustDc)\'");
                    this.INrpcServerSutControlAdapterInstance.ResumeNetlogonService(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.TrustDc);
                    this.Manager.Comment("reaching state \'S3775\'");
                    this.Manager.Comment("checking step \'return ResumeNetlogonService\'");
                    this.Manager.Comment("reaching state \'S3781\'");
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S815");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S815");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S816");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S816");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S1");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S817");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS0GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S817");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10");
            this.Manager.Comment("reaching state \'S10\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp14;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp14);
            this.Manager.AddReturn(GetPlatformInfo, null, temp14);
            this.Manager.Comment("reaching state \'S11\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetPlatformChecker2)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S341\'");
                bool temp15;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp15);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp15);
                this.Manager.Comment("reaching state \'S830\'");
                int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker1)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S1334\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp16;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,NoValidDomainNameContained)\'" +
                            "");
                    temp16 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2312\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp16, "return of NetrLogonControl2, state S2312");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label4;
                }
                if ((temp18 == 1)) {
                    this.Manager.Comment("reaching state \'S1335\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp17;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,4,Valid)\'");
                    temp17 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2313\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp17, "return of NetrLogonControl2, state S2313");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label7;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S342\'");
                bool temp19;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp19);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp19);
                this.Manager.Comment("reaching state \'S831\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker3)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S1336\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp20;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,NoValidDomainNameContained)\'" +
                            "");
                    temp20 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2314\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp20, "return of NetrLogonControl2, state S2314");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label5;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S1337\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp21;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,NoValidDomainNameContained)\'" +
                            "");
                    temp21 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2315\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp21, "return of NetrLogonControl2, state S2315");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label5;
                }
                throw new InvalidOperationException("never reached");
            label5:
;
                goto label7;
            }
            if ((temp27 == 2)) {
                this.Manager.Comment("reaching state \'S343\'");
                bool temp23;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp23);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp23);
                this.Manager.Comment("reaching state \'S832\'");
                int temp26 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker5)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S1338\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp24;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp24 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2316\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp24, "return of NetrLogonControl2, state S2316");
                    this.Manager.Comment("reaching state \'S3278\'");
                    goto label6;
                }
                if ((temp26 == 1)) {
                    this.Manager.Comment("reaching state \'S1339\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp25;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp25 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2317\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp25, "return of NetrLogonControl2, state S2317");
                    this.Manager.Comment("reaching state \'S3279\'");
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S830");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266() {
            this.Manager.Comment("reaching state \'S3266\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S830");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267() {
            this.Manager.Comment("reaching state \'S3267\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S831");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268() {
            this.Manager.Comment("reaching state \'S3268\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S831");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269() {
            this.Manager.Comment("reaching state \'S3269\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S11");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S832");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS10GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S832");
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp28;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp28);
            this.Manager.AddReturn(GetPlatformInfo, null, temp28);
            this.Manager.Comment("reaching state \'S101\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetPlatformChecker2)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S476\'");
                bool temp29;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp29);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp29);
                this.Manager.Comment("reaching state \'S965\'");
                int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker1)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S1604\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp30;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp30 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2582\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp30, "return of NetrLogonControl2, state S2582");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label8;
                }
                if ((temp32 == 1)) {
                    this.Manager.Comment("reaching state \'S1605\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp31;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,3,Valid)\'");
                    temp31 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2583\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp31, "return of NetrLogonControl2, state S2583");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label8;
                }
                throw new InvalidOperationException("never reached");
            label8:
;
                goto label11;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S477\'");
                bool temp33;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp33);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp33);
                this.Manager.Comment("reaching state \'S966\'");
                int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker3)));
                if ((temp36 == 0)) {
                    this.Manager.Comment("reaching state \'S1606\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp34;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp34 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2584\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp34, "return of NetrLogonControl2, state S2584");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label9;
                }
                if ((temp36 == 1)) {
                    this.Manager.Comment("reaching state \'S1607\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp35;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,1,Valid)\'");
                    temp35 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2585\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp35, "return of NetrLogonControl2, state S2585");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label9;
                }
                throw new InvalidOperationException("never reached");
            label9:
;
                goto label11;
            }
            if ((temp41 == 2)) {
                this.Manager.Comment("reaching state \'S478\'");
                bool temp37;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp37);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp37);
                this.Manager.Comment("reaching state \'S967\'");
                int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker5)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S1608\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp38;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp38 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2586\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp38, "return of NetrLogonControl2, state S2586");
                    this.Manager.Comment("reaching state \'S3368\'");
                    goto label10;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S1609\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp39;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp39 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2587\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp39, "return of NetrLogonControl2, state S2587");
                    this.Manager.Comment("reaching state \'S3369\'");
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S965");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S965");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S966");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S966");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S967");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS100GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S967");
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp42;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp42);
            this.Manager.AddReturn(GetPlatformInfo, null, temp42);
            this.Manager.Comment("reaching state \'S103\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetPlatformChecker2)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S479\'");
                bool temp43;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp43);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp43);
                this.Manager.Comment("reaching state \'S968\'");
                int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker1)));
                if ((temp46 == 0)) {
                    this.Manager.Comment("reaching state \'S1610\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp44;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,Valid)\'");
                    temp44 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2588\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp44, "return of NetrLogonControl2, state S2588");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label12;
                }
                if ((temp46 == 1)) {
                    this.Manager.Comment("reaching state \'S1611\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp45;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,3,Valid)\'");
                    temp45 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2589\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp45, "return of NetrLogonControl2, state S2589");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label12;
                }
                throw new InvalidOperationException("never reached");
            label12:
;
                goto label15;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S480\'");
                bool temp47;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp47);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp47);
                this.Manager.Comment("reaching state \'S969\'");
                int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker3)));
                if ((temp50 == 0)) {
                    this.Manager.Comment("reaching state \'S1612\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp48;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,Valid)\'");
                    temp48 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2590\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp48, "return of NetrLogonControl2, state S2590");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label13;
                }
                if ((temp50 == 1)) {
                    this.Manager.Comment("reaching state \'S1613\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp49;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,1,Valid)\'");
                    temp49 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2591\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp49, "return of NetrLogonControl2, state S2591");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label13;
                }
                throw new InvalidOperationException("never reached");
            label13:
;
                goto label15;
            }
            if ((temp55 == 2)) {
                this.Manager.Comment("reaching state \'S481\'");
                bool temp51;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp51);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp51);
                this.Manager.Comment("reaching state \'S970\'");
                int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker5)));
                if ((temp54 == 0)) {
                    this.Manager.Comment("reaching state \'S1614\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp52;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp52 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2592\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp52, "return of NetrLogonControl2, state S2592");
                    this.Manager.Comment("reaching state \'S3370\'");
                    goto label14;
                }
                if ((temp54 == 1)) {
                    this.Manager.Comment("reaching state \'S1615\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp53;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp53 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2593\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp53, "return of NetrLogonControl2, state S2593");
                    this.Manager.Comment("reaching state \'S3371\'");
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S968");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S968");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S969");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S969");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S970");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS102GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S970");
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp56;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp56);
            this.Manager.AddReturn(GetPlatformInfo, null, temp56);
            this.Manager.Comment("reaching state \'S105\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetPlatformChecker2)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S482\'");
                bool temp57;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp57);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp57);
                this.Manager.Comment("reaching state \'S971\'");
                int temp60 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker1)));
                if ((temp60 == 0)) {
                    this.Manager.Comment("reaching state \'S1616\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp58;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,1,Valid)\'");
                    temp58 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2594\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp58, "return of NetrLogonControl2, state S2594");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label16;
                }
                if ((temp60 == 1)) {
                    this.Manager.Comment("reaching state \'S1617\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp59;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,3,Valid)\'");
                    temp59 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2595\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp59, "return of NetrLogonControl2, state S2595");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label16;
                }
                throw new InvalidOperationException("never reached");
            label16:
;
                goto label19;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S483\'");
                bool temp61;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp61);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp61);
                this.Manager.Comment("reaching state \'S972\'");
                int temp64 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker3)));
                if ((temp64 == 0)) {
                    this.Manager.Comment("reaching state \'S1618\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp62;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,Valid)\'");
                    temp62 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2596\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp62, "return of NetrLogonControl2, state S2596");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label17;
                }
                if ((temp64 == 1)) {
                    this.Manager.Comment("reaching state \'S1619\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp63;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,Valid)\'");
                    temp63 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2597\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp63, "return of NetrLogonControl2, state S2597");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label17;
                }
                throw new InvalidOperationException("never reached");
            label17:
;
                goto label19;
            }
            if ((temp69 == 2)) {
                this.Manager.Comment("reaching state \'S484\'");
                bool temp65;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp65);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp65);
                this.Manager.Comment("reaching state \'S973\'");
                int temp68 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker5)));
                if ((temp68 == 0)) {
                    this.Manager.Comment("reaching state \'S1620\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp66;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp66 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2598\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp66, "return of NetrLogonControl2, state S2598");
                    this.Manager.Comment("reaching state \'S3372\'");
                    goto label18;
                }
                if ((temp68 == 1)) {
                    this.Manager.Comment("reaching state \'S1621\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp67;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp67 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2599\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp67, "return of NetrLogonControl2, state S2599");
                    this.Manager.Comment("reaching state \'S3373\'");
                    goto label18;
                }
                throw new InvalidOperationException("never reached");
            label18:
;
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S971");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S971");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S972");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S972");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S973");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS104GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S973");
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp70;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp70);
            this.Manager.AddReturn(GetPlatformInfo, null, temp70);
            this.Manager.Comment("reaching state \'S107\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetPlatformChecker2)));
            if ((temp83 == 0)) {
                this.Manager.Comment("reaching state \'S485\'");
                bool temp71;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp71);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp71);
                this.Manager.Comment("reaching state \'S974\'");
                int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker1)));
                if ((temp74 == 0)) {
                    this.Manager.Comment("reaching state \'S1622\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp72;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,1,Valid)\'");
                    temp72 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2600\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp72, "return of NetrLogonControl2, state S2600");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label20;
                }
                if ((temp74 == 1)) {
                    this.Manager.Comment("reaching state \'S1623\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp73;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,3,Valid)\'");
                    temp73 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2601\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp73, "return of NetrLogonControl2, state S2601");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label20;
                }
                throw new InvalidOperationException("never reached");
            label20:
;
                goto label23;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S486\'");
                bool temp75;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp75);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp75);
                this.Manager.Comment("reaching state \'S975\'");
                int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker3)));
                if ((temp78 == 0)) {
                    this.Manager.Comment("reaching state \'S1624\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp76;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,Valid)\'");
                    temp76 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2602\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp76, "return of NetrLogonControl2, state S2602");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label21;
                }
                if ((temp78 == 1)) {
                    this.Manager.Comment("reaching state \'S1625\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp77;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,1,Valid)\'");
                    temp77 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2603\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp77, "return of NetrLogonControl2, state S2603");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label21;
                }
                throw new InvalidOperationException("never reached");
            label21:
;
                goto label23;
            }
            if ((temp83 == 2)) {
                this.Manager.Comment("reaching state \'S487\'");
                bool temp79;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp79);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp79);
                this.Manager.Comment("reaching state \'S976\'");
                int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker5)));
                if ((temp82 == 0)) {
                    this.Manager.Comment("reaching state \'S1626\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp80;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp80 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2604\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp80, "return of NetrLogonControl2, state S2604");
                    this.Manager.Comment("reaching state \'S3374\'");
                    goto label22;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S1627\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp81;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp81 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2605\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp81, "return of NetrLogonControl2, state S2605");
                    this.Manager.Comment("reaching state \'S3375\'");
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S974");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S974");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S975");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S975");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S976");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS106GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S976");
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp84;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp84);
            this.Manager.AddReturn(GetPlatformInfo, null, temp84);
            this.Manager.Comment("reaching state \'S109\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetPlatformChecker2)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S488\'");
                bool temp85;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp85);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp85);
                this.Manager.Comment("reaching state \'S977\'");
                int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker1)));
                if ((temp88 == 0)) {
                    this.Manager.Comment("reaching state \'S1628\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp86;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,1,Valid)\'");
                    temp86 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2606\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp86, "return of NetrLogonControl2, state S2606");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label24;
                }
                if ((temp88 == 1)) {
                    this.Manager.Comment("reaching state \'S1629\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp87;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,3,Valid)\'");
                    temp87 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2607\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp87, "return of NetrLogonControl2, state S2607");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label24;
                }
                throw new InvalidOperationException("never reached");
            label24:
;
                goto label27;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S489\'");
                bool temp89;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp89);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp89);
                this.Manager.Comment("reaching state \'S978\'");
                int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker3)));
                if ((temp92 == 0)) {
                    this.Manager.Comment("reaching state \'S1630\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp90;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,Valid)\'");
                    temp90 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2608\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp90, "return of NetrLogonControl2, state S2608");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label25;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S1631\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp91;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,Valid)\'");
                    temp91 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2609\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp91, "return of NetrLogonControl2, state S2609");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label25;
                }
                throw new InvalidOperationException("never reached");
            label25:
;
                goto label27;
            }
            if ((temp97 == 2)) {
                this.Manager.Comment("reaching state \'S490\'");
                bool temp93;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp93);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp93);
                this.Manager.Comment("reaching state \'S979\'");
                int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker5)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S1632\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp94;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp94 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2610\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp94, "return of NetrLogonControl2, state S2610");
                    this.Manager.Comment("reaching state \'S3376\'");
                    goto label26;
                }
                if ((temp96 == 1)) {
                    this.Manager.Comment("reaching state \'S1633\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp95;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp95 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2611\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp95, "return of NetrLogonControl2, state S2611");
                    this.Manager.Comment("reaching state \'S3377\'");
                    goto label26;
                }
                throw new InvalidOperationException("never reached");
            label26:
;
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S977");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S977");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S978");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S978");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S979");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS108GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S979");
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp98;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp98);
            this.Manager.AddReturn(GetPlatformInfo, null, temp98);
            this.Manager.Comment("reaching state \'S111\'");
            int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetPlatformChecker2)));
            if ((temp111 == 0)) {
                this.Manager.Comment("reaching state \'S491\'");
                bool temp99;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp99);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp99);
                this.Manager.Comment("reaching state \'S980\'");
                int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker1)));
                if ((temp102 == 0)) {
                    this.Manager.Comment("reaching state \'S1634\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp100;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,3,Valid)\'");
                    temp100 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2612\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp100, "return of NetrLogonControl2, state S2612");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label28;
                }
                if ((temp102 == 1)) {
                    this.Manager.Comment("reaching state \'S1635\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp101;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,3,Valid)\'");
                    temp101 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2613\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp101, "return of NetrLogonControl2, state S2613");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label28;
                }
                throw new InvalidOperationException("never reached");
            label28:
;
                goto label31;
            }
            if ((temp111 == 1)) {
                this.Manager.Comment("reaching state \'S492\'");
                bool temp103;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp103);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp103);
                this.Manager.Comment("reaching state \'S981\'");
                int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker3)));
                if ((temp106 == 0)) {
                    this.Manager.Comment("reaching state \'S1636\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp104;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,2,Valid)\'");
                    temp104 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2614\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp104, "return of NetrLogonControl2, state S2614");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label29;
                }
                if ((temp106 == 1)) {
                    this.Manager.Comment("reaching state \'S1637\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp105;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,Valid)\'");
                    temp105 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2615\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp105, "return of NetrLogonControl2, state S2615");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label29;
                }
                throw new InvalidOperationException("never reached");
            label29:
;
                goto label31;
            }
            if ((temp111 == 2)) {
                this.Manager.Comment("reaching state \'S493\'");
                bool temp107;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp107);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp107);
                this.Manager.Comment("reaching state \'S982\'");
                int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker5)));
                if ((temp110 == 0)) {
                    this.Manager.Comment("reaching state \'S1638\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp108;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp108 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2616\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp108, "return of NetrLogonControl2, state S2616");
                    this.Manager.Comment("reaching state \'S3378\'");
                    goto label30;
                }
                if ((temp110 == 1)) {
                    this.Manager.Comment("reaching state \'S1639\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp109;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp109 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2617\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp109, "return of NetrLogonControl2, state S2617");
                    this.Manager.Comment("reaching state \'S3379\'");
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S980");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S980");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S981");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S981");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S982");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS110GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S982");
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp112;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp112);
            this.Manager.AddReturn(GetPlatformInfo, null, temp112);
            this.Manager.Comment("reaching state \'S113\'");
            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetPlatformChecker2)));
            if ((temp125 == 0)) {
                this.Manager.Comment("reaching state \'S494\'");
                bool temp113;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp113);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp113);
                this.Manager.Comment("reaching state \'S983\'");
                int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker1)));
                if ((temp116 == 0)) {
                    this.Manager.Comment("reaching state \'S1640\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp114;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,2,Valid)\'");
                    temp114 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2618\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp114, "return of NetrLogonControl2, state S2618");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label32;
                }
                if ((temp116 == 1)) {
                    this.Manager.Comment("reaching state \'S1641\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp115;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,Valid)\'");
                    temp115 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2619\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp115, "return of NetrLogonControl2, state S2619");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label32;
                }
                throw new InvalidOperationException("never reached");
            label32:
;
                goto label35;
            }
            if ((temp125 == 1)) {
                this.Manager.Comment("reaching state \'S495\'");
                bool temp117;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp117);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp117);
                this.Manager.Comment("reaching state \'S984\'");
                int temp120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker3)));
                if ((temp120 == 0)) {
                    this.Manager.Comment("reaching state \'S1642\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp118;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,1,Valid)\'");
                    temp118 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2620\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp118, "return of NetrLogonControl2, state S2620");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label33;
                }
                if ((temp120 == 1)) {
                    this.Manager.Comment("reaching state \'S1643\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp119;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,Valid)\'");
                    temp119 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2621\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp119, "return of NetrLogonControl2, state S2621");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label33;
                }
                throw new InvalidOperationException("never reached");
            label33:
;
                goto label35;
            }
            if ((temp125 == 2)) {
                this.Manager.Comment("reaching state \'S496\'");
                bool temp121;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp121);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp121);
                this.Manager.Comment("reaching state \'S985\'");
                int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker5)));
                if ((temp124 == 0)) {
                    this.Manager.Comment("reaching state \'S1644\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp122;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp122 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2622\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp122, "return of NetrLogonControl2, state S2622");
                    this.Manager.Comment("reaching state \'S3380\'");
                    goto label34;
                }
                if ((temp124 == 1)) {
                    this.Manager.Comment("reaching state \'S1645\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp123;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp123 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2623\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp123, "return of NetrLogonControl2, state S2623");
                    this.Manager.Comment("reaching state \'S3381\'");
                    goto label34;
                }
                throw new InvalidOperationException("never reached");
            label34:
;
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S983");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S983");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S984");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S984");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S985");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS112GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S985");
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp126;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp126);
            this.Manager.AddReturn(GetPlatformInfo, null, temp126);
            this.Manager.Comment("reaching state \'S115\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetPlatformChecker2)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S497\'");
                bool temp127;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp127);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp127);
                this.Manager.Comment("reaching state \'S986\'");
                int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker1)));
                if ((temp130 == 0)) {
                    this.Manager.Comment("reaching state \'S1646\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp128;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,2,Valid)\'");
                    temp128 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2624\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp128, "return of NetrLogonControl2, state S2624");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label36;
                }
                if ((temp130 == 1)) {
                    this.Manager.Comment("reaching state \'S1647\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp129;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,3,Valid)\'");
                    temp129 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2625\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp129, "return of NetrLogonControl2, state S2625");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label36;
                }
                throw new InvalidOperationException("never reached");
            label36:
;
                goto label39;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S498\'");
                bool temp131;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp131);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp131);
                this.Manager.Comment("reaching state \'S987\'");
                int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker3)));
                if ((temp134 == 0)) {
                    this.Manager.Comment("reaching state \'S1648\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp132;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,1,Valid)\'");
                    temp132 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2626\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp132, "return of NetrLogonControl2, state S2626");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label37;
                }
                if ((temp134 == 1)) {
                    this.Manager.Comment("reaching state \'S1649\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp133;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,Valid)\'");
                    temp133 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2627\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp133, "return of NetrLogonControl2, state S2627");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label37;
                }
                throw new InvalidOperationException("never reached");
            label37:
;
                goto label39;
            }
            if ((temp139 == 2)) {
                this.Manager.Comment("reaching state \'S499\'");
                bool temp135;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp135);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp135);
                this.Manager.Comment("reaching state \'S988\'");
                int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker5)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S1650\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp136;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp136 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2628\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp136, "return of NetrLogonControl2, state S2628");
                    this.Manager.Comment("reaching state \'S3382\'");
                    goto label38;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S1651\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp137;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp137 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2629\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp137, "return of NetrLogonControl2, state S2629");
                    this.Manager.Comment("reaching state \'S3383\'");
                    goto label38;
                }
                throw new InvalidOperationException("never reached");
            label38:
;
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S986");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S986");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S987");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S987");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S988");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS114GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S988");
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp140;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp140);
            this.Manager.AddReturn(GetPlatformInfo, null, temp140);
            this.Manager.Comment("reaching state \'S117\'");
            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetPlatformChecker2)));
            if ((temp153 == 0)) {
                this.Manager.Comment("reaching state \'S500\'");
                bool temp141;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp141);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp141);
                this.Manager.Comment("reaching state \'S989\'");
                int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker1)));
                if ((temp144 == 0)) {
                    this.Manager.Comment("reaching state \'S1652\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp142;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,2,Valid)\'");
                    temp142 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2630\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp142, "return of NetrLogonControl2, state S2630");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label40;
                }
                if ((temp144 == 1)) {
                    this.Manager.Comment("reaching state \'S1653\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp143;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,Valid)\'");
                    temp143 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2631\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp143, "return of NetrLogonControl2, state S2631");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label40;
                }
                throw new InvalidOperationException("never reached");
            label40:
;
                goto label43;
            }
            if ((temp153 == 1)) {
                this.Manager.Comment("reaching state \'S501\'");
                bool temp145;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp145);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp145);
                this.Manager.Comment("reaching state \'S990\'");
                int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker3)));
                if ((temp148 == 0)) {
                    this.Manager.Comment("reaching state \'S1654\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp146;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,1,Valid)\'");
                    temp146 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2632\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp146, "return of NetrLogonControl2, state S2632");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label41;
                }
                if ((temp148 == 1)) {
                    this.Manager.Comment("reaching state \'S1655\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp147;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,Valid)\'");
                    temp147 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2633\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp147, "return of NetrLogonControl2, state S2633");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label41;
                }
                throw new InvalidOperationException("never reached");
            label41:
;
                goto label43;
            }
            if ((temp153 == 2)) {
                this.Manager.Comment("reaching state \'S502\'");
                bool temp149;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp149);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp149);
                this.Manager.Comment("reaching state \'S991\'");
                int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker5)));
                if ((temp152 == 0)) {
                    this.Manager.Comment("reaching state \'S1656\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp150;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp150 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2634\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp150, "return of NetrLogonControl2, state S2634");
                    this.Manager.Comment("reaching state \'S3384\'");
                    goto label42;
                }
                if ((temp152 == 1)) {
                    this.Manager.Comment("reaching state \'S1657\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp151;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp151 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2635\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp151, "return of NetrLogonControl2, state S2635");
                    this.Manager.Comment("reaching state \'S3385\'");
                    goto label42;
                }
                throw new InvalidOperationException("never reached");
            label42:
;
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S989");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S989");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S990");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S990");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S991");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS116GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S991");
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp154;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp154);
            this.Manager.AddReturn(GetPlatformInfo, null, temp154);
            this.Manager.Comment("reaching state \'S119\'");
            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetPlatformChecker2)));
            if ((temp167 == 0)) {
                this.Manager.Comment("reaching state \'S503\'");
                bool temp155;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp155);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp155);
                this.Manager.Comment("reaching state \'S992\'");
                int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker1)));
                if ((temp158 == 0)) {
                    this.Manager.Comment("reaching state \'S1658\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp156;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,2,Valid)\'");
                    temp156 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2636\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp156, "return of NetrLogonControl2, state S2636");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label44;
                }
                if ((temp158 == 1)) {
                    this.Manager.Comment("reaching state \'S1659\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp157;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,1,Valid)\'");
                    temp157 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2637\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp157, "return of NetrLogonControl2, state S2637");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label44;
                }
                throw new InvalidOperationException("never reached");
            label44:
;
                goto label47;
            }
            if ((temp167 == 1)) {
                this.Manager.Comment("reaching state \'S504\'");
                bool temp159;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp159);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp159);
                this.Manager.Comment("reaching state \'S993\'");
                int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker3)));
                if ((temp162 == 0)) {
                    this.Manager.Comment("reaching state \'S1660\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp160;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,3,Valid)\'");
                    temp160 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2638\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp160, "return of NetrLogonControl2, state S2638");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label45;
                }
                if ((temp162 == 1)) {
                    this.Manager.Comment("reaching state \'S1661\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp161;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,4,Valid)\'");
                    temp161 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2639\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp161, "return of NetrLogonControl2, state S2639");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label45;
                }
                throw new InvalidOperationException("never reached");
            label45:
;
                goto label47;
            }
            if ((temp167 == 2)) {
                this.Manager.Comment("reaching state \'S505\'");
                bool temp163;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp163);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp163);
                this.Manager.Comment("reaching state \'S994\'");
                int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker5)));
                if ((temp166 == 0)) {
                    this.Manager.Comment("reaching state \'S1662\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp164;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp164 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2640\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp164, "return of NetrLogonControl2, state S2640");
                    this.Manager.Comment("reaching state \'S3386\'");
                    goto label46;
                }
                if ((temp166 == 1)) {
                    this.Manager.Comment("reaching state \'S1663\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp165;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp165 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2641\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp165, "return of NetrLogonControl2, state S2641");
                    this.Manager.Comment("reaching state \'S3387\'");
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S992");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S992");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S993");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S993");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S994");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS118GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S994");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12");
            this.Manager.Comment("reaching state \'S12\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp168;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp168);
            this.Manager.AddReturn(GetPlatformInfo, null, temp168);
            this.Manager.Comment("reaching state \'S13\'");
            int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetPlatformChecker2)));
            if ((temp181 == 0)) {
                this.Manager.Comment("reaching state \'S344\'");
                bool temp169;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp169);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp169);
                this.Manager.Comment("reaching state \'S833\'");
                int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker1)));
                if ((temp172 == 0)) {
                    this.Manager.Comment("reaching state \'S1340\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp170;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,NoValidDomainNameContained)\'" +
                            "");
                    temp170 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2318\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp170, "return of NetrLogonControl2, state S2318");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label48;
                }
                if ((temp172 == 1)) {
                    this.Manager.Comment("reaching state \'S1341\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp171;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,1,Valid)\'");
                    temp171 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2319\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp171, "return of NetrLogonControl2, state S2319");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label48;
                }
                throw new InvalidOperationException("never reached");
            label48:
;
                goto label51;
            }
            if ((temp181 == 1)) {
                this.Manager.Comment("reaching state \'S345\'");
                bool temp173;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp173);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp173);
                this.Manager.Comment("reaching state \'S834\'");
                int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker3)));
                if ((temp176 == 0)) {
                    this.Manager.Comment("reaching state \'S1342\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp174;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,NoValidDomainNameContained)\'" +
                            "");
                    temp174 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2320\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp174, "return of NetrLogonControl2, state S2320");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label49;
                }
                if ((temp176 == 1)) {
                    this.Manager.Comment("reaching state \'S1343\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp175;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,NoValidDomainNameContained)" +
                            "\'");
                    temp175 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2321\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp175, "return of NetrLogonControl2, state S2321");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label49;
                }
                throw new InvalidOperationException("never reached");
            label49:
;
                goto label51;
            }
            if ((temp181 == 2)) {
                this.Manager.Comment("reaching state \'S346\'");
                bool temp177;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp177);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp177);
                this.Manager.Comment("reaching state \'S835\'");
                int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker5)));
                if ((temp180 == 0)) {
                    this.Manager.Comment("reaching state \'S1344\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp178;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp178 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2322\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp178, "return of NetrLogonControl2, state S2322");
                    this.Manager.Comment("reaching state \'S3280\'");
                    goto label50;
                }
                if ((temp180 == 1)) {
                    this.Manager.Comment("reaching state \'S1345\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp179;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp179 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2323\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp179, "return of NetrLogonControl2, state S2323");
                    this.Manager.Comment("reaching state \'S3281\'");
                    goto label50;
                }
                throw new InvalidOperationException("never reached");
            label50:
;
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S833");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S833");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S834");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S834");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S13");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S835");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS12GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S835");
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120");
            this.Manager.Comment("reaching state \'S120\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp182;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp182);
            this.Manager.AddReturn(GetPlatformInfo, null, temp182);
            this.Manager.Comment("reaching state \'S121\'");
            int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetPlatformChecker2)));
            if ((temp195 == 0)) {
                this.Manager.Comment("reaching state \'S506\'");
                bool temp183;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp183);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp183);
                this.Manager.Comment("reaching state \'S995\'");
                int temp186 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker1)));
                if ((temp186 == 0)) {
                    this.Manager.Comment("reaching state \'S1664\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp184;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,2,Valid)\'");
                    temp184 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2642\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp184, "return of NetrLogonControl2, state S2642");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label52;
                }
                if ((temp186 == 1)) {
                    this.Manager.Comment("reaching state \'S1665\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp185;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,1,Valid)\'");
                    temp185 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2643\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp185, "return of NetrLogonControl2, state S2643");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label55;
            }
            if ((temp195 == 1)) {
                this.Manager.Comment("reaching state \'S507\'");
                bool temp187;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp187);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp187);
                this.Manager.Comment("reaching state \'S996\'");
                int temp190 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker3)));
                if ((temp190 == 0)) {
                    this.Manager.Comment("reaching state \'S1666\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp188;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,3,Valid)\'");
                    temp188 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2644\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp188, "return of NetrLogonControl2, state S2644");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label53;
                }
                if ((temp190 == 1)) {
                    this.Manager.Comment("reaching state \'S1667\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp189;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,4,Valid)\'");
                    temp189 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104100");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2645\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp189, "return of NetrLogonControl2, state S2645");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label53;
                }
                throw new InvalidOperationException("never reached");
            label53:
;
                goto label55;
            }
            if ((temp195 == 2)) {
                this.Manager.Comment("reaching state \'S508\'");
                bool temp191;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp191);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp191);
                this.Manager.Comment("reaching state \'S997\'");
                int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker5)));
                if ((temp194 == 0)) {
                    this.Manager.Comment("reaching state \'S1668\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp192;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp192 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2646\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp192, "return of NetrLogonControl2, state S2646");
                    this.Manager.Comment("reaching state \'S3388\'");
                    goto label54;
                }
                if ((temp194 == 1)) {
                    this.Manager.Comment("reaching state \'S1669\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp193;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp193 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2647\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp193, "return of NetrLogonControl2, state S2647");
                    this.Manager.Comment("reaching state \'S3389\'");
                    goto label54;
                }
                throw new InvalidOperationException("never reached");
            label54:
;
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S995");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S995");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S996");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S996");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S997");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS120GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S997");
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122");
            this.Manager.Comment("reaching state \'S122\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp196;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp196);
            this.Manager.AddReturn(GetPlatformInfo, null, temp196);
            this.Manager.Comment("reaching state \'S123\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetPlatformChecker2)));
            if ((temp209 == 0)) {
                this.Manager.Comment("reaching state \'S509\'");
                bool temp197;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp197);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp197);
                this.Manager.Comment("reaching state \'S998\'");
                int temp200 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker1)));
                if ((temp200 == 0)) {
                    this.Manager.Comment("reaching state \'S1670\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp198;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,2,Valid)\'");
                    temp198 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2648\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp198, "return of NetrLogonControl2, state S2648");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label56;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S1671\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp199;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,1,Valid)\'");
                    temp199 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2649\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp199, "return of NetrLogonControl2, state S2649");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label56;
                }
                throw new InvalidOperationException("never reached");
            label56:
;
                goto label59;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S510\'");
                bool temp201;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp201);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp201);
                this.Manager.Comment("reaching state \'S999\'");
                int temp204 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker3)));
                if ((temp204 == 0)) {
                    this.Manager.Comment("reaching state \'S1672\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp202;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,2,Valid)\'");
                    temp202 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2650\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp202, "return of NetrLogonControl2, state S2650");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label57;
                }
                if ((temp204 == 1)) {
                    this.Manager.Comment("reaching state \'S1673\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp203;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,Valid)\'");
                    temp203 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2651\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp203, "return of NetrLogonControl2, state S2651");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label57;
                }
                throw new InvalidOperationException("never reached");
            label57:
;
                goto label59;
            }
            if ((temp209 == 2)) {
                this.Manager.Comment("reaching state \'S511\'");
                bool temp205;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp205);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp205);
                this.Manager.Comment("reaching state \'S1000\'");
                int temp208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker5)));
                if ((temp208 == 0)) {
                    this.Manager.Comment("reaching state \'S1674\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp206;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp206 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2652\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp206, "return of NetrLogonControl2, state S2652");
                    this.Manager.Comment("reaching state \'S3390\'");
                    goto label58;
                }
                if ((temp208 == 1)) {
                    this.Manager.Comment("reaching state \'S1675\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp207;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp207 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2653\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp207, "return of NetrLogonControl2, state S2653");
                    this.Manager.Comment("reaching state \'S3391\'");
                    goto label58;
                }
                throw new InvalidOperationException("never reached");
            label58:
;
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S998");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S998");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S999");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S999");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1000");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS122GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1000");
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp210;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp210);
            this.Manager.AddReturn(GetPlatformInfo, null, temp210);
            this.Manager.Comment("reaching state \'S125\'");
            int temp223 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetPlatformChecker2)));
            if ((temp223 == 0)) {
                this.Manager.Comment("reaching state \'S512\'");
                bool temp211;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp211);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp211);
                this.Manager.Comment("reaching state \'S1001\'");
                int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker1)));
                if ((temp214 == 0)) {
                    this.Manager.Comment("reaching state \'S1676\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp212;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,3,Valid)\'");
                    temp212 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2654\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp212, "return of NetrLogonControl2, state S2654");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label60;
                }
                if ((temp214 == 1)) {
                    this.Manager.Comment("reaching state \'S1677\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp213;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,1,Valid)\'");
                    temp213 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2655\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp213, "return of NetrLogonControl2, state S2655");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label60;
                }
                throw new InvalidOperationException("never reached");
            label60:
;
                goto label63;
            }
            if ((temp223 == 1)) {
                this.Manager.Comment("reaching state \'S513\'");
                bool temp215;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp215);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp215);
                this.Manager.Comment("reaching state \'S1002\'");
                int temp218 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker3)));
                if ((temp218 == 0)) {
                    this.Manager.Comment("reaching state \'S1678\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp216;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,2,Valid)\'");
                    temp216 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2656\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp216, "return of NetrLogonControl2, state S2656");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label61;
                }
                if ((temp218 == 1)) {
                    this.Manager.Comment("reaching state \'S1679\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp217;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,Valid)\'");
                    temp217 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2657\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp217, "return of NetrLogonControl2, state S2657");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label61;
                }
                throw new InvalidOperationException("never reached");
            label61:
;
                goto label63;
            }
            if ((temp223 == 2)) {
                this.Manager.Comment("reaching state \'S514\'");
                bool temp219;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp219);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp219);
                this.Manager.Comment("reaching state \'S1003\'");
                int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker5)));
                if ((temp222 == 0)) {
                    this.Manager.Comment("reaching state \'S1680\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp220;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp220 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2658\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp220, "return of NetrLogonControl2, state S2658");
                    this.Manager.Comment("reaching state \'S3392\'");
                    goto label62;
                }
                if ((temp222 == 1)) {
                    this.Manager.Comment("reaching state \'S1681\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp221;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp221 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2659\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp221, "return of NetrLogonControl2, state S2659");
                    this.Manager.Comment("reaching state \'S3393\'");
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1001");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1001");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1002");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1002");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1003");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS124GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1003");
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp224;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp224);
            this.Manager.AddReturn(GetPlatformInfo, null, temp224);
            this.Manager.Comment("reaching state \'S127\'");
            int temp237 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetPlatformChecker2)));
            if ((temp237 == 0)) {
                this.Manager.Comment("reaching state \'S515\'");
                bool temp225;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp225);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp225);
                this.Manager.Comment("reaching state \'S1004\'");
                int temp228 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker1)));
                if ((temp228 == 0)) {
                    this.Manager.Comment("reaching state \'S1682\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp226;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,3,Valid)\'");
                    temp226 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2660\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp226, "return of NetrLogonControl2, state S2660");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label64;
                }
                if ((temp228 == 1)) {
                    this.Manager.Comment("reaching state \'S1683\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp227;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,1,Valid)\'");
                    temp227 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2661\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp227, "return of NetrLogonControl2, state S2661");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label64;
                }
                throw new InvalidOperationException("never reached");
            label64:
;
                goto label67;
            }
            if ((temp237 == 1)) {
                this.Manager.Comment("reaching state \'S516\'");
                bool temp229;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp229);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp229);
                this.Manager.Comment("reaching state \'S1005\'");
                int temp232 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker3)));
                if ((temp232 == 0)) {
                    this.Manager.Comment("reaching state \'S1684\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp230;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,2,Valid)\'");
                    temp230 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2662\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp230, "return of NetrLogonControl2, state S2662");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label65;
                }
                if ((temp232 == 1)) {
                    this.Manager.Comment("reaching state \'S1685\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp231;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,4,Valid)\'");
                    temp231 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2663\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp231, "return of NetrLogonControl2, state S2663");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label65;
                }
                throw new InvalidOperationException("never reached");
            label65:
;
                goto label67;
            }
            if ((temp237 == 2)) {
                this.Manager.Comment("reaching state \'S517\'");
                bool temp233;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp233);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp233);
                this.Manager.Comment("reaching state \'S1006\'");
                int temp236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker5)));
                if ((temp236 == 0)) {
                    this.Manager.Comment("reaching state \'S1686\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp234;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp234 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2664\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp234, "return of NetrLogonControl2, state S2664");
                    this.Manager.Comment("reaching state \'S3394\'");
                    goto label66;
                }
                if ((temp236 == 1)) {
                    this.Manager.Comment("reaching state \'S1687\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp235;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp235 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2665\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp235, "return of NetrLogonControl2, state S2665");
                    this.Manager.Comment("reaching state \'S3395\'");
                    goto label66;
                }
                throw new InvalidOperationException("never reached");
            label66:
;
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1004");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1004");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1005");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1005");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1006");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS126GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1006");
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128");
            this.Manager.Comment("reaching state \'S128\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp238;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp238);
            this.Manager.AddReturn(GetPlatformInfo, null, temp238);
            this.Manager.Comment("reaching state \'S129\'");
            int temp251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetPlatformChecker2)));
            if ((temp251 == 0)) {
                this.Manager.Comment("reaching state \'S518\'");
                bool temp239;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp239);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp239);
                this.Manager.Comment("reaching state \'S1007\'");
                int temp242 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker1)));
                if ((temp242 == 0)) {
                    this.Manager.Comment("reaching state \'S1688\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp240;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,3,Valid)\'");
                    temp240 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2666\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp240, "return of NetrLogonControl2, state S2666");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label68;
                }
                if ((temp242 == 1)) {
                    this.Manager.Comment("reaching state \'S1689\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp241;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,1,Valid)\'");
                    temp241 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2667\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp241, "return of NetrLogonControl2, state S2667");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label68;
                }
                throw new InvalidOperationException("never reached");
            label68:
;
                goto label71;
            }
            if ((temp251 == 1)) {
                this.Manager.Comment("reaching state \'S519\'");
                bool temp243;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp243);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp243);
                this.Manager.Comment("reaching state \'S1008\'");
                int temp246 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker3)));
                if ((temp246 == 0)) {
                    this.Manager.Comment("reaching state \'S1690\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp244;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,1,Valid)\'");
                    temp244 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2668\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp244, "return of NetrLogonControl2, state S2668");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label69;
                }
                if ((temp246 == 1)) {
                    this.Manager.Comment("reaching state \'S1691\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp245;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,4,Valid)\'");
                    temp245 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2669\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp245, "return of NetrLogonControl2, state S2669");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label69;
                }
                throw new InvalidOperationException("never reached");
            label69:
;
                goto label71;
            }
            if ((temp251 == 2)) {
                this.Manager.Comment("reaching state \'S520\'");
                bool temp247;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp247);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp247);
                this.Manager.Comment("reaching state \'S1009\'");
                int temp250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker5)));
                if ((temp250 == 0)) {
                    this.Manager.Comment("reaching state \'S1692\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp248;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp248 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2670\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp248, "return of NetrLogonControl2, state S2670");
                    this.Manager.Comment("reaching state \'S3396\'");
                    goto label70;
                }
                if ((temp250 == 1)) {
                    this.Manager.Comment("reaching state \'S1693\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp249;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp249 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2671\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp249, "return of NetrLogonControl2, state S2671");
                    this.Manager.Comment("reaching state \'S3397\'");
                    goto label70;
                }
                throw new InvalidOperationException("never reached");
            label70:
;
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1007");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1007");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1008");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1008");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1009");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS128GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1009");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp252;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp252);
            this.Manager.AddReturn(GetPlatformInfo, null, temp252);
            this.Manager.Comment("reaching state \'S131\'");
            int temp265 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetPlatformChecker2)));
            if ((temp265 == 0)) {
                this.Manager.Comment("reaching state \'S521\'");
                bool temp253;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp253);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp253);
                this.Manager.Comment("reaching state \'S1010\'");
                int temp256 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker1)));
                if ((temp256 == 0)) {
                    this.Manager.Comment("reaching state \'S1694\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp254;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,Valid)\'");
                    temp254 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2672\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp254, "return of NetrLogonControl2, state S2672");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label72;
                }
                if ((temp256 == 1)) {
                    this.Manager.Comment("reaching state \'S1695\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp255;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,1,Valid)\'");
                    temp255 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2673\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp255, "return of NetrLogonControl2, state S2673");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label72;
                }
                throw new InvalidOperationException("never reached");
            label72:
;
                goto label75;
            }
            if ((temp265 == 1)) {
                this.Manager.Comment("reaching state \'S522\'");
                bool temp257;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp257);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp257);
                this.Manager.Comment("reaching state \'S1011\'");
                int temp260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker3)));
                if ((temp260 == 0)) {
                    this.Manager.Comment("reaching state \'S1696\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp258;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,1,Valid)\'");
                    temp258 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2674\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp258, "return of NetrLogonControl2, state S2674");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label73;
                }
                if ((temp260 == 1)) {
                    this.Manager.Comment("reaching state \'S1697\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp259;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,4,Valid)\'");
                    temp259 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2675\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp259, "return of NetrLogonControl2, state S2675");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label73;
                }
                throw new InvalidOperationException("never reached");
            label73:
;
                goto label75;
            }
            if ((temp265 == 2)) {
                this.Manager.Comment("reaching state \'S523\'");
                bool temp261;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp261);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp261);
                this.Manager.Comment("reaching state \'S1012\'");
                int temp264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker5)));
                if ((temp264 == 0)) {
                    this.Manager.Comment("reaching state \'S1698\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp262;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp262 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2676\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp262, "return of NetrLogonControl2, state S2676");
                    this.Manager.Comment("reaching state \'S3398\'");
                    goto label74;
                }
                if ((temp264 == 1)) {
                    this.Manager.Comment("reaching state \'S1699\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp263;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp263 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2677\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp263, "return of NetrLogonControl2, state S2677");
                    this.Manager.Comment("reaching state \'S3399\'");
                    goto label74;
                }
                throw new InvalidOperationException("never reached");
            label74:
;
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1010");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1010");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1011");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1011");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1012");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS130GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1012");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp266;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp266);
            this.Manager.AddReturn(GetPlatformInfo, null, temp266);
            this.Manager.Comment("reaching state \'S133\'");
            int temp279 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetPlatformChecker2)));
            if ((temp279 == 0)) {
                this.Manager.Comment("reaching state \'S524\'");
                bool temp267;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp267);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp267);
                this.Manager.Comment("reaching state \'S1013\'");
                int temp270 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker1)));
                if ((temp270 == 0)) {
                    this.Manager.Comment("reaching state \'S1700\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp268;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,4,Valid)\'");
                    temp268 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2678\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp268, "return of NetrLogonControl2, state S2678");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label76;
                }
                if ((temp270 == 1)) {
                    this.Manager.Comment("reaching state \'S1701\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp269;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,1,Valid)\'");
                    temp269 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2679\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp269, "return of NetrLogonControl2, state S2679");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label76;
                }
                throw new InvalidOperationException("never reached");
            label76:
;
                goto label79;
            }
            if ((temp279 == 1)) {
                this.Manager.Comment("reaching state \'S525\'");
                bool temp271;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp271);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp271);
                this.Manager.Comment("reaching state \'S1014\'");
                int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker3)));
                if ((temp274 == 0)) {
                    this.Manager.Comment("reaching state \'S1702\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp272;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,1,Valid)\'");
                    temp272 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2680\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp272, "return of NetrLogonControl2, state S2680");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label77;
                }
                if ((temp274 == 1)) {
                    this.Manager.Comment("reaching state \'S1703\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp273;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,2,Valid)\'");
                    temp273 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2681\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp273, "return of NetrLogonControl2, state S2681");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label77;
                }
                throw new InvalidOperationException("never reached");
            label77:
;
                goto label79;
            }
            if ((temp279 == 2)) {
                this.Manager.Comment("reaching state \'S526\'");
                bool temp275;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp275);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp275);
                this.Manager.Comment("reaching state \'S1015\'");
                int temp278 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker5)));
                if ((temp278 == 0)) {
                    this.Manager.Comment("reaching state \'S1704\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp276;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp276 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2682\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp276, "return of NetrLogonControl2, state S2682");
                    this.Manager.Comment("reaching state \'S3400\'");
                    goto label78;
                }
                if ((temp278 == 1)) {
                    this.Manager.Comment("reaching state \'S1705\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp277;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp277 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2683\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp277, "return of NetrLogonControl2, state S2683");
                    this.Manager.Comment("reaching state \'S3401\'");
                    goto label78;
                }
                throw new InvalidOperationException("never reached");
            label78:
;
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1013");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1013");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1014");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1014");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1015");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS132GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1015");
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp280;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp280);
            this.Manager.AddReturn(GetPlatformInfo, null, temp280);
            this.Manager.Comment("reaching state \'S135\'");
            int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetPlatformChecker2)));
            if ((temp293 == 0)) {
                this.Manager.Comment("reaching state \'S527\'");
                bool temp281;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp281);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp281);
                this.Manager.Comment("reaching state \'S1016\'");
                int temp284 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker1)));
                if ((temp284 == 0)) {
                    this.Manager.Comment("reaching state \'S1706\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp282;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,4,Valid)\'");
                    temp282 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2684\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp282, "return of NetrLogonControl2, state S2684");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label80;
                }
                if ((temp284 == 1)) {
                    this.Manager.Comment("reaching state \'S1707\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp283;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,Valid)\'");
                    temp283 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2685\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp283, "return of NetrLogonControl2, state S2685");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label80;
                }
                throw new InvalidOperationException("never reached");
            label80:
;
                goto label83;
            }
            if ((temp293 == 1)) {
                this.Manager.Comment("reaching state \'S528\'");
                bool temp285;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp285);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp285);
                this.Manager.Comment("reaching state \'S1017\'");
                int temp288 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker3)));
                if ((temp288 == 0)) {
                    this.Manager.Comment("reaching state \'S1708\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp286;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,2,Valid)\'");
                    temp286 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2686\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp286, "return of NetrLogonControl2, state S2686");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label81;
                }
                if ((temp288 == 1)) {
                    this.Manager.Comment("reaching state \'S1709\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp287;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,2,Valid)\'");
                    temp287 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2687\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp287, "return of NetrLogonControl2, state S2687");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label81;
                }
                throw new InvalidOperationException("never reached");
            label81:
;
                goto label83;
            }
            if ((temp293 == 2)) {
                this.Manager.Comment("reaching state \'S529\'");
                bool temp289;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp289);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp289);
                this.Manager.Comment("reaching state \'S1018\'");
                int temp292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker5)));
                if ((temp292 == 0)) {
                    this.Manager.Comment("reaching state \'S1710\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp290;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp290 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2688\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp290, "return of NetrLogonControl2, state S2688");
                    this.Manager.Comment("reaching state \'S3402\'");
                    goto label82;
                }
                if ((temp292 == 1)) {
                    this.Manager.Comment("reaching state \'S1711\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp291;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp291 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2689\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp291, "return of NetrLogonControl2, state S2689");
                    this.Manager.Comment("reaching state \'S3403\'");
                    goto label82;
                }
                throw new InvalidOperationException("never reached");
            label82:
;
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1016");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1016");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1017");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1017");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1018");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS134GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1018");
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp294;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp294);
            this.Manager.AddReturn(GetPlatformInfo, null, temp294);
            this.Manager.Comment("reaching state \'S137\'");
            int temp307 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetPlatformChecker2)));
            if ((temp307 == 0)) {
                this.Manager.Comment("reaching state \'S530\'");
                bool temp295;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp295);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp295);
                this.Manager.Comment("reaching state \'S1019\'");
                int temp298 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker1)));
                if ((temp298 == 0)) {
                    this.Manager.Comment("reaching state \'S1712\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp296;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,4,Valid)\'");
                    temp296 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2690\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp296, "return of NetrLogonControl2, state S2690");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label84;
                }
                if ((temp298 == 1)) {
                    this.Manager.Comment("reaching state \'S1713\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp297;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,4,Valid)\'");
                    temp297 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2691\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp297, "return of NetrLogonControl2, state S2691");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label84;
                }
                throw new InvalidOperationException("never reached");
            label84:
;
                goto label87;
            }
            if ((temp307 == 1)) {
                this.Manager.Comment("reaching state \'S531\'");
                bool temp299;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp299);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp299);
                this.Manager.Comment("reaching state \'S1020\'");
                int temp302 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker3)));
                if ((temp302 == 0)) {
                    this.Manager.Comment("reaching state \'S1714\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp300;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,3,Valid)\'");
                    temp300 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2692\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp300, "return of NetrLogonControl2, state S2692");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label85;
                }
                if ((temp302 == 1)) {
                    this.Manager.Comment("reaching state \'S1715\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp301;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,2,Valid)\'");
                    temp301 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2693\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp301, "return of NetrLogonControl2, state S2693");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label85;
                }
                throw new InvalidOperationException("never reached");
            label85:
;
                goto label87;
            }
            if ((temp307 == 2)) {
                this.Manager.Comment("reaching state \'S532\'");
                bool temp303;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp303);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp303);
                this.Manager.Comment("reaching state \'S1021\'");
                int temp306 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker5)));
                if ((temp306 == 0)) {
                    this.Manager.Comment("reaching state \'S1716\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp304;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp304 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2694\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp304, "return of NetrLogonControl2, state S2694");
                    this.Manager.Comment("reaching state \'S3404\'");
                    goto label86;
                }
                if ((temp306 == 1)) {
                    this.Manager.Comment("reaching state \'S1717\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp305;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp305 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2695\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp305, "return of NetrLogonControl2, state S2695");
                    this.Manager.Comment("reaching state \'S3405\'");
                    goto label86;
                }
                throw new InvalidOperationException("never reached");
            label86:
;
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1019");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1019");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1020");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1020");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1021");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS136GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1021");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp308;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp308);
            this.Manager.AddReturn(GetPlatformInfo, null, temp308);
            this.Manager.Comment("reaching state \'S139\'");
            int temp321 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetPlatformChecker2)));
            if ((temp321 == 0)) {
                this.Manager.Comment("reaching state \'S533\'");
                bool temp309;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp309);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp309);
                this.Manager.Comment("reaching state \'S1022\'");
                int temp312 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker1)));
                if ((temp312 == 0)) {
                    this.Manager.Comment("reaching state \'S1718\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp310;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,4,Valid)\'");
                    temp310 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2696\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp310, "return of NetrLogonControl2, state S2696");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label88;
                }
                if ((temp312 == 1)) {
                    this.Manager.Comment("reaching state \'S1719\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp311;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,Valid)\'");
                    temp311 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2697\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp311, "return of NetrLogonControl2, state S2697");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label88;
                }
                throw new InvalidOperationException("never reached");
            label88:
;
                goto label91;
            }
            if ((temp321 == 1)) {
                this.Manager.Comment("reaching state \'S534\'");
                bool temp313;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp313);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp313);
                this.Manager.Comment("reaching state \'S1023\'");
                int temp316 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker3)));
                if ((temp316 == 0)) {
                    this.Manager.Comment("reaching state \'S1720\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp314;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,1,Valid)\'");
                    temp314 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2698\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp314, "return of NetrLogonControl2, state S2698");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label89;
                }
                if ((temp316 == 1)) {
                    this.Manager.Comment("reaching state \'S1721\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp315;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,2,Valid)\'");
                    temp315 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104100");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2699\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp315, "return of NetrLogonControl2, state S2699");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label89;
                }
                throw new InvalidOperationException("never reached");
            label89:
;
                goto label91;
            }
            if ((temp321 == 2)) {
                this.Manager.Comment("reaching state \'S535\'");
                bool temp317;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp317);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp317);
                this.Manager.Comment("reaching state \'S1024\'");
                int temp320 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker5)));
                if ((temp320 == 0)) {
                    this.Manager.Comment("reaching state \'S1722\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp318;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp318 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2700\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp318, "return of NetrLogonControl2, state S2700");
                    this.Manager.Comment("reaching state \'S3406\'");
                    goto label90;
                }
                if ((temp320 == 1)) {
                    this.Manager.Comment("reaching state \'S1723\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp319;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp319 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2701\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp319, "return of NetrLogonControl2, state S2701");
                    this.Manager.Comment("reaching state \'S3407\'");
                    goto label90;
                }
                throw new InvalidOperationException("never reached");
            label90:
;
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1022");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1022");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1023");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1023");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1024");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS138GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1024");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14");
            this.Manager.Comment("reaching state \'S14\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp322;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp322);
            this.Manager.AddReturn(GetPlatformInfo, null, temp322);
            this.Manager.Comment("reaching state \'S15\'");
            int temp335 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetPlatformChecker2)));
            if ((temp335 == 0)) {
                this.Manager.Comment("reaching state \'S347\'");
                bool temp323;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp323);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp323);
                this.Manager.Comment("reaching state \'S836\'");
                int temp326 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker1)));
                if ((temp326 == 0)) {
                    this.Manager.Comment("reaching state \'S1346\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp324;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,NoValidDomainNameContained)\'" +
                            "");
                    temp324 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2324\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp324, "return of NetrLogonControl2, state S2324");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label92;
                }
                if ((temp326 == 1)) {
                    this.Manager.Comment("reaching state \'S1347\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp325;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,1,Valid)\'");
                    temp325 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2325\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp325, "return of NetrLogonControl2, state S2325");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label92;
                }
                throw new InvalidOperationException("never reached");
            label92:
;
                goto label95;
            }
            if ((temp335 == 1)) {
                this.Manager.Comment("reaching state \'S348\'");
                bool temp327;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp327);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp327);
                this.Manager.Comment("reaching state \'S837\'");
                int temp330 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker3)));
                if ((temp330 == 0)) {
                    this.Manager.Comment("reaching state \'S1348\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp328;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,NoValidDomainNameContained)\'" +
                            "");
                    temp328 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2326\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp328, "return of NetrLogonControl2, state S2326");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label93;
                }
                if ((temp330 == 1)) {
                    this.Manager.Comment("reaching state \'S1349\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp329;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,NoValidDomainNameContained)\'" +
                            "");
                    temp329 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2327\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp329, "return of NetrLogonControl2, state S2327");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label93;
                }
                throw new InvalidOperationException("never reached");
            label93:
;
                goto label95;
            }
            if ((temp335 == 2)) {
                this.Manager.Comment("reaching state \'S349\'");
                bool temp331;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp331);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp331);
                this.Manager.Comment("reaching state \'S838\'");
                int temp334 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker5)));
                if ((temp334 == 0)) {
                    this.Manager.Comment("reaching state \'S1350\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp332;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp332 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2328\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp332, "return of NetrLogonControl2, state S2328");
                    this.Manager.Comment("reaching state \'S3282\'");
                    goto label94;
                }
                if ((temp334 == 1)) {
                    this.Manager.Comment("reaching state \'S1351\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp333;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp333 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2329\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp333, "return of NetrLogonControl2, state S2329");
                    this.Manager.Comment("reaching state \'S3283\'");
                    goto label94;
                }
                throw new InvalidOperationException("never reached");
            label94:
;
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S836");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S836");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S837");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S837");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S15");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S838");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS14GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S838");
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp336;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp336);
            this.Manager.AddReturn(GetPlatformInfo, null, temp336);
            this.Manager.Comment("reaching state \'S141\'");
            int temp349 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetPlatformChecker2)));
            if ((temp349 == 0)) {
                this.Manager.Comment("reaching state \'S536\'");
                bool temp337;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp337);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp337);
                this.Manager.Comment("reaching state \'S1025\'");
                int temp340 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker1)));
                if ((temp340 == 0)) {
                    this.Manager.Comment("reaching state \'S1724\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp338;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,4,Valid)\'");
                    temp338 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2702\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp338, "return of NetrLogonControl2, state S2702");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label96;
                }
                if ((temp340 == 1)) {
                    this.Manager.Comment("reaching state \'S1725\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp339;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,Valid)\'");
                    temp339 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2703\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp339, "return of NetrLogonControl2, state S2703");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label96;
                }
                throw new InvalidOperationException("never reached");
            label96:
;
                goto label99;
            }
            if ((temp349 == 1)) {
                this.Manager.Comment("reaching state \'S537\'");
                bool temp341;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp341);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp341);
                this.Manager.Comment("reaching state \'S1026\'");
                int temp344 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker3)));
                if ((temp344 == 0)) {
                    this.Manager.Comment("reaching state \'S1726\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp342;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,2,Valid)\'");
                    temp342 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2704\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp342, "return of NetrLogonControl2, state S2704");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label97;
                }
                if ((temp344 == 1)) {
                    this.Manager.Comment("reaching state \'S1727\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp343;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,2,Valid)\'");
                    temp343 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2705\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp343, "return of NetrLogonControl2, state S2705");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label97;
                }
                throw new InvalidOperationException("never reached");
            label97:
;
                goto label99;
            }
            if ((temp349 == 2)) {
                this.Manager.Comment("reaching state \'S538\'");
                bool temp345;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp345);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp345);
                this.Manager.Comment("reaching state \'S1027\'");
                int temp348 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker5)));
                if ((temp348 == 0)) {
                    this.Manager.Comment("reaching state \'S1728\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp346;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp346 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2706\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp346, "return of NetrLogonControl2, state S2706");
                    this.Manager.Comment("reaching state \'S3408\'");
                    goto label98;
                }
                if ((temp348 == 1)) {
                    this.Manager.Comment("reaching state \'S1729\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp347;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp347 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2707\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp347, "return of NetrLogonControl2, state S2707");
                    this.Manager.Comment("reaching state \'S3409\'");
                    goto label98;
                }
                throw new InvalidOperationException("never reached");
            label98:
;
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1025");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1025");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1026");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1026");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1027");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS140GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1027");
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp350;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp350);
            this.Manager.AddReturn(GetPlatformInfo, null, temp350);
            this.Manager.Comment("reaching state \'S143\'");
            int temp363 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetPlatformChecker2)));
            if ((temp363 == 0)) {
                this.Manager.Comment("reaching state \'S539\'");
                bool temp351;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp351);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp351);
                this.Manager.Comment("reaching state \'S1028\'");
                int temp354 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker1)));
                if ((temp354 == 0)) {
                    this.Manager.Comment("reaching state \'S1730\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp352;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,4,Valid)\'");
                    temp352 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2708\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp352, "return of NetrLogonControl2, state S2708");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label100;
                }
                if ((temp354 == 1)) {
                    this.Manager.Comment("reaching state \'S1731\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp353;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,Valid)\'");
                    temp353 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2709\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp353, "return of NetrLogonControl2, state S2709");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label100;
                }
                throw new InvalidOperationException("never reached");
            label100:
;
                goto label103;
            }
            if ((temp363 == 1)) {
                this.Manager.Comment("reaching state \'S540\'");
                bool temp355;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp355);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp355);
                this.Manager.Comment("reaching state \'S1029\'");
                int temp358 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker3)));
                if ((temp358 == 0)) {
                    this.Manager.Comment("reaching state \'S1732\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp356;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,3,Valid)\'");
                    temp356 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2710\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp356, "return of NetrLogonControl2, state S2710");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label101;
                }
                if ((temp358 == 1)) {
                    this.Manager.Comment("reaching state \'S1733\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp357;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,2,Valid)\'");
                    temp357 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2711\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp357, "return of NetrLogonControl2, state S2711");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label101;
                }
                throw new InvalidOperationException("never reached");
            label101:
;
                goto label103;
            }
            if ((temp363 == 2)) {
                this.Manager.Comment("reaching state \'S541\'");
                bool temp359;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp359);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp359);
                this.Manager.Comment("reaching state \'S1030\'");
                int temp362 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker5)));
                if ((temp362 == 0)) {
                    this.Manager.Comment("reaching state \'S1734\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp360;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp360 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2712\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp360, "return of NetrLogonControl2, state S2712");
                    this.Manager.Comment("reaching state \'S3410\'");
                    goto label102;
                }
                if ((temp362 == 1)) {
                    this.Manager.Comment("reaching state \'S1735\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp361;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp361 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2713\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp361, "return of NetrLogonControl2, state S2713");
                    this.Manager.Comment("reaching state \'S3411\'");
                    goto label102;
                }
                throw new InvalidOperationException("never reached");
            label102:
;
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1028");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1028");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1029");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1029");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1030");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS142GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1030");
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144");
            this.Manager.Comment("reaching state \'S144\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp364;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp364);
            this.Manager.AddReturn(GetPlatformInfo, null, temp364);
            this.Manager.Comment("reaching state \'S145\'");
            int temp377 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetPlatformChecker2)));
            if ((temp377 == 0)) {
                this.Manager.Comment("reaching state \'S542\'");
                bool temp365;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp365);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp365);
                this.Manager.Comment("reaching state \'S1031\'");
                int temp368 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker1)));
                if ((temp368 == 0)) {
                    this.Manager.Comment("reaching state \'S1736\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp366;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,1,Valid)\'");
                    temp366 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2714\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp366, "return of NetrLogonControl2, state S2714");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label104;
                }
                if ((temp368 == 1)) {
                    this.Manager.Comment("reaching state \'S1737\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp367;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,4,Valid)\'");
                    temp367 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2715\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp367, "return of NetrLogonControl2, state S2715");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label104;
                }
                throw new InvalidOperationException("never reached");
            label104:
;
                goto label107;
            }
            if ((temp377 == 1)) {
                this.Manager.Comment("reaching state \'S543\'");
                bool temp369;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp369);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp369);
                this.Manager.Comment("reaching state \'S1032\'");
                int temp372 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker3)));
                if ((temp372 == 0)) {
                    this.Manager.Comment("reaching state \'S1738\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp370;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,1,Valid)\'");
                    temp370 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2716\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp370, "return of NetrLogonControl2, state S2716");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label105;
                }
                if ((temp372 == 1)) {
                    this.Manager.Comment("reaching state \'S1739\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp371;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,2,Valid)\'");
                    temp371 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2717\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp371, "return of NetrLogonControl2, state S2717");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label105;
                }
                throw new InvalidOperationException("never reached");
            label105:
;
                goto label107;
            }
            if ((temp377 == 2)) {
                this.Manager.Comment("reaching state \'S544\'");
                bool temp373;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp373);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp373);
                this.Manager.Comment("reaching state \'S1033\'");
                int temp376 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker5)));
                if ((temp376 == 0)) {
                    this.Manager.Comment("reaching state \'S1740\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp374;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp374 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2718\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp374, "return of NetrLogonControl2, state S2718");
                    this.Manager.Comment("reaching state \'S3412\'");
                    goto label106;
                }
                if ((temp376 == 1)) {
                    this.Manager.Comment("reaching state \'S1741\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp375;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp375 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2719\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp375, "return of NetrLogonControl2, state S2719");
                    this.Manager.Comment("reaching state \'S3413\'");
                    goto label106;
                }
                throw new InvalidOperationException("never reached");
            label106:
;
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1031");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1031");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1032");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1032");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1033");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS144GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1033");
        }
        #endregion
        
        #region Test Starting in S146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp378;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp378);
            this.Manager.AddReturn(GetPlatformInfo, null, temp378);
            this.Manager.Comment("reaching state \'S147\'");
            int temp391 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetPlatformChecker2)));
            if ((temp391 == 0)) {
                this.Manager.Comment("reaching state \'S545\'");
                bool temp379;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp379);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp379);
                this.Manager.Comment("reaching state \'S1034\'");
                int temp382 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker1)));
                if ((temp382 == 0)) {
                    this.Manager.Comment("reaching state \'S1742\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp380;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,1,Valid)\'");
                    temp380 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2720\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp380, "return of NetrLogonControl2, state S2720");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label108;
                }
                if ((temp382 == 1)) {
                    this.Manager.Comment("reaching state \'S1743\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp381;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,4,Valid)\'");
                    temp381 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2721\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp381, "return of NetrLogonControl2, state S2721");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label108;
                }
                throw new InvalidOperationException("never reached");
            label108:
;
                goto label111;
            }
            if ((temp391 == 1)) {
                this.Manager.Comment("reaching state \'S546\'");
                bool temp383;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp383);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp383);
                this.Manager.Comment("reaching state \'S1035\'");
                int temp386 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker3)));
                if ((temp386 == 0)) {
                    this.Manager.Comment("reaching state \'S1744\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp384;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,1,Valid)\'");
                    temp384 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2722\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp384, "return of NetrLogonControl2, state S2722");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label109;
                }
                if ((temp386 == 1)) {
                    this.Manager.Comment("reaching state \'S1745\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp385;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,2,Valid)\'");
                    temp385 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2723\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp385, "return of NetrLogonControl2, state S2723");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label109;
                }
                throw new InvalidOperationException("never reached");
            label109:
;
                goto label111;
            }
            if ((temp391 == 2)) {
                this.Manager.Comment("reaching state \'S547\'");
                bool temp387;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp387);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp387);
                this.Manager.Comment("reaching state \'S1036\'");
                int temp390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker5)));
                if ((temp390 == 0)) {
                    this.Manager.Comment("reaching state \'S1746\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp388;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp388 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2724\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp388, "return of NetrLogonControl2, state S2724");
                    this.Manager.Comment("reaching state \'S3414\'");
                    goto label110;
                }
                if ((temp390 == 1)) {
                    this.Manager.Comment("reaching state \'S1747\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp389;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp389 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2725\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp389, "return of NetrLogonControl2, state S2725");
                    this.Manager.Comment("reaching state \'S3415\'");
                    goto label110;
                }
                throw new InvalidOperationException("never reached");
            label110:
;
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1034");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1034");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1035");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1035");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1036");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS146GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1036");
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148");
            this.Manager.Comment("reaching state \'S148\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp392;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp392);
            this.Manager.AddReturn(GetPlatformInfo, null, temp392);
            this.Manager.Comment("reaching state \'S149\'");
            int temp405 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetPlatformChecker2)));
            if ((temp405 == 0)) {
                this.Manager.Comment("reaching state \'S548\'");
                bool temp393;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp393);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp393);
                this.Manager.Comment("reaching state \'S1037\'");
                int temp396 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker1)));
                if ((temp396 == 0)) {
                    this.Manager.Comment("reaching state \'S1748\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp394;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,1,Valid)\'");
                    temp394 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2726\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp394, "return of NetrLogonControl2, state S2726");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label112;
                }
                if ((temp396 == 1)) {
                    this.Manager.Comment("reaching state \'S1749\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp395;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,4,Valid)\'");
                    temp395 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2727\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp395, "return of NetrLogonControl2, state S2727");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label112;
                }
                throw new InvalidOperationException("never reached");
            label112:
;
                goto label115;
            }
            if ((temp405 == 1)) {
                this.Manager.Comment("reaching state \'S549\'");
                bool temp397;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp397);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp397);
                this.Manager.Comment("reaching state \'S1038\'");
                int temp400 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker3)));
                if ((temp400 == 0)) {
                    this.Manager.Comment("reaching state \'S1750\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp398;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,Valid)\'");
                    temp398 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2728\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp398, "return of NetrLogonControl2, state S2728");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label113;
                }
                if ((temp400 == 1)) {
                    this.Manager.Comment("reaching state \'S1751\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp399;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp399 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2729\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp399, "return of NetrLogonControl2, state S2729");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label113;
                }
                throw new InvalidOperationException("never reached");
            label113:
;
                goto label115;
            }
            if ((temp405 == 2)) {
                this.Manager.Comment("reaching state \'S550\'");
                bool temp401;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp401);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp401);
                this.Manager.Comment("reaching state \'S1039\'");
                int temp404 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker5)));
                if ((temp404 == 0)) {
                    this.Manager.Comment("reaching state \'S1752\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp402;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp402 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2730\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp402, "return of NetrLogonControl2, state S2730");
                    this.Manager.Comment("reaching state \'S3416\'");
                    goto label114;
                }
                if ((temp404 == 1)) {
                    this.Manager.Comment("reaching state \'S1753\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp403;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp403 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2731\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp403, "return of NetrLogonControl2, state S2731");
                    this.Manager.Comment("reaching state \'S3417\'");
                    goto label114;
                }
                throw new InvalidOperationException("never reached");
            label114:
;
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1037");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1037");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1038");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1038");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1039");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS148GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1039");
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150");
            this.Manager.Comment("reaching state \'S150\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp406;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp406);
            this.Manager.AddReturn(GetPlatformInfo, null, temp406);
            this.Manager.Comment("reaching state \'S151\'");
            int temp419 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetPlatformChecker2)));
            if ((temp419 == 0)) {
                this.Manager.Comment("reaching state \'S551\'");
                bool temp407;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp407);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp407);
                this.Manager.Comment("reaching state \'S1040\'");
                int temp410 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker1)));
                if ((temp410 == 0)) {
                    this.Manager.Comment("reaching state \'S1754\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp408;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,1,Valid)\'");
                    temp408 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2732\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp408, "return of NetrLogonControl2, state S2732");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label116;
                }
                if ((temp410 == 1)) {
                    this.Manager.Comment("reaching state \'S1755\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp409;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,4,Valid)\'");
                    temp409 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2733\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp409, "return of NetrLogonControl2, state S2733");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label116;
                }
                throw new InvalidOperationException("never reached");
            label116:
;
                goto label119;
            }
            if ((temp419 == 1)) {
                this.Manager.Comment("reaching state \'S552\'");
                bool temp411;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp411);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp411);
                this.Manager.Comment("reaching state \'S1041\'");
                int temp414 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker3)));
                if ((temp414 == 0)) {
                    this.Manager.Comment("reaching state \'S1756\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp412;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,4,Valid)\'");
                    temp412 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2734\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp412, "return of NetrLogonControl2, state S2734");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label117;
                }
                if ((temp414 == 1)) {
                    this.Manager.Comment("reaching state \'S1757\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp413;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,3,Valid)\'");
                    temp413 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2735\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp413, "return of NetrLogonControl2, state S2735");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label117;
                }
                throw new InvalidOperationException("never reached");
            label117:
;
                goto label119;
            }
            if ((temp419 == 2)) {
                this.Manager.Comment("reaching state \'S553\'");
                bool temp415;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp415);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp415);
                this.Manager.Comment("reaching state \'S1042\'");
                int temp418 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker5)));
                if ((temp418 == 0)) {
                    this.Manager.Comment("reaching state \'S1758\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp416;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp416 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2736\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp416, "return of NetrLogonControl2, state S2736");
                    this.Manager.Comment("reaching state \'S3418\'");
                    goto label118;
                }
                if ((temp418 == 1)) {
                    this.Manager.Comment("reaching state \'S1759\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp417;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp417 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2737\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp417, "return of NetrLogonControl2, state S2737");
                    this.Manager.Comment("reaching state \'S3419\'");
                    goto label118;
                }
                throw new InvalidOperationException("never reached");
            label118:
;
                goto label119;
            }
            throw new InvalidOperationException("never reached");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1040");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1040");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1041");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1041");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1042");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS150GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1042");
        }
        #endregion
        
        #region Test Starting in S152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152");
            this.Manager.Comment("reaching state \'S152\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp420;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp420);
            this.Manager.AddReturn(GetPlatformInfo, null, temp420);
            this.Manager.Comment("reaching state \'S153\'");
            int temp433 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetPlatformChecker2)));
            if ((temp433 == 0)) {
                this.Manager.Comment("reaching state \'S554\'");
                bool temp421;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp421);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp421);
                this.Manager.Comment("reaching state \'S1043\'");
                int temp424 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker1)));
                if ((temp424 == 0)) {
                    this.Manager.Comment("reaching state \'S1760\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp422;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,1,Valid)\'");
                    temp422 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2738\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp422, "return of NetrLogonControl2, state S2738");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label120;
                }
                if ((temp424 == 1)) {
                    this.Manager.Comment("reaching state \'S1761\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp423;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp423 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2739\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp423, "return of NetrLogonControl2, state S2739");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label120;
                }
                throw new InvalidOperationException("never reached");
            label120:
;
                goto label123;
            }
            if ((temp433 == 1)) {
                this.Manager.Comment("reaching state \'S555\'");
                bool temp425;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp425);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp425);
                this.Manager.Comment("reaching state \'S1044\'");
                int temp428 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker3)));
                if ((temp428 == 0)) {
                    this.Manager.Comment("reaching state \'S1762\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp426;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,4,Valid)\'");
                    temp426 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2740\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp426, "return of NetrLogonControl2, state S2740");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label121;
                }
                if ((temp428 == 1)) {
                    this.Manager.Comment("reaching state \'S1763\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp427;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,3,Valid)\'");
                    temp427 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2741\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp427, "return of NetrLogonControl2, state S2741");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label121;
                }
                throw new InvalidOperationException("never reached");
            label121:
;
                goto label123;
            }
            if ((temp433 == 2)) {
                this.Manager.Comment("reaching state \'S556\'");
                bool temp429;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp429);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp429);
                this.Manager.Comment("reaching state \'S1045\'");
                int temp432 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker5)));
                if ((temp432 == 0)) {
                    this.Manager.Comment("reaching state \'S1764\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp430;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp430 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2742\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp430, "return of NetrLogonControl2, state S2742");
                    this.Manager.Comment("reaching state \'S3420\'");
                    goto label122;
                }
                if ((temp432 == 1)) {
                    this.Manager.Comment("reaching state \'S1765\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp431;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp431 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2743\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp431, "return of NetrLogonControl2, state S2743");
                    this.Manager.Comment("reaching state \'S3421\'");
                    goto label122;
                }
                throw new InvalidOperationException("never reached");
            label122:
;
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1043");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1043");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1044");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1044");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1045");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS152GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1045");
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154");
            this.Manager.Comment("reaching state \'S154\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp434;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp434);
            this.Manager.AddReturn(GetPlatformInfo, null, temp434);
            this.Manager.Comment("reaching state \'S155\'");
            int temp447 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetPlatformChecker2)));
            if ((temp447 == 0)) {
                this.Manager.Comment("reaching state \'S557\'");
                bool temp435;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp435);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp435);
                this.Manager.Comment("reaching state \'S1046\'");
                int temp438 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker1)));
                if ((temp438 == 0)) {
                    this.Manager.Comment("reaching state \'S1766\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp436;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,1,Valid)\'");
                    temp436 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2744\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp436, "return of NetrLogonControl2, state S2744");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label124;
                }
                if ((temp438 == 1)) {
                    this.Manager.Comment("reaching state \'S1767\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp437;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,4,Valid)\'");
                    temp437 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2745\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp437, "return of NetrLogonControl2, state S2745");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label124;
                }
                throw new InvalidOperationException("never reached");
            label124:
;
                goto label127;
            }
            if ((temp447 == 1)) {
                this.Manager.Comment("reaching state \'S558\'");
                bool temp439;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp439);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp439);
                this.Manager.Comment("reaching state \'S1047\'");
                int temp442 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker3)));
                if ((temp442 == 0)) {
                    this.Manager.Comment("reaching state \'S1768\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp440;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,4,Valid)\'");
                    temp440 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2746\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp440, "return of NetrLogonControl2, state S2746");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label125;
                }
                if ((temp442 == 1)) {
                    this.Manager.Comment("reaching state \'S1769\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp441;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,3,Valid)\'");
                    temp441 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2747\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp441, "return of NetrLogonControl2, state S2747");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label125;
                }
                throw new InvalidOperationException("never reached");
            label125:
;
                goto label127;
            }
            if ((temp447 == 2)) {
                this.Manager.Comment("reaching state \'S559\'");
                bool temp443;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp443);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp443);
                this.Manager.Comment("reaching state \'S1048\'");
                int temp446 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker5)));
                if ((temp446 == 0)) {
                    this.Manager.Comment("reaching state \'S1770\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp444;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp444 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2748\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp444, "return of NetrLogonControl2, state S2748");
                    this.Manager.Comment("reaching state \'S3422\'");
                    goto label126;
                }
                if ((temp446 == 1)) {
                    this.Manager.Comment("reaching state \'S1771\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp445;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp445 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2749\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp445, "return of NetrLogonControl2, state S2749");
                    this.Manager.Comment("reaching state \'S3423\'");
                    goto label126;
                }
                throw new InvalidOperationException("never reached");
            label126:
;
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1046");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1046");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1047");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1047");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1048");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS154GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1048");
        }
        #endregion
        
        #region Test Starting in S156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156");
            this.Manager.Comment("reaching state \'S156\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp448;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp448);
            this.Manager.AddReturn(GetPlatformInfo, null, temp448);
            this.Manager.Comment("reaching state \'S157\'");
            int temp461 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetPlatformChecker2)));
            if ((temp461 == 0)) {
                this.Manager.Comment("reaching state \'S560\'");
                bool temp449;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp449);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp449);
                this.Manager.Comment("reaching state \'S1049\'");
                int temp452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker1)));
                if ((temp452 == 0)) {
                    this.Manager.Comment("reaching state \'S1772\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp450;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,Valid)\'");
                    temp450 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2750\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp450, "return of NetrLogonControl2, state S2750");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label128;
                }
                if ((temp452 == 1)) {
                    this.Manager.Comment("reaching state \'S1773\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp451;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,1,Valid)\'");
                    temp451 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2751\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp451, "return of NetrLogonControl2, state S2751");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label128;
                }
                throw new InvalidOperationException("never reached");
            label128:
;
                goto label131;
            }
            if ((temp461 == 1)) {
                this.Manager.Comment("reaching state \'S561\'");
                bool temp453;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp453);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp453);
                this.Manager.Comment("reaching state \'S1050\'");
                int temp456 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker3)));
                if ((temp456 == 0)) {
                    this.Manager.Comment("reaching state \'S1774\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp454;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,4,Valid)\'");
                    temp454 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2752\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp454, "return of NetrLogonControl2, state S2752");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label129;
                }
                if ((temp456 == 1)) {
                    this.Manager.Comment("reaching state \'S1775\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp455;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,Valid)\'");
                    temp455 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2753\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp455, "return of NetrLogonControl2, state S2753");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label129;
                }
                throw new InvalidOperationException("never reached");
            label129:
;
                goto label131;
            }
            if ((temp461 == 2)) {
                this.Manager.Comment("reaching state \'S562\'");
                bool temp457;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp457);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp457);
                this.Manager.Comment("reaching state \'S1051\'");
                int temp460 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker5)));
                if ((temp460 == 0)) {
                    this.Manager.Comment("reaching state \'S1776\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp458;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp458 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2754\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp458, "return of NetrLogonControl2, state S2754");
                    this.Manager.Comment("reaching state \'S3424\'");
                    goto label130;
                }
                if ((temp460 == 1)) {
                    this.Manager.Comment("reaching state \'S1777\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp459;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp459 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2755\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp459, "return of NetrLogonControl2, state S2755");
                    this.Manager.Comment("reaching state \'S3425\'");
                    goto label130;
                }
                throw new InvalidOperationException("never reached");
            label130:
;
                goto label131;
            }
            throw new InvalidOperationException("never reached");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1049");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1049");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1050");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1050");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1051");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS156GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1051");
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158");
            this.Manager.Comment("reaching state \'S158\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp462;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp462);
            this.Manager.AddReturn(GetPlatformInfo, null, temp462);
            this.Manager.Comment("reaching state \'S159\'");
            int temp475 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetPlatformChecker2)));
            if ((temp475 == 0)) {
                this.Manager.Comment("reaching state \'S563\'");
                bool temp463;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp463);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp463);
                this.Manager.Comment("reaching state \'S1052\'");
                int temp466 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker1)));
                if ((temp466 == 0)) {
                    this.Manager.Comment("reaching state \'S1778\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp464;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,Valid)\'");
                    temp464 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2756\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp464, "return of NetrLogonControl2, state S2756");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label132;
                }
                if ((temp466 == 1)) {
                    this.Manager.Comment("reaching state \'S1779\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp465;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,Valid)\'");
                    temp465 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2757\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp465, "return of NetrLogonControl2, state S2757");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label132;
                }
                throw new InvalidOperationException("never reached");
            label132:
;
                goto label135;
            }
            if ((temp475 == 1)) {
                this.Manager.Comment("reaching state \'S564\'");
                bool temp467;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp467);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp467);
                this.Manager.Comment("reaching state \'S1053\'");
                int temp470 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker3)));
                if ((temp470 == 0)) {
                    this.Manager.Comment("reaching state \'S1780\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp468;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,4,Valid)\'");
                    temp468 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2758\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp468, "return of NetrLogonControl2, state S2758");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label133;
                }
                if ((temp470 == 1)) {
                    this.Manager.Comment("reaching state \'S1781\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp469;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,3,Valid)\'");
                    temp469 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2759\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp469, "return of NetrLogonControl2, state S2759");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label133;
                }
                throw new InvalidOperationException("never reached");
            label133:
;
                goto label135;
            }
            if ((temp475 == 2)) {
                this.Manager.Comment("reaching state \'S565\'");
                bool temp471;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp471);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp471);
                this.Manager.Comment("reaching state \'S1054\'");
                int temp474 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker5)));
                if ((temp474 == 0)) {
                    this.Manager.Comment("reaching state \'S1782\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp472;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp472 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2760\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp472, "return of NetrLogonControl2, state S2760");
                    this.Manager.Comment("reaching state \'S3426\'");
                    goto label134;
                }
                if ((temp474 == 1)) {
                    this.Manager.Comment("reaching state \'S1783\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp473;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp473 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2761\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp473, "return of NetrLogonControl2, state S2761");
                    this.Manager.Comment("reaching state \'S3427\'");
                    goto label134;
                }
                throw new InvalidOperationException("never reached");
            label134:
;
                goto label135;
            }
            throw new InvalidOperationException("never reached");
        label135:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1052");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1052");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1053");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1053");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1054");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS158GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1054");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16");
            this.Manager.Comment("reaching state \'S16\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp476;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp476);
            this.Manager.AddReturn(GetPlatformInfo, null, temp476);
            this.Manager.Comment("reaching state \'S17\'");
            int temp489 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetPlatformChecker2)));
            if ((temp489 == 0)) {
                this.Manager.Comment("reaching state \'S350\'");
                bool temp477;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp477);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp477);
                this.Manager.Comment("reaching state \'S839\'");
                int temp480 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker1)));
                if ((temp480 == 0)) {
                    this.Manager.Comment("reaching state \'S1352\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp478;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,NoValidDomainNameContained)\'" +
                            "");
                    temp478 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2330\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp478, "return of NetrLogonControl2, state S2330");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label136;
                }
                if ((temp480 == 1)) {
                    this.Manager.Comment("reaching state \'S1353\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp479;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,3,Valid)\'");
                    temp479 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2331\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp479, "return of NetrLogonControl2, state S2331");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label136;
                }
                throw new InvalidOperationException("never reached");
            label136:
;
                goto label139;
            }
            if ((temp489 == 1)) {
                this.Manager.Comment("reaching state \'S351\'");
                bool temp481;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp481);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp481);
                this.Manager.Comment("reaching state \'S840\'");
                int temp484 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker3)));
                if ((temp484 == 0)) {
                    this.Manager.Comment("reaching state \'S1354\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp482;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,NoValidDomainNameContained)\'" +
                            "");
                    temp482 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2332\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp482, "return of NetrLogonControl2, state S2332");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label137;
                }
                if ((temp484 == 1)) {
                    this.Manager.Comment("reaching state \'S1355\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp483;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,NoValidDomainNameContained)\'" +
                            "");
                    temp483 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2333\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp483, "return of NetrLogonControl2, state S2333");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label137;
                }
                throw new InvalidOperationException("never reached");
            label137:
;
                goto label139;
            }
            if ((temp489 == 2)) {
                this.Manager.Comment("reaching state \'S352\'");
                bool temp485;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp485);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp485);
                this.Manager.Comment("reaching state \'S841\'");
                int temp488 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker5)));
                if ((temp488 == 0)) {
                    this.Manager.Comment("reaching state \'S1356\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp486;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp486 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2334\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp486, "return of NetrLogonControl2, state S2334");
                    this.Manager.Comment("reaching state \'S3284\'");
                    goto label138;
                }
                if ((temp488 == 1)) {
                    this.Manager.Comment("reaching state \'S1357\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp487;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp487 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2335\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp487, "return of NetrLogonControl2, state S2335");
                    this.Manager.Comment("reaching state \'S3285\'");
                    goto label138;
                }
                throw new InvalidOperationException("never reached");
            label138:
;
                goto label139;
            }
            throw new InvalidOperationException("never reached");
        label139:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S839");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S839");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S840");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S840");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S17");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S841");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS16GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S841");
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp490;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp490);
            this.Manager.AddReturn(GetPlatformInfo, null, temp490);
            this.Manager.Comment("reaching state \'S161\'");
            int temp503 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetPlatformChecker2)));
            if ((temp503 == 0)) {
                this.Manager.Comment("reaching state \'S566\'");
                bool temp491;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp491);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp491);
                this.Manager.Comment("reaching state \'S1055\'");
                int temp494 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker1)));
                if ((temp494 == 0)) {
                    this.Manager.Comment("reaching state \'S1784\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp492;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,Valid)\'");
                    temp492 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2762\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp492, "return of NetrLogonControl2, state S2762");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label140;
                }
                if ((temp494 == 1)) {
                    this.Manager.Comment("reaching state \'S1785\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp493;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,Valid)\'");
                    temp493 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2763\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp493, "return of NetrLogonControl2, state S2763");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label140;
                }
                throw new InvalidOperationException("never reached");
            label140:
;
                goto label143;
            }
            if ((temp503 == 1)) {
                this.Manager.Comment("reaching state \'S567\'");
                bool temp495;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp495);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp495);
                this.Manager.Comment("reaching state \'S1056\'");
                int temp498 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker3)));
                if ((temp498 == 0)) {
                    this.Manager.Comment("reaching state \'S1786\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp496;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,4,Valid)\'");
                    temp496 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2764\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp496, "return of NetrLogonControl2, state S2764");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label141;
                }
                if ((temp498 == 1)) {
                    this.Manager.Comment("reaching state \'S1787\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp497;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,3,Valid)\'");
                    temp497 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2765\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp497, "return of NetrLogonControl2, state S2765");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label141;
                }
                throw new InvalidOperationException("never reached");
            label141:
;
                goto label143;
            }
            if ((temp503 == 2)) {
                this.Manager.Comment("reaching state \'S568\'");
                bool temp499;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp499);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp499);
                this.Manager.Comment("reaching state \'S1057\'");
                int temp502 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker5)));
                if ((temp502 == 0)) {
                    this.Manager.Comment("reaching state \'S1788\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp500;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp500 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2766\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp500, "return of NetrLogonControl2, state S2766");
                    this.Manager.Comment("reaching state \'S3428\'");
                    goto label142;
                }
                if ((temp502 == 1)) {
                    this.Manager.Comment("reaching state \'S1789\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp501;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp501 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2767\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp501, "return of NetrLogonControl2, state S2767");
                    this.Manager.Comment("reaching state \'S3429\'");
                    goto label142;
                }
                throw new InvalidOperationException("never reached");
            label142:
;
                goto label143;
            }
            throw new InvalidOperationException("never reached");
        label143:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1055");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1055");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1056");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1056");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1057");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS160GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1057");
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp504;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp504);
            this.Manager.AddReturn(GetPlatformInfo, null, temp504);
            this.Manager.Comment("reaching state \'S163\'");
            int temp517 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetPlatformChecker2)));
            if ((temp517 == 0)) {
                this.Manager.Comment("reaching state \'S569\'");
                bool temp505;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp505);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp505);
                this.Manager.Comment("reaching state \'S1058\'");
                int temp508 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker1)));
                if ((temp508 == 0)) {
                    this.Manager.Comment("reaching state \'S1790\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp506;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,0,Valid)\'");
                    temp506 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 0u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2768\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp506, "return of NetrLogonControl2, state S2768");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label144;
                }
                if ((temp508 == 1)) {
                    this.Manager.Comment("reaching state \'S1791\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp507;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,0,Valid)\'");
                    temp507 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 0u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104121");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2769\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp507, "return of NetrLogonControl2, state S2769");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label144;
                }
                throw new InvalidOperationException("never reached");
            label144:
;
                goto label147;
            }
            if ((temp517 == 1)) {
                this.Manager.Comment("reaching state \'S570\'");
                bool temp509;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp509);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp509);
                this.Manager.Comment("reaching state \'S1059\'");
                int temp512 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker3)));
                if ((temp512 == 0)) {
                    this.Manager.Comment("reaching state \'S1792\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp510;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,0,Valid)\'");
                    temp510 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 0u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2770\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp510, "return of NetrLogonControl2, state S2770");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label145;
                }
                if ((temp512 == 1)) {
                    this.Manager.Comment("reaching state \'S1793\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp511;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,0,Valid)\'");
                    temp511 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 0u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104121");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2771\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp511, "return of NetrLogonControl2, state S2771");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label145;
                }
                throw new InvalidOperationException("never reached");
            label145:
;
                goto label147;
            }
            if ((temp517 == 2)) {
                this.Manager.Comment("reaching state \'S571\'");
                bool temp513;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp513);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp513);
                this.Manager.Comment("reaching state \'S1060\'");
                int temp516 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker5)));
                if ((temp516 == 0)) {
                    this.Manager.Comment("reaching state \'S1794\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp514;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp514 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2772\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp514, "return of NetrLogonControl2, state S2772");
                    this.Manager.Comment("reaching state \'S3430\'");
                    goto label146;
                }
                if ((temp516 == 1)) {
                    this.Manager.Comment("reaching state \'S1795\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp515;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp515 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2773\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp515, "return of NetrLogonControl2, state S2773");
                    this.Manager.Comment("reaching state \'S3431\'");
                    goto label146;
                }
                throw new InvalidOperationException("never reached");
            label146:
;
                goto label147;
            }
            throw new InvalidOperationException("never reached");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1058");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1058");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1059");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1059");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1060");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS162GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1060");
        }
        #endregion
        
        #region Test Starting in S164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164");
            this.Manager.Comment("reaching state \'S164\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp518;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp518);
            this.Manager.AddReturn(GetPlatformInfo, null, temp518);
            this.Manager.Comment("reaching state \'S165\'");
            int temp531 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetPlatformChecker2)));
            if ((temp531 == 0)) {
                this.Manager.Comment("reaching state \'S572\'");
                bool temp519;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp519);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp519);
                this.Manager.Comment("reaching state \'S1061\'");
                int temp522 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker1)));
                if ((temp522 == 0)) {
                    this.Manager.Comment("reaching state \'S1796\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp520;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp520 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2774\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp520, "return of NetrLogonControl2, state S2774");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label148;
                }
                if ((temp522 == 1)) {
                    this.Manager.Comment("reaching state \'S1797\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp521;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp521 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2775\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp521, "return of NetrLogonControl2, state S2775");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label148;
                }
                throw new InvalidOperationException("never reached");
            label148:
;
                goto label151;
            }
            if ((temp531 == 1)) {
                this.Manager.Comment("reaching state \'S573\'");
                bool temp523;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp523);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp523);
                this.Manager.Comment("reaching state \'S1062\'");
                int temp526 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker3)));
                if ((temp526 == 0)) {
                    this.Manager.Comment("reaching state \'S1798\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp524;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp524 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2776\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp524, "return of NetrLogonControl2, state S2776");
                    this.Manager.Comment("reaching state \'S3434\'");
                    goto label149;
                }
                if ((temp526 == 1)) {
                    this.Manager.Comment("reaching state \'S1799\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp525;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp525 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2777\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp525, "return of NetrLogonControl2, state S2777");
                    this.Manager.Comment("reaching state \'S3435\'");
                    goto label149;
                }
                throw new InvalidOperationException("never reached");
            label149:
;
                goto label151;
            }
            if ((temp531 == 2)) {
                this.Manager.Comment("reaching state \'S574\'");
                bool temp527;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp527);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp527);
                this.Manager.Comment("reaching state \'S1063\'");
                int temp530 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker5)));
                if ((temp530 == 0)) {
                    this.Manager.Comment("reaching state \'S1800\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp528;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp528 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2778\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp528, "return of NetrLogonControl2, state S2778");
                    this.Manager.Comment("reaching state \'S3436\'");
                    goto label150;
                }
                if ((temp530 == 1)) {
                    this.Manager.Comment("reaching state \'S1801\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp529;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp529 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2779\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp529, "return of NetrLogonControl2, state S2779");
                    this.Manager.Comment("reaching state \'S3437\'");
                    goto label150;
                }
                throw new InvalidOperationException("never reached");
            label150:
;
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1061");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432() {
            this.Manager.Comment("reaching state \'S3432\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1061");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433() {
            this.Manager.Comment("reaching state \'S3433\'");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1062");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1062");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1063");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS164GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1063");
        }
        #endregion
        
        #region Test Starting in S166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166");
            this.Manager.Comment("reaching state \'S166\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp532;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp532);
            this.Manager.AddReturn(GetPlatformInfo, null, temp532);
            this.Manager.Comment("reaching state \'S167\'");
            int temp545 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetPlatformChecker2)));
            if ((temp545 == 0)) {
                this.Manager.Comment("reaching state \'S575\'");
                bool temp533;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp533);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp533);
                this.Manager.Comment("reaching state \'S1064\'");
                int temp536 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker1)));
                if ((temp536 == 0)) {
                    this.Manager.Comment("reaching state \'S1802\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp534;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,NoValidDomainNameContained)" +
                            "\'");
                    temp534 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2780\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp534, "return of NetrLogonControl2, state S2780");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label152;
                }
                if ((temp536 == 1)) {
                    this.Manager.Comment("reaching state \'S1803\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp535;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,NoValidDomainNameContained)\'" +
                            "");
                    temp535 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2781\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp535, "return of NetrLogonControl2, state S2781");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label152;
                }
                throw new InvalidOperationException("never reached");
            label152:
;
                goto label155;
            }
            if ((temp545 == 1)) {
                this.Manager.Comment("reaching state \'S576\'");
                bool temp537;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp537);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp537);
                this.Manager.Comment("reaching state \'S1065\'");
                int temp540 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker3)));
                if ((temp540 == 0)) {
                    this.Manager.Comment("reaching state \'S1804\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp538;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp538 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2782\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp538, "return of NetrLogonControl2, state S2782");
                    this.Manager.Comment("reaching state \'S3438\'");
                    goto label153;
                }
                if ((temp540 == 1)) {
                    this.Manager.Comment("reaching state \'S1805\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp539;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp539 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2783\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp539, "return of NetrLogonControl2, state S2783");
                    this.Manager.Comment("reaching state \'S3439\'");
                    goto label153;
                }
                throw new InvalidOperationException("never reached");
            label153:
;
                goto label155;
            }
            if ((temp545 == 2)) {
                this.Manager.Comment("reaching state \'S577\'");
                bool temp541;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp541);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp541);
                this.Manager.Comment("reaching state \'S1066\'");
                int temp544 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker5)));
                if ((temp544 == 0)) {
                    this.Manager.Comment("reaching state \'S1806\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp542;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp542 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2784\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp542, "return of NetrLogonControl2, state S2784");
                    this.Manager.Comment("reaching state \'S3440\'");
                    goto label154;
                }
                if ((temp544 == 1)) {
                    this.Manager.Comment("reaching state \'S1807\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp543;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp543 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2785\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp543, "return of NetrLogonControl2, state S2785");
                    this.Manager.Comment("reaching state \'S3441\'");
                    goto label154;
                }
                throw new InvalidOperationException("never reached");
            label154:
;
                goto label155;
            }
            throw new InvalidOperationException("never reached");
        label155:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1064");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1064");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1065");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1065");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1066");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS166GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1066");
        }
        #endregion
        
        #region Test Starting in S168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168");
            this.Manager.Comment("reaching state \'S168\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp546;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp546);
            this.Manager.AddReturn(GetPlatformInfo, null, temp546);
            this.Manager.Comment("reaching state \'S169\'");
            int temp559 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetPlatformChecker2)));
            if ((temp559 == 0)) {
                this.Manager.Comment("reaching state \'S578\'");
                bool temp547;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp547);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp547);
                this.Manager.Comment("reaching state \'S1067\'");
                int temp550 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker1)));
                if ((temp550 == 0)) {
                    this.Manager.Comment("reaching state \'S1808\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp548;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,NoValidDomainNameContained)" +
                            "\'");
                    temp548 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2786\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp548, "return of NetrLogonControl2, state S2786");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label156;
                }
                if ((temp550 == 1)) {
                    this.Manager.Comment("reaching state \'S1809\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp549;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,NoValidDomainNameContained)\'" +
                            "");
                    temp549 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2787\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp549, "return of NetrLogonControl2, state S2787");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label156;
                }
                throw new InvalidOperationException("never reached");
            label156:
;
                goto label159;
            }
            if ((temp559 == 1)) {
                this.Manager.Comment("reaching state \'S579\'");
                bool temp551;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp551);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp551);
                this.Manager.Comment("reaching state \'S1068\'");
                int temp554 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker3)));
                if ((temp554 == 0)) {
                    this.Manager.Comment("reaching state \'S1810\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp552;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp552 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2788\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp552, "return of NetrLogonControl2, state S2788");
                    this.Manager.Comment("reaching state \'S3442\'");
                    goto label157;
                }
                if ((temp554 == 1)) {
                    this.Manager.Comment("reaching state \'S1811\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp553;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp553 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2789\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp553, "return of NetrLogonControl2, state S2789");
                    this.Manager.Comment("reaching state \'S3443\'");
                    goto label157;
                }
                throw new InvalidOperationException("never reached");
            label157:
;
                goto label159;
            }
            if ((temp559 == 2)) {
                this.Manager.Comment("reaching state \'S580\'");
                bool temp555;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp555);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp555);
                this.Manager.Comment("reaching state \'S1069\'");
                int temp558 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker5)));
                if ((temp558 == 0)) {
                    this.Manager.Comment("reaching state \'S1812\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp556;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp556 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2790\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp556, "return of NetrLogonControl2, state S2790");
                    this.Manager.Comment("reaching state \'S3444\'");
                    goto label158;
                }
                if ((temp558 == 1)) {
                    this.Manager.Comment("reaching state \'S1813\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp557;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp557 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2791\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp557, "return of NetrLogonControl2, state S2791");
                    this.Manager.Comment("reaching state \'S3445\'");
                    goto label158;
                }
                throw new InvalidOperationException("never reached");
            label158:
;
                goto label159;
            }
            throw new InvalidOperationException("never reached");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1067");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1067");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1068");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1068");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1069");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS168GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1069");
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp560;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp560);
            this.Manager.AddReturn(GetPlatformInfo, null, temp560);
            this.Manager.Comment("reaching state \'S171\'");
            int temp573 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetPlatformChecker2)));
            if ((temp573 == 0)) {
                this.Manager.Comment("reaching state \'S581\'");
                bool temp561;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp561);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp561);
                this.Manager.Comment("reaching state \'S1070\'");
                int temp564 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker1)));
                if ((temp564 == 0)) {
                    this.Manager.Comment("reaching state \'S1814\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp562;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,NoValidDomainNameContained)" +
                            "\'");
                    temp562 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2792\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp562, "return of NetrLogonControl2, state S2792");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label160;
                }
                if ((temp564 == 1)) {
                    this.Manager.Comment("reaching state \'S1815\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp563;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,NoValidDomainNameContained)\'" +
                            "");
                    temp563 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2793\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp563, "return of NetrLogonControl2, state S2793");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label160;
                }
                throw new InvalidOperationException("never reached");
            label160:
;
                goto label163;
            }
            if ((temp573 == 1)) {
                this.Manager.Comment("reaching state \'S582\'");
                bool temp565;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp565);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp565);
                this.Manager.Comment("reaching state \'S1071\'");
                int temp568 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker3)));
                if ((temp568 == 0)) {
                    this.Manager.Comment("reaching state \'S1816\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp566;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp566 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2794\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp566, "return of NetrLogonControl2, state S2794");
                    this.Manager.Comment("reaching state \'S3446\'");
                    goto label161;
                }
                if ((temp568 == 1)) {
                    this.Manager.Comment("reaching state \'S1817\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp567;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp567 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2795\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp567, "return of NetrLogonControl2, state S2795");
                    this.Manager.Comment("reaching state \'S3447\'");
                    goto label161;
                }
                throw new InvalidOperationException("never reached");
            label161:
;
                goto label163;
            }
            if ((temp573 == 2)) {
                this.Manager.Comment("reaching state \'S583\'");
                bool temp569;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp569);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp569);
                this.Manager.Comment("reaching state \'S1072\'");
                int temp572 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker5)));
                if ((temp572 == 0)) {
                    this.Manager.Comment("reaching state \'S1818\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp570;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp570 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2796\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp570, "return of NetrLogonControl2, state S2796");
                    this.Manager.Comment("reaching state \'S3448\'");
                    goto label162;
                }
                if ((temp572 == 1)) {
                    this.Manager.Comment("reaching state \'S1819\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp571;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp571 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2797\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp571, "return of NetrLogonControl2, state S2797");
                    this.Manager.Comment("reaching state \'S3449\'");
                    goto label162;
                }
                throw new InvalidOperationException("never reached");
            label162:
;
                goto label163;
            }
            throw new InvalidOperationException("never reached");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1070");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1070");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1071");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1071");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1072");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS170GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1072");
        }
        #endregion
        
        #region Test Starting in S172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172");
            this.Manager.Comment("reaching state \'S172\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp574;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp574);
            this.Manager.AddReturn(GetPlatformInfo, null, temp574);
            this.Manager.Comment("reaching state \'S173\'");
            int temp587 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetPlatformChecker2)));
            if ((temp587 == 0)) {
                this.Manager.Comment("reaching state \'S584\'");
                bool temp575;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp575);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp575);
                this.Manager.Comment("reaching state \'S1073\'");
                int temp578 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker1)));
                if ((temp578 == 0)) {
                    this.Manager.Comment("reaching state \'S1820\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp576;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,NoValidDomainNameContained)\'" +
                            "");
                    temp576 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2798\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp576, "return of NetrLogonControl2, state S2798");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label164;
                }
                if ((temp578 == 1)) {
                    this.Manager.Comment("reaching state \'S1821\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp577;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,NoValidDomainNameContained)" +
                            "\'");
                    temp577 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2799\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp577, "return of NetrLogonControl2, state S2799");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label164;
                }
                throw new InvalidOperationException("never reached");
            label164:
;
                goto label167;
            }
            if ((temp587 == 1)) {
                this.Manager.Comment("reaching state \'S585\'");
                bool temp579;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp579);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp579);
                this.Manager.Comment("reaching state \'S1074\'");
                int temp582 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker3)));
                if ((temp582 == 0)) {
                    this.Manager.Comment("reaching state \'S1822\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp580;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp580 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2800\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp580, "return of NetrLogonControl2, state S2800");
                    this.Manager.Comment("reaching state \'S3450\'");
                    goto label165;
                }
                if ((temp582 == 1)) {
                    this.Manager.Comment("reaching state \'S1823\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp581;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp581 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2801\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp581, "return of NetrLogonControl2, state S2801");
                    this.Manager.Comment("reaching state \'S3451\'");
                    goto label165;
                }
                throw new InvalidOperationException("never reached");
            label165:
;
                goto label167;
            }
            if ((temp587 == 2)) {
                this.Manager.Comment("reaching state \'S586\'");
                bool temp583;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp583);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp583);
                this.Manager.Comment("reaching state \'S1075\'");
                int temp586 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker5)));
                if ((temp586 == 0)) {
                    this.Manager.Comment("reaching state \'S1824\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp584;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp584 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2802\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp584, "return of NetrLogonControl2, state S2802");
                    this.Manager.Comment("reaching state \'S3452\'");
                    goto label166;
                }
                if ((temp586 == 1)) {
                    this.Manager.Comment("reaching state \'S1825\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp585;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp585 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2803\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp585, "return of NetrLogonControl2, state S2803");
                    this.Manager.Comment("reaching state \'S3453\'");
                    goto label166;
                }
                throw new InvalidOperationException("never reached");
            label166:
;
                goto label167;
            }
            throw new InvalidOperationException("never reached");
        label167:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1073");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1073");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1074");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1074");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1075");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS172GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1075");
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp588;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp588);
            this.Manager.AddReturn(GetPlatformInfo, null, temp588);
            this.Manager.Comment("reaching state \'S175\'");
            int temp601 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetPlatformChecker2)));
            if ((temp601 == 0)) {
                this.Manager.Comment("reaching state \'S587\'");
                bool temp589;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp589);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp589);
                this.Manager.Comment("reaching state \'S1076\'");
                int temp592 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker1)));
                if ((temp592 == 0)) {
                    this.Manager.Comment("reaching state \'S1826\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp590;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,NoValidDomainNameContained)\'" +
                            "");
                    temp590 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2804\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp590, "return of NetrLogonControl2, state S2804");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label168;
                }
                if ((temp592 == 1)) {
                    this.Manager.Comment("reaching state \'S1827\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp591;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,NoValidDomainNameContained)\'" +
                            "");
                    temp591 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2805\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp591, "return of NetrLogonControl2, state S2805");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label168;
                }
                throw new InvalidOperationException("never reached");
            label168:
;
                goto label171;
            }
            if ((temp601 == 1)) {
                this.Manager.Comment("reaching state \'S588\'");
                bool temp593;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp593);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp593);
                this.Manager.Comment("reaching state \'S1077\'");
                int temp596 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker3)));
                if ((temp596 == 0)) {
                    this.Manager.Comment("reaching state \'S1828\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp594;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp594 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2806\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp594, "return of NetrLogonControl2, state S2806");
                    this.Manager.Comment("reaching state \'S3454\'");
                    goto label169;
                }
                if ((temp596 == 1)) {
                    this.Manager.Comment("reaching state \'S1829\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp595;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp595 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2807\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp595, "return of NetrLogonControl2, state S2807");
                    this.Manager.Comment("reaching state \'S3455\'");
                    goto label169;
                }
                throw new InvalidOperationException("never reached");
            label169:
;
                goto label171;
            }
            if ((temp601 == 2)) {
                this.Manager.Comment("reaching state \'S589\'");
                bool temp597;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp597);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp597);
                this.Manager.Comment("reaching state \'S1078\'");
                int temp600 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker5)));
                if ((temp600 == 0)) {
                    this.Manager.Comment("reaching state \'S1830\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp598;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp598 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2808\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp598, "return of NetrLogonControl2, state S2808");
                    this.Manager.Comment("reaching state \'S3456\'");
                    goto label170;
                }
                if ((temp600 == 1)) {
                    this.Manager.Comment("reaching state \'S1831\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp599;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp599 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2809\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp599, "return of NetrLogonControl2, state S2809");
                    this.Manager.Comment("reaching state \'S3457\'");
                    goto label170;
                }
                throw new InvalidOperationException("never reached");
            label170:
;
                goto label171;
            }
            throw new InvalidOperationException("never reached");
        label171:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1076");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1076");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1077");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1077");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1078");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS174GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1078");
        }
        #endregion
        
        #region Test Starting in S176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176");
            this.Manager.Comment("reaching state \'S176\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp602;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp602);
            this.Manager.AddReturn(GetPlatformInfo, null, temp602);
            this.Manager.Comment("reaching state \'S177\'");
            int temp615 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetPlatformChecker2)));
            if ((temp615 == 0)) {
                this.Manager.Comment("reaching state \'S590\'");
                bool temp603;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp603);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp603);
                this.Manager.Comment("reaching state \'S1079\'");
                int temp606 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker1)));
                if ((temp606 == 0)) {
                    this.Manager.Comment("reaching state \'S1832\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp604;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,NoValidDomainNameContained)\'" +
                            "");
                    temp604 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2810\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp604, "return of NetrLogonControl2, state S2810");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label172;
                }
                if ((temp606 == 1)) {
                    this.Manager.Comment("reaching state \'S1833\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp605;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,NoValidDomainNameContained)\'" +
                            "");
                    temp605 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2811\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp605, "return of NetrLogonControl2, state S2811");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label172;
                }
                throw new InvalidOperationException("never reached");
            label172:
;
                goto label175;
            }
            if ((temp615 == 1)) {
                this.Manager.Comment("reaching state \'S591\'");
                bool temp607;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp607);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp607);
                this.Manager.Comment("reaching state \'S1080\'");
                int temp610 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker3)));
                if ((temp610 == 0)) {
                    this.Manager.Comment("reaching state \'S1834\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp608;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp608 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2812\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp608, "return of NetrLogonControl2, state S2812");
                    this.Manager.Comment("reaching state \'S3458\'");
                    goto label173;
                }
                if ((temp610 == 1)) {
                    this.Manager.Comment("reaching state \'S1835\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp609;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp609 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2813\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp609, "return of NetrLogonControl2, state S2813");
                    this.Manager.Comment("reaching state \'S3459\'");
                    goto label173;
                }
                throw new InvalidOperationException("never reached");
            label173:
;
                goto label175;
            }
            if ((temp615 == 2)) {
                this.Manager.Comment("reaching state \'S592\'");
                bool temp611;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp611);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp611);
                this.Manager.Comment("reaching state \'S1081\'");
                int temp614 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker5)));
                if ((temp614 == 0)) {
                    this.Manager.Comment("reaching state \'S1836\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp612;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp612 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2814\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp612, "return of NetrLogonControl2, state S2814");
                    this.Manager.Comment("reaching state \'S3460\'");
                    goto label174;
                }
                if ((temp614 == 1)) {
                    this.Manager.Comment("reaching state \'S1837\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp613;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp613 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2815\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp613, "return of NetrLogonControl2, state S2815");
                    this.Manager.Comment("reaching state \'S3461\'");
                    goto label174;
                }
                throw new InvalidOperationException("never reached");
            label174:
;
                goto label175;
            }
            throw new InvalidOperationException("never reached");
        label175:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1079");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1079");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1080");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1080");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1081");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS176GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1081");
        }
        #endregion
        
        #region Test Starting in S178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178");
            this.Manager.Comment("reaching state \'S178\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp616;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp616);
            this.Manager.AddReturn(GetPlatformInfo, null, temp616);
            this.Manager.Comment("reaching state \'S179\'");
            int temp629 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetPlatformChecker2)));
            if ((temp629 == 0)) {
                this.Manager.Comment("reaching state \'S593\'");
                bool temp617;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp617);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp617);
                this.Manager.Comment("reaching state \'S1082\'");
                int temp620 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker1)));
                if ((temp620 == 0)) {
                    this.Manager.Comment("reaching state \'S1838\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp618;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,NoValidDomainNameContained)\'" +
                            "");
                    temp618 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2816\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp618, "return of NetrLogonControl2, state S2816");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label176;
                }
                if ((temp620 == 1)) {
                    this.Manager.Comment("reaching state \'S1839\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp619;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,NoValidDomainNameContained)" +
                            "\'");
                    temp619 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2817\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp619, "return of NetrLogonControl2, state S2817");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label176;
                }
                throw new InvalidOperationException("never reached");
            label176:
;
                goto label179;
            }
            if ((temp629 == 1)) {
                this.Manager.Comment("reaching state \'S594\'");
                bool temp621;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp621);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp621);
                this.Manager.Comment("reaching state \'S1083\'");
                int temp624 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker3)));
                if ((temp624 == 0)) {
                    this.Manager.Comment("reaching state \'S1840\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp622;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp622 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2818\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp622, "return of NetrLogonControl2, state S2818");
                    this.Manager.Comment("reaching state \'S3462\'");
                    goto label177;
                }
                if ((temp624 == 1)) {
                    this.Manager.Comment("reaching state \'S1841\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp623;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp623 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2819\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp623, "return of NetrLogonControl2, state S2819");
                    this.Manager.Comment("reaching state \'S3463\'");
                    goto label177;
                }
                throw new InvalidOperationException("never reached");
            label177:
;
                goto label179;
            }
            if ((temp629 == 2)) {
                this.Manager.Comment("reaching state \'S595\'");
                bool temp625;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp625);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp625);
                this.Manager.Comment("reaching state \'S1084\'");
                int temp628 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker5)));
                if ((temp628 == 0)) {
                    this.Manager.Comment("reaching state \'S1842\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp626;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp626 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2820\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp626, "return of NetrLogonControl2, state S2820");
                    this.Manager.Comment("reaching state \'S3464\'");
                    goto label178;
                }
                if ((temp628 == 1)) {
                    this.Manager.Comment("reaching state \'S1843\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp627;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp627 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2821\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp627, "return of NetrLogonControl2, state S2821");
                    this.Manager.Comment("reaching state \'S3465\'");
                    goto label178;
                }
                throw new InvalidOperationException("never reached");
            label178:
;
                goto label179;
            }
            throw new InvalidOperationException("never reached");
        label179:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1082");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1082");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1083");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1083");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1084");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS178GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1084");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp630;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp630);
            this.Manager.AddReturn(GetPlatformInfo, null, temp630);
            this.Manager.Comment("reaching state \'S19\'");
            int temp643 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetPlatformChecker2)));
            if ((temp643 == 0)) {
                this.Manager.Comment("reaching state \'S353\'");
                bool temp631;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp631);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp631);
                this.Manager.Comment("reaching state \'S842\'");
                int temp634 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker1)));
                if ((temp634 == 0)) {
                    this.Manager.Comment("reaching state \'S1358\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp632;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,NoValidDomainNameContained)\'" +
                            "");
                    temp632 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2336\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp632, "return of NetrLogonControl2, state S2336");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label180;
                }
                if ((temp634 == 1)) {
                    this.Manager.Comment("reaching state \'S1359\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp633;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,3,Valid)\'");
                    temp633 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2337\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp633, "return of NetrLogonControl2, state S2337");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label180;
                }
                throw new InvalidOperationException("never reached");
            label180:
;
                goto label183;
            }
            if ((temp643 == 1)) {
                this.Manager.Comment("reaching state \'S354\'");
                bool temp635;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp635);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp635);
                this.Manager.Comment("reaching state \'S843\'");
                int temp638 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker3)));
                if ((temp638 == 0)) {
                    this.Manager.Comment("reaching state \'S1360\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp636;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,NoValidDomainNameContained)\'" +
                            "");
                    temp636 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2338\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp636, "return of NetrLogonControl2, state S2338");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label181;
                }
                if ((temp638 == 1)) {
                    this.Manager.Comment("reaching state \'S1361\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp637;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,NoValidDomainNameContained)\'" +
                            "");
                    temp637 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2339\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp637, "return of NetrLogonControl2, state S2339");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label181;
                }
                throw new InvalidOperationException("never reached");
            label181:
;
                goto label183;
            }
            if ((temp643 == 2)) {
                this.Manager.Comment("reaching state \'S355\'");
                bool temp639;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp639);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp639);
                this.Manager.Comment("reaching state \'S844\'");
                int temp642 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker5)));
                if ((temp642 == 0)) {
                    this.Manager.Comment("reaching state \'S1362\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp640;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp640 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2340\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp640, "return of NetrLogonControl2, state S2340");
                    this.Manager.Comment("reaching state \'S3286\'");
                    goto label182;
                }
                if ((temp642 == 1)) {
                    this.Manager.Comment("reaching state \'S1363\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp641;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp641 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2341\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp641, "return of NetrLogonControl2, state S2341");
                    this.Manager.Comment("reaching state \'S3287\'");
                    goto label182;
                }
                throw new InvalidOperationException("never reached");
            label182:
;
                goto label183;
            }
            throw new InvalidOperationException("never reached");
        label183:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S842");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S842");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S843");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S843");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S19");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S844");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS18GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S844");
        }
        #endregion
        
        #region Test Starting in S180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180");
            this.Manager.Comment("reaching state \'S180\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp644;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp644);
            this.Manager.AddReturn(GetPlatformInfo, null, temp644);
            this.Manager.Comment("reaching state \'S181\'");
            int temp657 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetPlatformChecker2)));
            if ((temp657 == 0)) {
                this.Manager.Comment("reaching state \'S596\'");
                bool temp645;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp645);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp645);
                this.Manager.Comment("reaching state \'S1085\'");
                int temp648 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker1)));
                if ((temp648 == 0)) {
                    this.Manager.Comment("reaching state \'S1844\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp646;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,NoValidDomainNameContained)\'" +
                            "");
                    temp646 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2822\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp646, "return of NetrLogonControl2, state S2822");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label184;
                }
                if ((temp648 == 1)) {
                    this.Manager.Comment("reaching state \'S1845\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp647;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp647 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2823\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp647, "return of NetrLogonControl2, state S2823");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label184;
                }
                throw new InvalidOperationException("never reached");
            label184:
;
                goto label187;
            }
            if ((temp657 == 1)) {
                this.Manager.Comment("reaching state \'S597\'");
                bool temp649;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp649);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp649);
                this.Manager.Comment("reaching state \'S1086\'");
                int temp652 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker3)));
                if ((temp652 == 0)) {
                    this.Manager.Comment("reaching state \'S1846\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp650;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp650 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2824\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp650, "return of NetrLogonControl2, state S2824");
                    this.Manager.Comment("reaching state \'S3466\'");
                    goto label185;
                }
                if ((temp652 == 1)) {
                    this.Manager.Comment("reaching state \'S1847\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp651;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp651 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2825\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp651, "return of NetrLogonControl2, state S2825");
                    this.Manager.Comment("reaching state \'S3467\'");
                    goto label185;
                }
                throw new InvalidOperationException("never reached");
            label185:
;
                goto label187;
            }
            if ((temp657 == 2)) {
                this.Manager.Comment("reaching state \'S598\'");
                bool temp653;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp653);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp653);
                this.Manager.Comment("reaching state \'S1087\'");
                int temp656 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker5)));
                if ((temp656 == 0)) {
                    this.Manager.Comment("reaching state \'S1848\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp654;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp654 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2826\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp654, "return of NetrLogonControl2, state S2826");
                    this.Manager.Comment("reaching state \'S3468\'");
                    goto label186;
                }
                if ((temp656 == 1)) {
                    this.Manager.Comment("reaching state \'S1849\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp655;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp655 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2827\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp655, "return of NetrLogonControl2, state S2827");
                    this.Manager.Comment("reaching state \'S3469\'");
                    goto label186;
                }
                throw new InvalidOperationException("never reached");
            label186:
;
                goto label187;
            }
            throw new InvalidOperationException("never reached");
        label187:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1085");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1085");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1086");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1086");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1087");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS180GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1087");
        }
        #endregion
        
        #region Test Starting in S182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182");
            this.Manager.Comment("reaching state \'S182\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp658;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp658);
            this.Manager.AddReturn(GetPlatformInfo, null, temp658);
            this.Manager.Comment("reaching state \'S183\'");
            int temp671 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetPlatformChecker2)));
            if ((temp671 == 0)) {
                this.Manager.Comment("reaching state \'S599\'");
                bool temp659;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp659);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp659);
                this.Manager.Comment("reaching state \'S1088\'");
                int temp662 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker1)));
                if ((temp662 == 0)) {
                    this.Manager.Comment("reaching state \'S1850\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp660;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,Valid)\'");
                    temp660 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2828\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp660, "return of NetrLogonControl2, state S2828");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label188;
                }
                if ((temp662 == 1)) {
                    this.Manager.Comment("reaching state \'S1851\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp661;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,NoValidDomainNameContained)" +
                            "\'");
                    temp661 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10477");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2829\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp661, "return of NetrLogonControl2, state S2829");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label188;
                }
                throw new InvalidOperationException("never reached");
            label188:
;
                goto label191;
            }
            if ((temp671 == 1)) {
                this.Manager.Comment("reaching state \'S600\'");
                bool temp663;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp663);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp663);
                this.Manager.Comment("reaching state \'S1089\'");
                int temp666 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker3)));
                if ((temp666 == 0)) {
                    this.Manager.Comment("reaching state \'S1852\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp664;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp664 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2830\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp664, "return of NetrLogonControl2, state S2830");
                    this.Manager.Comment("reaching state \'S3470\'");
                    goto label189;
                }
                if ((temp666 == 1)) {
                    this.Manager.Comment("reaching state \'S1853\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp665;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp665 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2831\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp665, "return of NetrLogonControl2, state S2831");
                    this.Manager.Comment("reaching state \'S3471\'");
                    goto label189;
                }
                throw new InvalidOperationException("never reached");
            label189:
;
                goto label191;
            }
            if ((temp671 == 2)) {
                this.Manager.Comment("reaching state \'S601\'");
                bool temp667;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp667);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp667);
                this.Manager.Comment("reaching state \'S1090\'");
                int temp670 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker5)));
                if ((temp670 == 0)) {
                    this.Manager.Comment("reaching state \'S1854\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp668;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp668 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2832\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp668, "return of NetrLogonControl2, state S2832");
                    this.Manager.Comment("reaching state \'S3472\'");
                    goto label190;
                }
                if ((temp670 == 1)) {
                    this.Manager.Comment("reaching state \'S1855\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp669;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp669 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2833\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp669, "return of NetrLogonControl2, state S2833");
                    this.Manager.Comment("reaching state \'S3473\'");
                    goto label190;
                }
                throw new InvalidOperationException("never reached");
            label190:
;
                goto label191;
            }
            throw new InvalidOperationException("never reached");
        label191:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1088");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1088");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1089");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1089");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1090");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS182GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1090");
        }
        #endregion
        
        #region Test Starting in S184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184");
            this.Manager.Comment("reaching state \'S184\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp672;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp672);
            this.Manager.AddReturn(GetPlatformInfo, null, temp672);
            this.Manager.Comment("reaching state \'S185\'");
            int temp685 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetPlatformChecker2)));
            if ((temp685 == 0)) {
                this.Manager.Comment("reaching state \'S602\'");
                bool temp673;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp673);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp673);
                this.Manager.Comment("reaching state \'S1091\'");
                int temp676 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker1)));
                if ((temp676 == 0)) {
                    this.Manager.Comment("reaching state \'S1856\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp674;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,Valid)\'");
                    temp674 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2834\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp674, "return of NetrLogonControl2, state S2834");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label192;
                }
                if ((temp676 == 1)) {
                    this.Manager.Comment("reaching state \'S1857\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp675;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,NoValidDomainNameContained)\'" +
                            "");
                    temp675 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2835\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp675, "return of NetrLogonControl2, state S2835");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label192;
                }
                throw new InvalidOperationException("never reached");
            label192:
;
                goto label195;
            }
            if ((temp685 == 1)) {
                this.Manager.Comment("reaching state \'S603\'");
                bool temp677;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp677);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp677);
                this.Manager.Comment("reaching state \'S1092\'");
                int temp680 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker3)));
                if ((temp680 == 0)) {
                    this.Manager.Comment("reaching state \'S1858\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp678;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp678 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2836\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp678, "return of NetrLogonControl2, state S2836");
                    this.Manager.Comment("reaching state \'S3474\'");
                    goto label193;
                }
                if ((temp680 == 1)) {
                    this.Manager.Comment("reaching state \'S1859\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp679;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp679 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2837\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp679, "return of NetrLogonControl2, state S2837");
                    this.Manager.Comment("reaching state \'S3475\'");
                    goto label193;
                }
                throw new InvalidOperationException("never reached");
            label193:
;
                goto label195;
            }
            if ((temp685 == 2)) {
                this.Manager.Comment("reaching state \'S604\'");
                bool temp681;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp681);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp681);
                this.Manager.Comment("reaching state \'S1093\'");
                int temp684 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker5)));
                if ((temp684 == 0)) {
                    this.Manager.Comment("reaching state \'S1860\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp682;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp682 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2838\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp682, "return of NetrLogonControl2, state S2838");
                    this.Manager.Comment("reaching state \'S3476\'");
                    goto label194;
                }
                if ((temp684 == 1)) {
                    this.Manager.Comment("reaching state \'S1861\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp683;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp683 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2839\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp683, "return of NetrLogonControl2, state S2839");
                    this.Manager.Comment("reaching state \'S3477\'");
                    goto label194;
                }
                throw new InvalidOperationException("never reached");
            label194:
;
                goto label195;
            }
            throw new InvalidOperationException("never reached");
        label195:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1091");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1091");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1092");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1092");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1093");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS184GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1093");
        }
        #endregion
        
        #region Test Starting in S186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186");
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp686;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp686);
            this.Manager.AddReturn(GetPlatformInfo, null, temp686);
            this.Manager.Comment("reaching state \'S187\'");
            int temp699 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetPlatformChecker2)));
            if ((temp699 == 0)) {
                this.Manager.Comment("reaching state \'S605\'");
                bool temp687;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp687);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp687);
                this.Manager.Comment("reaching state \'S1094\'");
                int temp690 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker1)));
                if ((temp690 == 0)) {
                    this.Manager.Comment("reaching state \'S1862\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp688;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,Valid)\'");
                    temp688 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2840\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp688, "return of NetrLogonControl2, state S2840");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label196;
                }
                if ((temp690 == 1)) {
                    this.Manager.Comment("reaching state \'S1863\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp689;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,NoValidDomainNameContained)\'" +
                            "");
                    temp689 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2841\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp689, "return of NetrLogonControl2, state S2841");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label196;
                }
                throw new InvalidOperationException("never reached");
            label196:
;
                goto label199;
            }
            if ((temp699 == 1)) {
                this.Manager.Comment("reaching state \'S606\'");
                bool temp691;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp691);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp691);
                this.Manager.Comment("reaching state \'S1095\'");
                int temp694 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker3)));
                if ((temp694 == 0)) {
                    this.Manager.Comment("reaching state \'S1864\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp692;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp692 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2842\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp692, "return of NetrLogonControl2, state S2842");
                    this.Manager.Comment("reaching state \'S3478\'");
                    goto label197;
                }
                if ((temp694 == 1)) {
                    this.Manager.Comment("reaching state \'S1865\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp693;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp693 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2843\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp693, "return of NetrLogonControl2, state S2843");
                    this.Manager.Comment("reaching state \'S3479\'");
                    goto label197;
                }
                throw new InvalidOperationException("never reached");
            label197:
;
                goto label199;
            }
            if ((temp699 == 2)) {
                this.Manager.Comment("reaching state \'S607\'");
                bool temp695;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp695);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp695);
                this.Manager.Comment("reaching state \'S1096\'");
                int temp698 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker5)));
                if ((temp698 == 0)) {
                    this.Manager.Comment("reaching state \'S1866\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp696;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp696 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2844\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp696, "return of NetrLogonControl2, state S2844");
                    this.Manager.Comment("reaching state \'S3480\'");
                    goto label198;
                }
                if ((temp698 == 1)) {
                    this.Manager.Comment("reaching state \'S1867\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp697;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp697 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2845\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp697, "return of NetrLogonControl2, state S2845");
                    this.Manager.Comment("reaching state \'S3481\'");
                    goto label198;
                }
                throw new InvalidOperationException("never reached");
            label198:
;
                goto label199;
            }
            throw new InvalidOperationException("never reached");
        label199:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1094");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1094");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1095");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1095");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1096");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS186GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1096");
        }
        #endregion
        
        #region Test Starting in S188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188");
            this.Manager.Comment("reaching state \'S188\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp700;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp700);
            this.Manager.AddReturn(GetPlatformInfo, null, temp700);
            this.Manager.Comment("reaching state \'S189\'");
            int temp713 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetPlatformChecker2)));
            if ((temp713 == 0)) {
                this.Manager.Comment("reaching state \'S608\'");
                bool temp701;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp701);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp701);
                this.Manager.Comment("reaching state \'S1097\'");
                int temp704 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker1)));
                if ((temp704 == 0)) {
                    this.Manager.Comment("reaching state \'S1868\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp702;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp702 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2846\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp702, "return of NetrLogonControl2, state S2846");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label200;
                }
                if ((temp704 == 1)) {
                    this.Manager.Comment("reaching state \'S1869\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp703;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,NoValidDomainNameContained)\'" +
                            "");
                    temp703 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2847\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp703, "return of NetrLogonControl2, state S2847");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label200;
                }
                throw new InvalidOperationException("never reached");
            label200:
;
                goto label203;
            }
            if ((temp713 == 1)) {
                this.Manager.Comment("reaching state \'S609\'");
                bool temp705;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp705);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp705);
                this.Manager.Comment("reaching state \'S1098\'");
                int temp708 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker3)));
                if ((temp708 == 0)) {
                    this.Manager.Comment("reaching state \'S1870\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp706;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp706 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2848\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp706, "return of NetrLogonControl2, state S2848");
                    this.Manager.Comment("reaching state \'S3482\'");
                    goto label201;
                }
                if ((temp708 == 1)) {
                    this.Manager.Comment("reaching state \'S1871\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp707;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp707 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2849\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp707, "return of NetrLogonControl2, state S2849");
                    this.Manager.Comment("reaching state \'S3483\'");
                    goto label201;
                }
                throw new InvalidOperationException("never reached");
            label201:
;
                goto label203;
            }
            if ((temp713 == 2)) {
                this.Manager.Comment("reaching state \'S610\'");
                bool temp709;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp709);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp709);
                this.Manager.Comment("reaching state \'S1099\'");
                int temp712 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker5)));
                if ((temp712 == 0)) {
                    this.Manager.Comment("reaching state \'S1872\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp710;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp710 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2850\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp710, "return of NetrLogonControl2, state S2850");
                    this.Manager.Comment("reaching state \'S3484\'");
                    goto label202;
                }
                if ((temp712 == 1)) {
                    this.Manager.Comment("reaching state \'S1873\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp711;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp711 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2851\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp711, "return of NetrLogonControl2, state S2851");
                    this.Manager.Comment("reaching state \'S3485\'");
                    goto label202;
                }
                throw new InvalidOperationException("never reached");
            label202:
;
                goto label203;
            }
            throw new InvalidOperationException("never reached");
        label203:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1097");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1097");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1098");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1098");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1099");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS188GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1099");
        }
        #endregion
        
        #region Test Starting in S190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190");
            this.Manager.Comment("reaching state \'S190\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp714;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp714);
            this.Manager.AddReturn(GetPlatformInfo, null, temp714);
            this.Manager.Comment("reaching state \'S191\'");
            int temp727 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetPlatformChecker2)));
            if ((temp727 == 0)) {
                this.Manager.Comment("reaching state \'S611\'");
                bool temp715;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp715);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp715);
                this.Manager.Comment("reaching state \'S1100\'");
                int temp718 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker1)));
                if ((temp718 == 0)) {
                    this.Manager.Comment("reaching state \'S1874\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp716;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,4,Valid)\'");
                    temp716 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2852\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp716, "return of NetrLogonControl2, state S2852");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label204;
                }
                if ((temp718 == 1)) {
                    this.Manager.Comment("reaching state \'S1875\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp717;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,NoValidDomainNameContained)\'" +
                            "");
                    temp717 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2853\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp717, "return of NetrLogonControl2, state S2853");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label204;
                }
                throw new InvalidOperationException("never reached");
            label204:
;
                goto label207;
            }
            if ((temp727 == 1)) {
                this.Manager.Comment("reaching state \'S612\'");
                bool temp719;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp719);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp719);
                this.Manager.Comment("reaching state \'S1101\'");
                int temp722 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker3)));
                if ((temp722 == 0)) {
                    this.Manager.Comment("reaching state \'S1876\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp720;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp720 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2854\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp720, "return of NetrLogonControl2, state S2854");
                    this.Manager.Comment("reaching state \'S3486\'");
                    goto label205;
                }
                if ((temp722 == 1)) {
                    this.Manager.Comment("reaching state \'S1877\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp721;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp721 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2855\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp721, "return of NetrLogonControl2, state S2855");
                    this.Manager.Comment("reaching state \'S3487\'");
                    goto label205;
                }
                throw new InvalidOperationException("never reached");
            label205:
;
                goto label207;
            }
            if ((temp727 == 2)) {
                this.Manager.Comment("reaching state \'S613\'");
                bool temp723;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp723);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp723);
                this.Manager.Comment("reaching state \'S1102\'");
                int temp726 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker5)));
                if ((temp726 == 0)) {
                    this.Manager.Comment("reaching state \'S1878\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp724;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp724 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2856\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp724, "return of NetrLogonControl2, state S2856");
                    this.Manager.Comment("reaching state \'S3488\'");
                    goto label206;
                }
                if ((temp726 == 1)) {
                    this.Manager.Comment("reaching state \'S1879\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp725;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp725 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2857\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp725, "return of NetrLogonControl2, state S2857");
                    this.Manager.Comment("reaching state \'S3489\'");
                    goto label206;
                }
                throw new InvalidOperationException("never reached");
            label206:
;
                goto label207;
            }
            throw new InvalidOperationException("never reached");
        label207:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S191");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1100");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1100");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S191");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1101");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S191");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1102");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS190GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1102");
        }
        #endregion
        
        #region Test Starting in S192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192");
            this.Manager.Comment("reaching state \'S192\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp728;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp728);
            this.Manager.AddReturn(GetPlatformInfo, null, temp728);
            this.Manager.Comment("reaching state \'S193\'");
            int temp741 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetPlatformChecker2)));
            if ((temp741 == 0)) {
                this.Manager.Comment("reaching state \'S614\'");
                bool temp729;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp729);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp729);
                this.Manager.Comment("reaching state \'S1103\'");
                int temp732 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker1)));
                if ((temp732 == 0)) {
                    this.Manager.Comment("reaching state \'S1880\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp730;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,2,Valid)\'");
                    temp730 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2858\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp730, "return of NetrLogonControl2, state S2858");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label208;
                }
                if ((temp732 == 1)) {
                    this.Manager.Comment("reaching state \'S1881\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp731;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,NoValidDomainNameContained)\'" +
                            "");
                    temp731 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2859\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp731, "return of NetrLogonControl2, state S2859");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label208;
                }
                throw new InvalidOperationException("never reached");
            label208:
;
                goto label211;
            }
            if ((temp741 == 1)) {
                this.Manager.Comment("reaching state \'S615\'");
                bool temp733;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp733);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp733);
                this.Manager.Comment("reaching state \'S1104\'");
                int temp736 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker3)));
                if ((temp736 == 0)) {
                    this.Manager.Comment("reaching state \'S1882\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp734;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp734 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2860\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp734, "return of NetrLogonControl2, state S2860");
                    this.Manager.Comment("reaching state \'S3490\'");
                    goto label209;
                }
                if ((temp736 == 1)) {
                    this.Manager.Comment("reaching state \'S1883\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp735;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp735 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2861\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp735, "return of NetrLogonControl2, state S2861");
                    this.Manager.Comment("reaching state \'S3491\'");
                    goto label209;
                }
                throw new InvalidOperationException("never reached");
            label209:
;
                goto label211;
            }
            if ((temp741 == 2)) {
                this.Manager.Comment("reaching state \'S616\'");
                bool temp737;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp737);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp737);
                this.Manager.Comment("reaching state \'S1105\'");
                int temp740 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker5)));
                if ((temp740 == 0)) {
                    this.Manager.Comment("reaching state \'S1884\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp738;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp738 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2862\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp738, "return of NetrLogonControl2, state S2862");
                    this.Manager.Comment("reaching state \'S3492\'");
                    goto label210;
                }
                if ((temp740 == 1)) {
                    this.Manager.Comment("reaching state \'S1885\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp739;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp739 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2863\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp739, "return of NetrLogonControl2, state S2863");
                    this.Manager.Comment("reaching state \'S3493\'");
                    goto label210;
                }
                throw new InvalidOperationException("never reached");
            label210:
;
                goto label211;
            }
            throw new InvalidOperationException("never reached");
        label211:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S193");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1103");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S193");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1104");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1104");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S193");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1105");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS192GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1105");
        }
        #endregion
        
        #region Test Starting in S194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194");
            this.Manager.Comment("reaching state \'S194\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp742;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp742);
            this.Manager.AddReturn(GetPlatformInfo, null, temp742);
            this.Manager.Comment("reaching state \'S195\'");
            int temp755 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetPlatformChecker2)));
            if ((temp755 == 0)) {
                this.Manager.Comment("reaching state \'S617\'");
                bool temp743;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp743);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp743);
                this.Manager.Comment("reaching state \'S1106\'");
                int temp746 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker1)));
                if ((temp746 == 0)) {
                    this.Manager.Comment("reaching state \'S1886\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp744;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,1,Valid)\'");
                    temp744 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2864\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp744, "return of NetrLogonControl2, state S2864");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label212;
                }
                if ((temp746 == 1)) {
                    this.Manager.Comment("reaching state \'S1887\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp745;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,NoValidDomainNameContained)\'" +
                            "");
                    temp745 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2865\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp745, "return of NetrLogonControl2, state S2865");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label212;
                }
                throw new InvalidOperationException("never reached");
            label212:
;
                goto label215;
            }
            if ((temp755 == 1)) {
                this.Manager.Comment("reaching state \'S618\'");
                bool temp747;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp747);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp747);
                this.Manager.Comment("reaching state \'S1107\'");
                int temp750 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker3)));
                if ((temp750 == 0)) {
                    this.Manager.Comment("reaching state \'S1888\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp748;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp748 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2866\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp748, "return of NetrLogonControl2, state S2866");
                    this.Manager.Comment("reaching state \'S3494\'");
                    goto label213;
                }
                if ((temp750 == 1)) {
                    this.Manager.Comment("reaching state \'S1889\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp749;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp749 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2867\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp749, "return of NetrLogonControl2, state S2867");
                    this.Manager.Comment("reaching state \'S3495\'");
                    goto label213;
                }
                throw new InvalidOperationException("never reached");
            label213:
;
                goto label215;
            }
            if ((temp755 == 2)) {
                this.Manager.Comment("reaching state \'S619\'");
                bool temp751;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp751);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp751);
                this.Manager.Comment("reaching state \'S1108\'");
                int temp754 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker5)));
                if ((temp754 == 0)) {
                    this.Manager.Comment("reaching state \'S1890\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp752;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp752 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2868\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp752, "return of NetrLogonControl2, state S2868");
                    this.Manager.Comment("reaching state \'S3496\'");
                    goto label214;
                }
                if ((temp754 == 1)) {
                    this.Manager.Comment("reaching state \'S1891\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp753;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp753 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2869\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp753, "return of NetrLogonControl2, state S2869");
                    this.Manager.Comment("reaching state \'S3497\'");
                    goto label214;
                }
                throw new InvalidOperationException("never reached");
            label214:
;
                goto label215;
            }
            throw new InvalidOperationException("never reached");
        label215:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S195");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1106");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1106");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S195");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1107");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S195");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1108");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS194GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1108");
        }
        #endregion
        
        #region Test Starting in S196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196");
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp756;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp756);
            this.Manager.AddReturn(GetPlatformInfo, null, temp756);
            this.Manager.Comment("reaching state \'S197\'");
            int temp769 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetPlatformChecker2)));
            if ((temp769 == 0)) {
                this.Manager.Comment("reaching state \'S620\'");
                bool temp757;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp757);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp757);
                this.Manager.Comment("reaching state \'S1109\'");
                int temp760 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker1)));
                if ((temp760 == 0)) {
                    this.Manager.Comment("reaching state \'S1892\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp758;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,3,Valid)\'");
                    temp758 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2870\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp758, "return of NetrLogonControl2, state S2870");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label216;
                }
                if ((temp760 == 1)) {
                    this.Manager.Comment("reaching state \'S1893\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp759;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,NoValidDomainNameContained)\'" +
                            "");
                    temp759 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2871\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp759, "return of NetrLogonControl2, state S2871");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label216;
                }
                throw new InvalidOperationException("never reached");
            label216:
;
                goto label219;
            }
            if ((temp769 == 1)) {
                this.Manager.Comment("reaching state \'S621\'");
                bool temp761;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp761);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp761);
                this.Manager.Comment("reaching state \'S1110\'");
                int temp764 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker3)));
                if ((temp764 == 0)) {
                    this.Manager.Comment("reaching state \'S1894\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp762;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp762 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2872\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp762, "return of NetrLogonControl2, state S2872");
                    this.Manager.Comment("reaching state \'S3498\'");
                    goto label217;
                }
                if ((temp764 == 1)) {
                    this.Manager.Comment("reaching state \'S1895\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp763;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp763 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2873\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp763, "return of NetrLogonControl2, state S2873");
                    this.Manager.Comment("reaching state \'S3499\'");
                    goto label217;
                }
                throw new InvalidOperationException("never reached");
            label217:
;
                goto label219;
            }
            if ((temp769 == 2)) {
                this.Manager.Comment("reaching state \'S622\'");
                bool temp765;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp765);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp765);
                this.Manager.Comment("reaching state \'S1111\'");
                int temp768 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker5)));
                if ((temp768 == 0)) {
                    this.Manager.Comment("reaching state \'S1896\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp766;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp766 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2874\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp766, "return of NetrLogonControl2, state S2874");
                    this.Manager.Comment("reaching state \'S3500\'");
                    goto label218;
                }
                if ((temp768 == 1)) {
                    this.Manager.Comment("reaching state \'S1897\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp767;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp767 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2875\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp767, "return of NetrLogonControl2, state S2875");
                    this.Manager.Comment("reaching state \'S3501\'");
                    goto label218;
                }
                throw new InvalidOperationException("never reached");
            label218:
;
                goto label219;
            }
            throw new InvalidOperationException("never reached");
        label219:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S197");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1109");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S197");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1110");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1110");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S197");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1111");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS196GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1111");
        }
        #endregion
        
        #region Test Starting in S198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198");
            this.Manager.Comment("reaching state \'S198\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp770;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp770);
            this.Manager.AddReturn(GetPlatformInfo, null, temp770);
            this.Manager.Comment("reaching state \'S199\'");
            int temp783 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetPlatformChecker2)));
            if ((temp783 == 0)) {
                this.Manager.Comment("reaching state \'S623\'");
                bool temp771;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp771);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp771);
                this.Manager.Comment("reaching state \'S1112\'");
                int temp774 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker1)));
                if ((temp774 == 0)) {
                    this.Manager.Comment("reaching state \'S1898\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp772;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,4,Valid)\'");
                    temp772 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2876\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp772, "return of NetrLogonControl2, state S2876");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label220;
                }
                if ((temp774 == 1)) {
                    this.Manager.Comment("reaching state \'S1899\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp773;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,Valid)\'");
                    temp773 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2877\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp773, "return of NetrLogonControl2, state S2877");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label220;
                }
                throw new InvalidOperationException("never reached");
            label220:
;
                goto label223;
            }
            if ((temp783 == 1)) {
                this.Manager.Comment("reaching state \'S624\'");
                bool temp775;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp775);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp775);
                this.Manager.Comment("reaching state \'S1113\'");
                int temp778 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker3)));
                if ((temp778 == 0)) {
                    this.Manager.Comment("reaching state \'S1900\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp776;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp776 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2878\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp776, "return of NetrLogonControl2, state S2878");
                    this.Manager.Comment("reaching state \'S3502\'");
                    goto label221;
                }
                if ((temp778 == 1)) {
                    this.Manager.Comment("reaching state \'S1901\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp777;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp777 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2879\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp777, "return of NetrLogonControl2, state S2879");
                    this.Manager.Comment("reaching state \'S3503\'");
                    goto label221;
                }
                throw new InvalidOperationException("never reached");
            label221:
;
                goto label223;
            }
            if ((temp783 == 2)) {
                this.Manager.Comment("reaching state \'S625\'");
                bool temp779;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp779);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp779);
                this.Manager.Comment("reaching state \'S1114\'");
                int temp782 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker5)));
                if ((temp782 == 0)) {
                    this.Manager.Comment("reaching state \'S1902\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp780;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp780 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2880\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp780, "return of NetrLogonControl2, state S2880");
                    this.Manager.Comment("reaching state \'S3504\'");
                    goto label222;
                }
                if ((temp782 == 1)) {
                    this.Manager.Comment("reaching state \'S1903\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp781;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp781 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2881\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp781, "return of NetrLogonControl2, state S2881");
                    this.Manager.Comment("reaching state \'S3505\'");
                    goto label222;
                }
                throw new InvalidOperationException("never reached");
            label222:
;
                goto label223;
            }
            throw new InvalidOperationException("never reached");
        label223:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S199");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1112");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1112");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S199");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1113");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S199");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1114");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS198GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1114");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2");
            this.Manager.Comment("reaching state \'S2\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp784;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp784);
            this.Manager.AddReturn(GetPlatformInfo, null, temp784);
            this.Manager.Comment("reaching state \'S3\'");
            int temp797 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetPlatformChecker2)));
            if ((temp797 == 0)) {
                this.Manager.Comment("reaching state \'S329\'");
                bool temp785;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp785);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp785);
                this.Manager.Comment("reaching state \'S818\'");
                int temp788 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker1)));
                if ((temp788 == 0)) {
                    this.Manager.Comment("reaching state \'S1310\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp786;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp786 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2288\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp786, "return of NetrLogonControl2, state S2288");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label224;
                }
                if ((temp788 == 1)) {
                    this.Manager.Comment("reaching state \'S1311\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp787;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp787 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2289\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp787, "return of NetrLogonControl2, state S2289");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label224;
                }
                throw new InvalidOperationException("never reached");
            label224:
;
                goto label227;
            }
            if ((temp797 == 1)) {
                this.Manager.Comment("reaching state \'S330\'");
                bool temp789;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp789);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp789);
                this.Manager.Comment("reaching state \'S819\'");
                int temp792 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker3)));
                if ((temp792 == 0)) {
                    this.Manager.Comment("reaching state \'S1312\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp790;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp790 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2290\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp790, "return of NetrLogonControl2, state S2290");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label225;
                }
                if ((temp792 == 1)) {
                    this.Manager.Comment("reaching state \'S1313\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp791;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp791 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2291\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp791, "return of NetrLogonControl2, state S2291");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label225;
                }
                throw new InvalidOperationException("never reached");
            label225:
;
                goto label227;
            }
            if ((temp797 == 2)) {
                this.Manager.Comment("reaching state \'S331\'");
                bool temp793;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp793);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp793);
                this.Manager.Comment("reaching state \'S820\'");
                int temp796 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker5)));
                if ((temp796 == 0)) {
                    this.Manager.Comment("reaching state \'S1314\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp794;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp794 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2292\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp794, "return of NetrLogonControl2, state S2292");
                    this.Manager.Comment("reaching state \'S3270\'");
                    goto label226;
                }
                if ((temp796 == 1)) {
                    this.Manager.Comment("reaching state \'S1315\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp795;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp795 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2293\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp795, "return of NetrLogonControl2, state S2293");
                    this.Manager.Comment("reaching state \'S3271\'");
                    goto label226;
                }
                throw new InvalidOperationException("never reached");
            label226:
;
                goto label227;
            }
            throw new InvalidOperationException("never reached");
        label227:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S818");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S818");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S819");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S819");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S3");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S820");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS2GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S820");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20");
            this.Manager.Comment("reaching state \'S20\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp798;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp798);
            this.Manager.AddReturn(GetPlatformInfo, null, temp798);
            this.Manager.Comment("reaching state \'S21\'");
            int temp811 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetPlatformChecker2)));
            if ((temp811 == 0)) {
                this.Manager.Comment("reaching state \'S356\'");
                bool temp799;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp799);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp799);
                this.Manager.Comment("reaching state \'S845\'");
                int temp802 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker1)));
                if ((temp802 == 0)) {
                    this.Manager.Comment("reaching state \'S1364\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp800;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,Valid)\'");
                    temp800 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2342\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp800, "return of NetrLogonControl2, state S2342");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label228;
                }
                if ((temp802 == 1)) {
                    this.Manager.Comment("reaching state \'S1365\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp801;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,3,Valid)\'");
                    temp801 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2343\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp801, "return of NetrLogonControl2, state S2343");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label228;
                }
                throw new InvalidOperationException("never reached");
            label228:
;
                goto label231;
            }
            if ((temp811 == 1)) {
                this.Manager.Comment("reaching state \'S357\'");
                bool temp803;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp803);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp803);
                this.Manager.Comment("reaching state \'S846\'");
                int temp806 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker3)));
                if ((temp806 == 0)) {
                    this.Manager.Comment("reaching state \'S1366\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp804;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,Valid)\'");
                    temp804 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2344\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp804, "return of NetrLogonControl2, state S2344");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label229;
                }
                if ((temp806 == 1)) {
                    this.Manager.Comment("reaching state \'S1367\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp805;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,NoValidDomainNameContained)" +
                            "\'");
                    temp805 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10477");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2345\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp805, "return of NetrLogonControl2, state S2345");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label229;
                }
                throw new InvalidOperationException("never reached");
            label229:
;
                goto label231;
            }
            if ((temp811 == 2)) {
                this.Manager.Comment("reaching state \'S358\'");
                bool temp807;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp807);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp807);
                this.Manager.Comment("reaching state \'S847\'");
                int temp810 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker5)));
                if ((temp810 == 0)) {
                    this.Manager.Comment("reaching state \'S1368\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp808;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp808 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2346\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp808, "return of NetrLogonControl2, state S2346");
                    this.Manager.Comment("reaching state \'S3288\'");
                    goto label230;
                }
                if ((temp810 == 1)) {
                    this.Manager.Comment("reaching state \'S1369\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp809;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp809 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2347\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp809, "return of NetrLogonControl2, state S2347");
                    this.Manager.Comment("reaching state \'S3289\'");
                    goto label230;
                }
                throw new InvalidOperationException("never reached");
            label230:
;
                goto label231;
            }
            throw new InvalidOperationException("never reached");
        label231:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S845");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S845");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S846");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S846");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S21");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S847");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS20GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S847");
        }
        #endregion
        
        #region Test Starting in S200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200");
            this.Manager.Comment("reaching state \'S200\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp812;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp812);
            this.Manager.AddReturn(GetPlatformInfo, null, temp812);
            this.Manager.Comment("reaching state \'S201\'");
            int temp825 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetPlatformChecker2)));
            if ((temp825 == 0)) {
                this.Manager.Comment("reaching state \'S626\'");
                bool temp813;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp813);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp813);
                this.Manager.Comment("reaching state \'S1115\'");
                int temp816 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker1)));
                if ((temp816 == 0)) {
                    this.Manager.Comment("reaching state \'S1904\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp814;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,2,Valid)\'");
                    temp814 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2882\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp814, "return of NetrLogonControl2, state S2882");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label232;
                }
                if ((temp816 == 1)) {
                    this.Manager.Comment("reaching state \'S1905\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp815;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,Valid)\'");
                    temp815 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2883\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp815, "return of NetrLogonControl2, state S2883");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label232;
                }
                throw new InvalidOperationException("never reached");
            label232:
;
                goto label235;
            }
            if ((temp825 == 1)) {
                this.Manager.Comment("reaching state \'S627\'");
                bool temp817;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp817);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp817);
                this.Manager.Comment("reaching state \'S1116\'");
                int temp820 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker3)));
                if ((temp820 == 0)) {
                    this.Manager.Comment("reaching state \'S1906\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp818;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp818 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2884\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp818, "return of NetrLogonControl2, state S2884");
                    this.Manager.Comment("reaching state \'S3506\'");
                    goto label233;
                }
                if ((temp820 == 1)) {
                    this.Manager.Comment("reaching state \'S1907\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp819;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp819 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2885\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp819, "return of NetrLogonControl2, state S2885");
                    this.Manager.Comment("reaching state \'S3507\'");
                    goto label233;
                }
                throw new InvalidOperationException("never reached");
            label233:
;
                goto label235;
            }
            if ((temp825 == 2)) {
                this.Manager.Comment("reaching state \'S628\'");
                bool temp821;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp821);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp821);
                this.Manager.Comment("reaching state \'S1117\'");
                int temp824 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker5)));
                if ((temp824 == 0)) {
                    this.Manager.Comment("reaching state \'S1908\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp822;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp822 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2886\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp822, "return of NetrLogonControl2, state S2886");
                    this.Manager.Comment("reaching state \'S3508\'");
                    goto label234;
                }
                if ((temp824 == 1)) {
                    this.Manager.Comment("reaching state \'S1909\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp823;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp823 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2887\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp823, "return of NetrLogonControl2, state S2887");
                    this.Manager.Comment("reaching state \'S3509\'");
                    goto label234;
                }
                throw new InvalidOperationException("never reached");
            label234:
;
                goto label235;
            }
            throw new InvalidOperationException("never reached");
        label235:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S201");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1115");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S201");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1116");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1116");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S201");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1117");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS200GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1117");
        }
        #endregion
        
        #region Test Starting in S202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202");
            this.Manager.Comment("reaching state \'S202\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp826;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp826);
            this.Manager.AddReturn(GetPlatformInfo, null, temp826);
            this.Manager.Comment("reaching state \'S203\'");
            int temp839 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetPlatformChecker2)));
            if ((temp839 == 0)) {
                this.Manager.Comment("reaching state \'S629\'");
                bool temp827;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp827);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp827);
                this.Manager.Comment("reaching state \'S1118\'");
                int temp830 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker1)));
                if ((temp830 == 0)) {
                    this.Manager.Comment("reaching state \'S1910\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp828;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,1,Valid)\'");
                    temp828 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2888\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp828, "return of NetrLogonControl2, state S2888");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label236;
                }
                if ((temp830 == 1)) {
                    this.Manager.Comment("reaching state \'S1911\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp829;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,Valid)\'");
                    temp829 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2889\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp829, "return of NetrLogonControl2, state S2889");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label236;
                }
                throw new InvalidOperationException("never reached");
            label236:
;
                goto label239;
            }
            if ((temp839 == 1)) {
                this.Manager.Comment("reaching state \'S630\'");
                bool temp831;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp831);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp831);
                this.Manager.Comment("reaching state \'S1119\'");
                int temp834 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker3)));
                if ((temp834 == 0)) {
                    this.Manager.Comment("reaching state \'S1912\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp832;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp832 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2890\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp832, "return of NetrLogonControl2, state S2890");
                    this.Manager.Comment("reaching state \'S3510\'");
                    goto label237;
                }
                if ((temp834 == 1)) {
                    this.Manager.Comment("reaching state \'S1913\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp833;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp833 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2891\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp833, "return of NetrLogonControl2, state S2891");
                    this.Manager.Comment("reaching state \'S3511\'");
                    goto label237;
                }
                throw new InvalidOperationException("never reached");
            label237:
;
                goto label239;
            }
            if ((temp839 == 2)) {
                this.Manager.Comment("reaching state \'S631\'");
                bool temp835;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp835);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp835);
                this.Manager.Comment("reaching state \'S1120\'");
                int temp838 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker5)));
                if ((temp838 == 0)) {
                    this.Manager.Comment("reaching state \'S1914\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp836;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp836 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2892\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp836, "return of NetrLogonControl2, state S2892");
                    this.Manager.Comment("reaching state \'S3512\'");
                    goto label238;
                }
                if ((temp838 == 1)) {
                    this.Manager.Comment("reaching state \'S1915\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp837;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp837 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2893\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp837, "return of NetrLogonControl2, state S2893");
                    this.Manager.Comment("reaching state \'S3513\'");
                    goto label238;
                }
                throw new InvalidOperationException("never reached");
            label238:
;
                goto label239;
            }
            throw new InvalidOperationException("never reached");
        label239:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S203");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1118");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1118");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S203");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1119");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S203");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1120");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS202GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1120");
        }
        #endregion
        
        #region Test Starting in S204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204");
            this.Manager.Comment("reaching state \'S204\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp840;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp840);
            this.Manager.AddReturn(GetPlatformInfo, null, temp840);
            this.Manager.Comment("reaching state \'S205\'");
            int temp853 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetPlatformChecker2)));
            if ((temp853 == 0)) {
                this.Manager.Comment("reaching state \'S632\'");
                bool temp841;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp841);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp841);
                this.Manager.Comment("reaching state \'S1121\'");
                int temp844 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker1)));
                if ((temp844 == 0)) {
                    this.Manager.Comment("reaching state \'S1916\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp842;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,NoValidDomainNameContained)\'" +
                            "");
                    temp842 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2894\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp842, "return of NetrLogonControl2, state S2894");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label240;
                }
                if ((temp844 == 1)) {
                    this.Manager.Comment("reaching state \'S1917\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp843;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,Valid)\'");
                    temp843 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2895\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp843, "return of NetrLogonControl2, state S2895");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label240;
                }
                throw new InvalidOperationException("never reached");
            label240:
;
                goto label243;
            }
            if ((temp853 == 1)) {
                this.Manager.Comment("reaching state \'S633\'");
                bool temp845;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp845);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp845);
                this.Manager.Comment("reaching state \'S1122\'");
                int temp848 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker3)));
                if ((temp848 == 0)) {
                    this.Manager.Comment("reaching state \'S1918\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp846;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp846 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2896\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp846, "return of NetrLogonControl2, state S2896");
                    this.Manager.Comment("reaching state \'S3514\'");
                    goto label241;
                }
                if ((temp848 == 1)) {
                    this.Manager.Comment("reaching state \'S1919\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp847;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp847 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2897\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp847, "return of NetrLogonControl2, state S2897");
                    this.Manager.Comment("reaching state \'S3515\'");
                    goto label241;
                }
                throw new InvalidOperationException("never reached");
            label241:
;
                goto label243;
            }
            if ((temp853 == 2)) {
                this.Manager.Comment("reaching state \'S634\'");
                bool temp849;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp849);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp849);
                this.Manager.Comment("reaching state \'S1123\'");
                int temp852 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker5)));
                if ((temp852 == 0)) {
                    this.Manager.Comment("reaching state \'S1920\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp850;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp850 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2898\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp850, "return of NetrLogonControl2, state S2898");
                    this.Manager.Comment("reaching state \'S3516\'");
                    goto label242;
                }
                if ((temp852 == 1)) {
                    this.Manager.Comment("reaching state \'S1921\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp851;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp851 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2899\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp851, "return of NetrLogonControl2, state S2899");
                    this.Manager.Comment("reaching state \'S3517\'");
                    goto label242;
                }
                throw new InvalidOperationException("never reached");
            label242:
;
                goto label243;
            }
            throw new InvalidOperationException("never reached");
        label243:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S205");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1121");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S205");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1122");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1122");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S205");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1123");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS204GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1123");
        }
        #endregion
        
        #region Test Starting in S206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206");
            this.Manager.Comment("reaching state \'S206\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp854;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp854);
            this.Manager.AddReturn(GetPlatformInfo, null, temp854);
            this.Manager.Comment("reaching state \'S207\'");
            int temp867 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetPlatformChecker2)));
            if ((temp867 == 0)) {
                this.Manager.Comment("reaching state \'S635\'");
                bool temp855;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp855);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp855);
                this.Manager.Comment("reaching state \'S1124\'");
                int temp858 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker1)));
                if ((temp858 == 0)) {
                    this.Manager.Comment("reaching state \'S1922\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp856;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,NoValidDomainNameContained)\'" +
                            "");
                    temp856 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2900\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp856, "return of NetrLogonControl2, state S2900");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label244;
                }
                if ((temp858 == 1)) {
                    this.Manager.Comment("reaching state \'S1923\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp857;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,Valid)\'");
                    temp857 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2901\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp857, "return of NetrLogonControl2, state S2901");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label244;
                }
                throw new InvalidOperationException("never reached");
            label244:
;
                goto label247;
            }
            if ((temp867 == 1)) {
                this.Manager.Comment("reaching state \'S636\'");
                bool temp859;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp859);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp859);
                this.Manager.Comment("reaching state \'S1125\'");
                int temp862 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker3)));
                if ((temp862 == 0)) {
                    this.Manager.Comment("reaching state \'S1924\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp860;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp860 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2902\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp860, "return of NetrLogonControl2, state S2902");
                    this.Manager.Comment("reaching state \'S3518\'");
                    goto label245;
                }
                if ((temp862 == 1)) {
                    this.Manager.Comment("reaching state \'S1925\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp861;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp861 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2903\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp861, "return of NetrLogonControl2, state S2903");
                    this.Manager.Comment("reaching state \'S3519\'");
                    goto label245;
                }
                throw new InvalidOperationException("never reached");
            label245:
;
                goto label247;
            }
            if ((temp867 == 2)) {
                this.Manager.Comment("reaching state \'S637\'");
                bool temp863;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp863);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp863);
                this.Manager.Comment("reaching state \'S1126\'");
                int temp866 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker5)));
                if ((temp866 == 0)) {
                    this.Manager.Comment("reaching state \'S1926\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp864;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp864 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2904\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp864, "return of NetrLogonControl2, state S2904");
                    this.Manager.Comment("reaching state \'S3520\'");
                    goto label246;
                }
                if ((temp866 == 1)) {
                    this.Manager.Comment("reaching state \'S1927\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp865;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp865 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2905\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp865, "return of NetrLogonControl2, state S2905");
                    this.Manager.Comment("reaching state \'S3521\'");
                    goto label246;
                }
                throw new InvalidOperationException("never reached");
            label246:
;
                goto label247;
            }
            throw new InvalidOperationException("never reached");
        label247:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S207");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1124");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1124");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S207");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1125");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S207");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1126");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS206GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1126");
        }
        #endregion
        
        #region Test Starting in S208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208");
            this.Manager.Comment("reaching state \'S208\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp868;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp868);
            this.Manager.AddReturn(GetPlatformInfo, null, temp868);
            this.Manager.Comment("reaching state \'S209\'");
            int temp881 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetPlatformChecker2)));
            if ((temp881 == 0)) {
                this.Manager.Comment("reaching state \'S638\'");
                bool temp869;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp869);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp869);
                this.Manager.Comment("reaching state \'S1127\'");
                int temp872 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker1)));
                if ((temp872 == 0)) {
                    this.Manager.Comment("reaching state \'S1928\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp870;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,NoValidDomainNameContained)\'" +
                            "");
                    temp870 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2906\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp870, "return of NetrLogonControl2, state S2906");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label248;
                }
                if ((temp872 == 1)) {
                    this.Manager.Comment("reaching state \'S1929\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp871;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp871 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2907\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp871, "return of NetrLogonControl2, state S2907");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label248;
                }
                throw new InvalidOperationException("never reached");
            label248:
;
                goto label251;
            }
            if ((temp881 == 1)) {
                this.Manager.Comment("reaching state \'S639\'");
                bool temp873;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp873);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp873);
                this.Manager.Comment("reaching state \'S1128\'");
                int temp876 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker3)));
                if ((temp876 == 0)) {
                    this.Manager.Comment("reaching state \'S1930\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp874;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp874 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2908\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp874, "return of NetrLogonControl2, state S2908");
                    this.Manager.Comment("reaching state \'S3522\'");
                    goto label249;
                }
                if ((temp876 == 1)) {
                    this.Manager.Comment("reaching state \'S1931\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp875;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp875 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2909\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp875, "return of NetrLogonControl2, state S2909");
                    this.Manager.Comment("reaching state \'S3523\'");
                    goto label249;
                }
                throw new InvalidOperationException("never reached");
            label249:
;
                goto label251;
            }
            if ((temp881 == 2)) {
                this.Manager.Comment("reaching state \'S640\'");
                bool temp877;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp877);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp877);
                this.Manager.Comment("reaching state \'S1129\'");
                int temp880 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker5)));
                if ((temp880 == 0)) {
                    this.Manager.Comment("reaching state \'S1932\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp878;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp878 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2910\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp878, "return of NetrLogonControl2, state S2910");
                    this.Manager.Comment("reaching state \'S3524\'");
                    goto label250;
                }
                if ((temp880 == 1)) {
                    this.Manager.Comment("reaching state \'S1933\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp879;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp879 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2911\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp879, "return of NetrLogonControl2, state S2911");
                    this.Manager.Comment("reaching state \'S3525\'");
                    goto label250;
                }
                throw new InvalidOperationException("never reached");
            label250:
;
                goto label251;
            }
            throw new InvalidOperationException("never reached");
        label251:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S209");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1127");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S209");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1128");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1128");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S209");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1129");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS208GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1129");
        }
        #endregion
        
        #region Test Starting in S210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210");
            this.Manager.Comment("reaching state \'S210\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp882;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp882);
            this.Manager.AddReturn(GetPlatformInfo, null, temp882);
            this.Manager.Comment("reaching state \'S211\'");
            int temp895 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetPlatformChecker2)));
            if ((temp895 == 0)) {
                this.Manager.Comment("reaching state \'S641\'");
                bool temp883;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp883);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp883);
                this.Manager.Comment("reaching state \'S1130\'");
                int temp886 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker1)));
                if ((temp886 == 0)) {
                    this.Manager.Comment("reaching state \'S1934\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp884;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,NoValidDomainNameContained)\'" +
                            "");
                    temp884 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2912\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp884, "return of NetrLogonControl2, state S2912");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label252;
                }
                if ((temp886 == 1)) {
                    this.Manager.Comment("reaching state \'S1935\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp885;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,Valid)\'");
                    temp885 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2913\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp885, "return of NetrLogonControl2, state S2913");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label252;
                }
                throw new InvalidOperationException("never reached");
            label252:
;
                goto label255;
            }
            if ((temp895 == 1)) {
                this.Manager.Comment("reaching state \'S642\'");
                bool temp887;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp887);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp887);
                this.Manager.Comment("reaching state \'S1131\'");
                int temp890 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker3)));
                if ((temp890 == 0)) {
                    this.Manager.Comment("reaching state \'S1936\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp888;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp888 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2914\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp888, "return of NetrLogonControl2, state S2914");
                    this.Manager.Comment("reaching state \'S3526\'");
                    goto label253;
                }
                if ((temp890 == 1)) {
                    this.Manager.Comment("reaching state \'S1937\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp889;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp889 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2915\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp889, "return of NetrLogonControl2, state S2915");
                    this.Manager.Comment("reaching state \'S3527\'");
                    goto label253;
                }
                throw new InvalidOperationException("never reached");
            label253:
;
                goto label255;
            }
            if ((temp895 == 2)) {
                this.Manager.Comment("reaching state \'S643\'");
                bool temp891;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp891);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp891);
                this.Manager.Comment("reaching state \'S1132\'");
                int temp894 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker5)));
                if ((temp894 == 0)) {
                    this.Manager.Comment("reaching state \'S1938\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp892;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp892 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2916\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp892, "return of NetrLogonControl2, state S2916");
                    this.Manager.Comment("reaching state \'S3528\'");
                    goto label254;
                }
                if ((temp894 == 1)) {
                    this.Manager.Comment("reaching state \'S1939\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp893;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp893 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2917\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp893, "return of NetrLogonControl2, state S2917");
                    this.Manager.Comment("reaching state \'S3529\'");
                    goto label254;
                }
                throw new InvalidOperationException("never reached");
            label254:
;
                goto label255;
            }
            throw new InvalidOperationException("never reached");
        label255:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S211");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1130");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1130");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S211");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1131");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S211");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1132");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS210GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1132");
        }
        #endregion
        
        #region Test Starting in S212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212");
            this.Manager.Comment("reaching state \'S212\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp896;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp896);
            this.Manager.AddReturn(GetPlatformInfo, null, temp896);
            this.Manager.Comment("reaching state \'S213\'");
            int temp909 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetPlatformChecker2)));
            if ((temp909 == 0)) {
                this.Manager.Comment("reaching state \'S644\'");
                bool temp897;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp897);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp897);
                this.Manager.Comment("reaching state \'S1133\'");
                int temp900 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker1)));
                if ((temp900 == 0)) {
                    this.Manager.Comment("reaching state \'S1940\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp898;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,NoValidDomainNameContained)\'" +
                            "");
                    temp898 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2918\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp898, "return of NetrLogonControl2, state S2918");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label256;
                }
                if ((temp900 == 1)) {
                    this.Manager.Comment("reaching state \'S1941\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp899;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,2,Valid)\'");
                    temp899 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2919\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp899, "return of NetrLogonControl2, state S2919");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label256;
                }
                throw new InvalidOperationException("never reached");
            label256:
;
                goto label259;
            }
            if ((temp909 == 1)) {
                this.Manager.Comment("reaching state \'S645\'");
                bool temp901;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp901);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp901);
                this.Manager.Comment("reaching state \'S1134\'");
                int temp904 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker3)));
                if ((temp904 == 0)) {
                    this.Manager.Comment("reaching state \'S1942\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp902;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp902 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2920\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp902, "return of NetrLogonControl2, state S2920");
                    this.Manager.Comment("reaching state \'S3530\'");
                    goto label257;
                }
                if ((temp904 == 1)) {
                    this.Manager.Comment("reaching state \'S1943\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp903;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp903 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2921\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp903, "return of NetrLogonControl2, state S2921");
                    this.Manager.Comment("reaching state \'S3531\'");
                    goto label257;
                }
                throw new InvalidOperationException("never reached");
            label257:
;
                goto label259;
            }
            if ((temp909 == 2)) {
                this.Manager.Comment("reaching state \'S646\'");
                bool temp905;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp905);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp905);
                this.Manager.Comment("reaching state \'S1135\'");
                int temp908 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker5)));
                if ((temp908 == 0)) {
                    this.Manager.Comment("reaching state \'S1944\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp906;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp906 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2922\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp906, "return of NetrLogonControl2, state S2922");
                    this.Manager.Comment("reaching state \'S3532\'");
                    goto label258;
                }
                if ((temp908 == 1)) {
                    this.Manager.Comment("reaching state \'S1945\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp907;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp907 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2923\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp907, "return of NetrLogonControl2, state S2923");
                    this.Manager.Comment("reaching state \'S3533\'");
                    goto label258;
                }
                throw new InvalidOperationException("never reached");
            label258:
;
                goto label259;
            }
            throw new InvalidOperationException("never reached");
        label259:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S213");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1133");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S213");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1134");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1134");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S213");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1135");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS212GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1135");
        }
        #endregion
        
        #region Test Starting in S214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214");
            this.Manager.Comment("reaching state \'S214\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp910;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp910);
            this.Manager.AddReturn(GetPlatformInfo, null, temp910);
            this.Manager.Comment("reaching state \'S215\'");
            int temp923 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetPlatformChecker2)));
            if ((temp923 == 0)) {
                this.Manager.Comment("reaching state \'S647\'");
                bool temp911;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp911);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp911);
                this.Manager.Comment("reaching state \'S1136\'");
                int temp914 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker1)));
                if ((temp914 == 0)) {
                    this.Manager.Comment("reaching state \'S1946\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp912;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,NoValidDomainNameContained)\'" +
                            "");
                    temp912 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2924\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp912, "return of NetrLogonControl2, state S2924");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label260;
                }
                if ((temp914 == 1)) {
                    this.Manager.Comment("reaching state \'S1947\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp913;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,2,Valid)\'");
                    temp913 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2925\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp913, "return of NetrLogonControl2, state S2925");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label260;
                }
                throw new InvalidOperationException("never reached");
            label260:
;
                goto label263;
            }
            if ((temp923 == 1)) {
                this.Manager.Comment("reaching state \'S648\'");
                bool temp915;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp915);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp915);
                this.Manager.Comment("reaching state \'S1137\'");
                int temp918 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker3)));
                if ((temp918 == 0)) {
                    this.Manager.Comment("reaching state \'S1948\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp916;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp916 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2926\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp916, "return of NetrLogonControl2, state S2926");
                    this.Manager.Comment("reaching state \'S3534\'");
                    goto label261;
                }
                if ((temp918 == 1)) {
                    this.Manager.Comment("reaching state \'S1949\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp917;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp917 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2927\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp917, "return of NetrLogonControl2, state S2927");
                    this.Manager.Comment("reaching state \'S3535\'");
                    goto label261;
                }
                throw new InvalidOperationException("never reached");
            label261:
;
                goto label263;
            }
            if ((temp923 == 2)) {
                this.Manager.Comment("reaching state \'S649\'");
                bool temp919;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp919);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp919);
                this.Manager.Comment("reaching state \'S1138\'");
                int temp922 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker5)));
                if ((temp922 == 0)) {
                    this.Manager.Comment("reaching state \'S1950\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp920;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp920 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2928\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp920, "return of NetrLogonControl2, state S2928");
                    this.Manager.Comment("reaching state \'S3536\'");
                    goto label262;
                }
                if ((temp922 == 1)) {
                    this.Manager.Comment("reaching state \'S1951\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp921;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp921 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2929\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp921, "return of NetrLogonControl2, state S2929");
                    this.Manager.Comment("reaching state \'S3537\'");
                    goto label262;
                }
                throw new InvalidOperationException("never reached");
            label262:
;
                goto label263;
            }
            throw new InvalidOperationException("never reached");
        label263:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S215");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1136");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1136");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S215");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1137");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S215");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1138");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS214GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1138");
        }
        #endregion
        
        #region Test Starting in S216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216");
            this.Manager.Comment("reaching state \'S216\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp924;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp924);
            this.Manager.AddReturn(GetPlatformInfo, null, temp924);
            this.Manager.Comment("reaching state \'S217\'");
            int temp937 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetPlatformChecker2)));
            if ((temp937 == 0)) {
                this.Manager.Comment("reaching state \'S650\'");
                bool temp925;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp925);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp925);
                this.Manager.Comment("reaching state \'S1139\'");
                int temp928 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker1)));
                if ((temp928 == 0)) {
                    this.Manager.Comment("reaching state \'S1952\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp926;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,NoValidDomainNameContained)\'" +
                            "");
                    temp926 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2930\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp926, "return of NetrLogonControl2, state S2930");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label264;
                }
                if ((temp928 == 1)) {
                    this.Manager.Comment("reaching state \'S1953\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp927;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,2,Valid)\'");
                    temp927 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2931\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp927, "return of NetrLogonControl2, state S2931");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label264;
                }
                throw new InvalidOperationException("never reached");
            label264:
;
                goto label267;
            }
            if ((temp937 == 1)) {
                this.Manager.Comment("reaching state \'S651\'");
                bool temp929;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp929);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp929);
                this.Manager.Comment("reaching state \'S1140\'");
                int temp932 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker3)));
                if ((temp932 == 0)) {
                    this.Manager.Comment("reaching state \'S1954\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp930;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp930 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2932\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp930, "return of NetrLogonControl2, state S2932");
                    this.Manager.Comment("reaching state \'S3538\'");
                    goto label265;
                }
                if ((temp932 == 1)) {
                    this.Manager.Comment("reaching state \'S1955\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp931;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp931 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2933\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp931, "return of NetrLogonControl2, state S2933");
                    this.Manager.Comment("reaching state \'S3539\'");
                    goto label265;
                }
                throw new InvalidOperationException("never reached");
            label265:
;
                goto label267;
            }
            if ((temp937 == 2)) {
                this.Manager.Comment("reaching state \'S652\'");
                bool temp933;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp933);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp933);
                this.Manager.Comment("reaching state \'S1141\'");
                int temp936 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker5)));
                if ((temp936 == 0)) {
                    this.Manager.Comment("reaching state \'S1956\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp934;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp934 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2934\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp934, "return of NetrLogonControl2, state S2934");
                    this.Manager.Comment("reaching state \'S3540\'");
                    goto label266;
                }
                if ((temp936 == 1)) {
                    this.Manager.Comment("reaching state \'S1957\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp935;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp935 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2935\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp935, "return of NetrLogonControl2, state S2935");
                    this.Manager.Comment("reaching state \'S3541\'");
                    goto label266;
                }
                throw new InvalidOperationException("never reached");
            label266:
;
                goto label267;
            }
            throw new InvalidOperationException("never reached");
        label267:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S217");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1139");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S217");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1140");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1140");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S217");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1141");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS216GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1141");
        }
        #endregion
        
        #region Test Starting in S218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218");
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp938;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp938);
            this.Manager.AddReturn(GetPlatformInfo, null, temp938);
            this.Manager.Comment("reaching state \'S219\'");
            int temp951 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetPlatformChecker2)));
            if ((temp951 == 0)) {
                this.Manager.Comment("reaching state \'S653\'");
                bool temp939;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp939);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp939);
                this.Manager.Comment("reaching state \'S1142\'");
                int temp942 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker1)));
                if ((temp942 == 0)) {
                    this.Manager.Comment("reaching state \'S1958\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp940;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,3,Valid)\'");
                    temp940 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2936\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp940, "return of NetrLogonControl2, state S2936");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label268;
                }
                if ((temp942 == 1)) {
                    this.Manager.Comment("reaching state \'S1959\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp941;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,2,Valid)\'");
                    temp941 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2937\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp941, "return of NetrLogonControl2, state S2937");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label268;
                }
                throw new InvalidOperationException("never reached");
            label268:
;
                goto label271;
            }
            if ((temp951 == 1)) {
                this.Manager.Comment("reaching state \'S654\'");
                bool temp943;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp943);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp943);
                this.Manager.Comment("reaching state \'S1143\'");
                int temp946 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker3)));
                if ((temp946 == 0)) {
                    this.Manager.Comment("reaching state \'S1960\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp944;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp944 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2938\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp944, "return of NetrLogonControl2, state S2938");
                    this.Manager.Comment("reaching state \'S3542\'");
                    goto label269;
                }
                if ((temp946 == 1)) {
                    this.Manager.Comment("reaching state \'S1961\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp945;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp945 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2939\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp945, "return of NetrLogonControl2, state S2939");
                    this.Manager.Comment("reaching state \'S3543\'");
                    goto label269;
                }
                throw new InvalidOperationException("never reached");
            label269:
;
                goto label271;
            }
            if ((temp951 == 2)) {
                this.Manager.Comment("reaching state \'S655\'");
                bool temp947;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp947);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp947);
                this.Manager.Comment("reaching state \'S1144\'");
                int temp950 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker5)));
                if ((temp950 == 0)) {
                    this.Manager.Comment("reaching state \'S1962\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp948;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp948 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2940\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp948, "return of NetrLogonControl2, state S2940");
                    this.Manager.Comment("reaching state \'S3544\'");
                    goto label270;
                }
                if ((temp950 == 1)) {
                    this.Manager.Comment("reaching state \'S1963\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp949;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp949 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2941\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp949, "return of NetrLogonControl2, state S2941");
                    this.Manager.Comment("reaching state \'S3545\'");
                    goto label270;
                }
                throw new InvalidOperationException("never reached");
            label270:
;
                goto label271;
            }
            throw new InvalidOperationException("never reached");
        label271:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S219");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1142");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1142");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S219");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1143");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S219");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1144");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS218GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1144");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22");
            this.Manager.Comment("reaching state \'S22\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp952;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp952);
            this.Manager.AddReturn(GetPlatformInfo, null, temp952);
            this.Manager.Comment("reaching state \'S23\'");
            int temp965 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetPlatformChecker2)));
            if ((temp965 == 0)) {
                this.Manager.Comment("reaching state \'S359\'");
                bool temp953;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp953);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp953);
                this.Manager.Comment("reaching state \'S848\'");
                int temp956 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker1)));
                if ((temp956 == 0)) {
                    this.Manager.Comment("reaching state \'S1370\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp954;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,Valid)\'");
                    temp954 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2348\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp954, "return of NetrLogonControl2, state S2348");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label272;
                }
                if ((temp956 == 1)) {
                    this.Manager.Comment("reaching state \'S1371\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp955;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,2,Valid)\'");
                    temp955 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2349\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp955, "return of NetrLogonControl2, state S2349");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label272;
                }
                throw new InvalidOperationException("never reached");
            label272:
;
                goto label275;
            }
            if ((temp965 == 1)) {
                this.Manager.Comment("reaching state \'S360\'");
                bool temp957;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp957);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp957);
                this.Manager.Comment("reaching state \'S849\'");
                int temp960 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker3)));
                if ((temp960 == 0)) {
                    this.Manager.Comment("reaching state \'S1372\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp958;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,Valid)\'");
                    temp958 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2350\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp958, "return of NetrLogonControl2, state S2350");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label273;
                }
                if ((temp960 == 1)) {
                    this.Manager.Comment("reaching state \'S1373\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp959;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,NoValidDomainNameContained)" +
                            "\'");
                    temp959 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2351\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp959, "return of NetrLogonControl2, state S2351");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label273;
                }
                throw new InvalidOperationException("never reached");
            label273:
;
                goto label275;
            }
            if ((temp965 == 2)) {
                this.Manager.Comment("reaching state \'S361\'");
                bool temp961;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp961);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp961);
                this.Manager.Comment("reaching state \'S850\'");
                int temp964 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker5)));
                if ((temp964 == 0)) {
                    this.Manager.Comment("reaching state \'S1374\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp962;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp962 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2352\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp962, "return of NetrLogonControl2, state S2352");
                    this.Manager.Comment("reaching state \'S3290\'");
                    goto label274;
                }
                if ((temp964 == 1)) {
                    this.Manager.Comment("reaching state \'S1375\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp963;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp963 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2353\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp963, "return of NetrLogonControl2, state S2353");
                    this.Manager.Comment("reaching state \'S3291\'");
                    goto label274;
                }
                throw new InvalidOperationException("never reached");
            label274:
;
                goto label275;
            }
            throw new InvalidOperationException("never reached");
        label275:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S848");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S848");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S849");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S849");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S23");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S850");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS22GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S850");
        }
        #endregion
        
        #region Test Starting in S220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220");
            this.Manager.Comment("reaching state \'S220\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp966;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp966);
            this.Manager.AddReturn(GetPlatformInfo, null, temp966);
            this.Manager.Comment("reaching state \'S221\'");
            int temp979 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetPlatformChecker2)));
            if ((temp979 == 0)) {
                this.Manager.Comment("reaching state \'S656\'");
                bool temp967;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp967);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp967);
                this.Manager.Comment("reaching state \'S1145\'");
                int temp970 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker1)));
                if ((temp970 == 0)) {
                    this.Manager.Comment("reaching state \'S1964\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp968;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,1,Valid)\'");
                    temp968 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2942\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp968, "return of NetrLogonControl2, state S2942");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label276;
                }
                if ((temp970 == 1)) {
                    this.Manager.Comment("reaching state \'S1965\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp969;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,2,Valid)\'");
                    temp969 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2943\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp969, "return of NetrLogonControl2, state S2943");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label276;
                }
                throw new InvalidOperationException("never reached");
            label276:
;
                goto label279;
            }
            if ((temp979 == 1)) {
                this.Manager.Comment("reaching state \'S657\'");
                bool temp971;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp971);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp971);
                this.Manager.Comment("reaching state \'S1146\'");
                int temp974 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker3)));
                if ((temp974 == 0)) {
                    this.Manager.Comment("reaching state \'S1966\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp972;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp972 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2944\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp972, "return of NetrLogonControl2, state S2944");
                    this.Manager.Comment("reaching state \'S3546\'");
                    goto label277;
                }
                if ((temp974 == 1)) {
                    this.Manager.Comment("reaching state \'S1967\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp973;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp973 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2945\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp973, "return of NetrLogonControl2, state S2945");
                    this.Manager.Comment("reaching state \'S3547\'");
                    goto label277;
                }
                throw new InvalidOperationException("never reached");
            label277:
;
                goto label279;
            }
            if ((temp979 == 2)) {
                this.Manager.Comment("reaching state \'S658\'");
                bool temp975;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp975);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp975);
                this.Manager.Comment("reaching state \'S1147\'");
                int temp978 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker5)));
                if ((temp978 == 0)) {
                    this.Manager.Comment("reaching state \'S1968\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp976;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp976 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2946\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp976, "return of NetrLogonControl2, state S2946");
                    this.Manager.Comment("reaching state \'S3548\'");
                    goto label278;
                }
                if ((temp978 == 1)) {
                    this.Manager.Comment("reaching state \'S1969\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp977;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp977 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2947\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp977, "return of NetrLogonControl2, state S2947");
                    this.Manager.Comment("reaching state \'S3549\'");
                    goto label278;
                }
                throw new InvalidOperationException("never reached");
            label278:
;
                goto label279;
            }
            throw new InvalidOperationException("never reached");
        label279:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S221");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1145");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S221");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1146");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1146");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S221");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1147");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS220GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1147");
        }
        #endregion
        
        #region Test Starting in S222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222");
            this.Manager.Comment("reaching state \'S222\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp980;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp980);
            this.Manager.AddReturn(GetPlatformInfo, null, temp980);
            this.Manager.Comment("reaching state \'S223\'");
            int temp993 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetPlatformChecker2)));
            if ((temp993 == 0)) {
                this.Manager.Comment("reaching state \'S659\'");
                bool temp981;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp981);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp981);
                this.Manager.Comment("reaching state \'S1148\'");
                int temp984 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker1)));
                if ((temp984 == 0)) {
                    this.Manager.Comment("reaching state \'S1970\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp982;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,4,Valid)\'");
                    temp982 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2948\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp982, "return of NetrLogonControl2, state S2948");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label280;
                }
                if ((temp984 == 1)) {
                    this.Manager.Comment("reaching state \'S1971\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp983;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,2,Valid)\'");
                    temp983 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104100");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2949\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp983, "return of NetrLogonControl2, state S2949");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label280;
                }
                throw new InvalidOperationException("never reached");
            label280:
;
                goto label283;
            }
            if ((temp993 == 1)) {
                this.Manager.Comment("reaching state \'S660\'");
                bool temp985;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp985);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp985);
                this.Manager.Comment("reaching state \'S1149\'");
                int temp988 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker3)));
                if ((temp988 == 0)) {
                    this.Manager.Comment("reaching state \'S1972\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp986;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp986 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2950\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp986, "return of NetrLogonControl2, state S2950");
                    this.Manager.Comment("reaching state \'S3550\'");
                    goto label281;
                }
                if ((temp988 == 1)) {
                    this.Manager.Comment("reaching state \'S1973\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp987;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp987 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2951\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp987, "return of NetrLogonControl2, state S2951");
                    this.Manager.Comment("reaching state \'S3551\'");
                    goto label281;
                }
                throw new InvalidOperationException("never reached");
            label281:
;
                goto label283;
            }
            if ((temp993 == 2)) {
                this.Manager.Comment("reaching state \'S661\'");
                bool temp989;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp989);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp989);
                this.Manager.Comment("reaching state \'S1150\'");
                int temp992 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker5)));
                if ((temp992 == 0)) {
                    this.Manager.Comment("reaching state \'S1974\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp990;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp990 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2952\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp990, "return of NetrLogonControl2, state S2952");
                    this.Manager.Comment("reaching state \'S3552\'");
                    goto label282;
                }
                if ((temp992 == 1)) {
                    this.Manager.Comment("reaching state \'S1975\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp991;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp991 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2953\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp991, "return of NetrLogonControl2, state S2953");
                    this.Manager.Comment("reaching state \'S3553\'");
                    goto label282;
                }
                throw new InvalidOperationException("never reached");
            label282:
;
                goto label283;
            }
            throw new InvalidOperationException("never reached");
        label283:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S223");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1148");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1148");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S223");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1149");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S223");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1150");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS222GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1150");
        }
        #endregion
        
        #region Test Starting in S224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224");
            this.Manager.Comment("reaching state \'S224\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp994;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp994);
            this.Manager.AddReturn(GetPlatformInfo, null, temp994);
            this.Manager.Comment("reaching state \'S225\'");
            int temp1007 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetPlatformChecker2)));
            if ((temp1007 == 0)) {
                this.Manager.Comment("reaching state \'S662\'");
                bool temp995;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp995);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp995);
                this.Manager.Comment("reaching state \'S1151\'");
                int temp998 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker1)));
                if ((temp998 == 0)) {
                    this.Manager.Comment("reaching state \'S1976\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp996;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,2,Valid)\'");
                    temp996 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2954\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp996, "return of NetrLogonControl2, state S2954");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label284;
                }
                if ((temp998 == 1)) {
                    this.Manager.Comment("reaching state \'S1977\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp997;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,2,Valid)\'");
                    temp997 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2955\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp997, "return of NetrLogonControl2, state S2955");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label284;
                }
                throw new InvalidOperationException("never reached");
            label284:
;
                goto label287;
            }
            if ((temp1007 == 1)) {
                this.Manager.Comment("reaching state \'S663\'");
                bool temp999;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp999);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp999);
                this.Manager.Comment("reaching state \'S1152\'");
                int temp1002 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker3)));
                if ((temp1002 == 0)) {
                    this.Manager.Comment("reaching state \'S1978\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1000;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1000 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2956\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1000, "return of NetrLogonControl2, state S2956");
                    this.Manager.Comment("reaching state \'S3554\'");
                    goto label285;
                }
                if ((temp1002 == 1)) {
                    this.Manager.Comment("reaching state \'S1979\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1001;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1001 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2957\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1001, "return of NetrLogonControl2, state S2957");
                    this.Manager.Comment("reaching state \'S3555\'");
                    goto label285;
                }
                throw new InvalidOperationException("never reached");
            label285:
;
                goto label287;
            }
            if ((temp1007 == 2)) {
                this.Manager.Comment("reaching state \'S664\'");
                bool temp1003;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1003);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1003);
                this.Manager.Comment("reaching state \'S1153\'");
                int temp1006 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker5)));
                if ((temp1006 == 0)) {
                    this.Manager.Comment("reaching state \'S1980\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1004;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1004 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2958\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1004, "return of NetrLogonControl2, state S2958");
                    this.Manager.Comment("reaching state \'S3556\'");
                    goto label286;
                }
                if ((temp1006 == 1)) {
                    this.Manager.Comment("reaching state \'S1981\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1005;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1005 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2959\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1005, "return of NetrLogonControl2, state S2959");
                    this.Manager.Comment("reaching state \'S3557\'");
                    goto label286;
                }
                throw new InvalidOperationException("never reached");
            label286:
;
                goto label287;
            }
            throw new InvalidOperationException("never reached");
        label287:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S225");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1151");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S225");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1152");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1152");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S225");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1153");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS224GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1153");
        }
        #endregion
        
        #region Test Starting in S226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226");
            this.Manager.Comment("reaching state \'S226\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1008;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1008);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1008);
            this.Manager.Comment("reaching state \'S227\'");
            int temp1021 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetPlatformChecker2)));
            if ((temp1021 == 0)) {
                this.Manager.Comment("reaching state \'S665\'");
                bool temp1009;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1009);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1009);
                this.Manager.Comment("reaching state \'S1154\'");
                int temp1012 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker1)));
                if ((temp1012 == 0)) {
                    this.Manager.Comment("reaching state \'S1982\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1010;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,Valid)\'");
                    temp1010 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2960\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1010, "return of NetrLogonControl2, state S2960");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label288;
                }
                if ((temp1012 == 1)) {
                    this.Manager.Comment("reaching state \'S1983\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1011;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,2,Valid)\'");
                    temp1011 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2961\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1011, "return of NetrLogonControl2, state S2961");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label288;
                }
                throw new InvalidOperationException("never reached");
            label288:
;
                goto label291;
            }
            if ((temp1021 == 1)) {
                this.Manager.Comment("reaching state \'S666\'");
                bool temp1013;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1013);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1013);
                this.Manager.Comment("reaching state \'S1155\'");
                int temp1016 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker3)));
                if ((temp1016 == 0)) {
                    this.Manager.Comment("reaching state \'S1984\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1014;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1014 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2962\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1014, "return of NetrLogonControl2, state S2962");
                    this.Manager.Comment("reaching state \'S3558\'");
                    goto label289;
                }
                if ((temp1016 == 1)) {
                    this.Manager.Comment("reaching state \'S1985\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1015;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1015 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2963\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1015, "return of NetrLogonControl2, state S2963");
                    this.Manager.Comment("reaching state \'S3559\'");
                    goto label289;
                }
                throw new InvalidOperationException("never reached");
            label289:
;
                goto label291;
            }
            if ((temp1021 == 2)) {
                this.Manager.Comment("reaching state \'S667\'");
                bool temp1017;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1017);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1017);
                this.Manager.Comment("reaching state \'S1156\'");
                int temp1020 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker5)));
                if ((temp1020 == 0)) {
                    this.Manager.Comment("reaching state \'S1986\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1018;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1018 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2964\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1018, "return of NetrLogonControl2, state S2964");
                    this.Manager.Comment("reaching state \'S3560\'");
                    goto label290;
                }
                if ((temp1020 == 1)) {
                    this.Manager.Comment("reaching state \'S1987\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1019;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1019 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2965\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1019, "return of NetrLogonControl2, state S2965");
                    this.Manager.Comment("reaching state \'S3561\'");
                    goto label290;
                }
                throw new InvalidOperationException("never reached");
            label290:
;
                goto label291;
            }
            throw new InvalidOperationException("never reached");
        label291:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S227");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1154");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1154");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S227");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1155");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S227");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1156");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS226GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1156");
        }
        #endregion
        
        #region Test Starting in S228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228");
            this.Manager.Comment("reaching state \'S228\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1022;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1022);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1022);
            this.Manager.Comment("reaching state \'S229\'");
            int temp1035 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetPlatformChecker2)));
            if ((temp1035 == 0)) {
                this.Manager.Comment("reaching state \'S668\'");
                bool temp1023;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1023);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1023);
                this.Manager.Comment("reaching state \'S1157\'");
                int temp1026 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker1)));
                if ((temp1026 == 0)) {
                    this.Manager.Comment("reaching state \'S1988\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1024;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,Valid)\'");
                    temp1024 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2966\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1024, "return of NetrLogonControl2, state S2966");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label292;
                }
                if ((temp1026 == 1)) {
                    this.Manager.Comment("reaching state \'S1989\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1025;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,2,Valid)\'");
                    temp1025 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2967\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1025, "return of NetrLogonControl2, state S2967");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label292;
                }
                throw new InvalidOperationException("never reached");
            label292:
;
                goto label295;
            }
            if ((temp1035 == 1)) {
                this.Manager.Comment("reaching state \'S669\'");
                bool temp1027;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1027);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1027);
                this.Manager.Comment("reaching state \'S1158\'");
                int temp1030 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker3)));
                if ((temp1030 == 0)) {
                    this.Manager.Comment("reaching state \'S1990\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1028;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1028 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2968\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1028, "return of NetrLogonControl2, state S2968");
                    this.Manager.Comment("reaching state \'S3562\'");
                    goto label293;
                }
                if ((temp1030 == 1)) {
                    this.Manager.Comment("reaching state \'S1991\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1029;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1029 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2969\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1029, "return of NetrLogonControl2, state S2969");
                    this.Manager.Comment("reaching state \'S3563\'");
                    goto label293;
                }
                throw new InvalidOperationException("never reached");
            label293:
;
                goto label295;
            }
            if ((temp1035 == 2)) {
                this.Manager.Comment("reaching state \'S670\'");
                bool temp1031;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1031);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1031);
                this.Manager.Comment("reaching state \'S1159\'");
                int temp1034 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker5)));
                if ((temp1034 == 0)) {
                    this.Manager.Comment("reaching state \'S1992\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1032;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1032 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2970\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1032, "return of NetrLogonControl2, state S2970");
                    this.Manager.Comment("reaching state \'S3564\'");
                    goto label294;
                }
                if ((temp1034 == 1)) {
                    this.Manager.Comment("reaching state \'S1993\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1033;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1033 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2971\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1033, "return of NetrLogonControl2, state S2971");
                    this.Manager.Comment("reaching state \'S3565\'");
                    goto label294;
                }
                throw new InvalidOperationException("never reached");
            label294:
;
                goto label295;
            }
            throw new InvalidOperationException("never reached");
        label295:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S229");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1157");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S229");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1158");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1158");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S229");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1159");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS228GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1159");
        }
        #endregion
        
        #region Test Starting in S230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230");
            this.Manager.Comment("reaching state \'S230\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1036;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1036);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1036);
            this.Manager.Comment("reaching state \'S231\'");
            int temp1049 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetPlatformChecker2)));
            if ((temp1049 == 0)) {
                this.Manager.Comment("reaching state \'S671\'");
                bool temp1037;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1037);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1037);
                this.Manager.Comment("reaching state \'S1160\'");
                int temp1040 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker1)));
                if ((temp1040 == 0)) {
                    this.Manager.Comment("reaching state \'S1994\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1038;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,3,Valid)\'");
                    temp1038 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2972\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1038, "return of NetrLogonControl2, state S2972");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label296;
                }
                if ((temp1040 == 1)) {
                    this.Manager.Comment("reaching state \'S1995\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1039;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,2,Valid)\'");
                    temp1039 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2973\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1039, "return of NetrLogonControl2, state S2973");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label296;
                }
                throw new InvalidOperationException("never reached");
            label296:
;
                goto label299;
            }
            if ((temp1049 == 1)) {
                this.Manager.Comment("reaching state \'S672\'");
                bool temp1041;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1041);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1041);
                this.Manager.Comment("reaching state \'S1161\'");
                int temp1044 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker3)));
                if ((temp1044 == 0)) {
                    this.Manager.Comment("reaching state \'S1996\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1042;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1042 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2974\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1042, "return of NetrLogonControl2, state S2974");
                    this.Manager.Comment("reaching state \'S3566\'");
                    goto label297;
                }
                if ((temp1044 == 1)) {
                    this.Manager.Comment("reaching state \'S1997\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1043;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1043 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2975\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1043, "return of NetrLogonControl2, state S2975");
                    this.Manager.Comment("reaching state \'S3567\'");
                    goto label297;
                }
                throw new InvalidOperationException("never reached");
            label297:
;
                goto label299;
            }
            if ((temp1049 == 2)) {
                this.Manager.Comment("reaching state \'S673\'");
                bool temp1045;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1045);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1045);
                this.Manager.Comment("reaching state \'S1162\'");
                int temp1048 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker5)));
                if ((temp1048 == 0)) {
                    this.Manager.Comment("reaching state \'S1998\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1046;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1046 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2976\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1046, "return of NetrLogonControl2, state S2976");
                    this.Manager.Comment("reaching state \'S3568\'");
                    goto label298;
                }
                if ((temp1048 == 1)) {
                    this.Manager.Comment("reaching state \'S1999\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1047;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1047 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2977\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1047, "return of NetrLogonControl2, state S2977");
                    this.Manager.Comment("reaching state \'S3569\'");
                    goto label298;
                }
                throw new InvalidOperationException("never reached");
            label298:
;
                goto label299;
            }
            throw new InvalidOperationException("never reached");
        label299:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S231");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1160");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1160");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S231");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1161");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S231");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1162");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS230GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1162");
        }
        #endregion
        
        #region Test Starting in S232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232");
            this.Manager.Comment("reaching state \'S232\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1050;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1050);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1050);
            this.Manager.Comment("reaching state \'S233\'");
            int temp1063 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetPlatformChecker2)));
            if ((temp1063 == 0)) {
                this.Manager.Comment("reaching state \'S674\'");
                bool temp1051;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1051);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1051);
                this.Manager.Comment("reaching state \'S1163\'");
                int temp1054 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker1)));
                if ((temp1054 == 0)) {
                    this.Manager.Comment("reaching state \'S2000\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1052;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,3,Valid)\'");
                    temp1052 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2978\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1052, "return of NetrLogonControl2, state S2978");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label300;
                }
                if ((temp1054 == 1)) {
                    this.Manager.Comment("reaching state \'S2001\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1053;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1053 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2979\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1053, "return of NetrLogonControl2, state S2979");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label300;
                }
                throw new InvalidOperationException("never reached");
            label300:
;
                goto label303;
            }
            if ((temp1063 == 1)) {
                this.Manager.Comment("reaching state \'S675\'");
                bool temp1055;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1055);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1055);
                this.Manager.Comment("reaching state \'S1164\'");
                int temp1058 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker3)));
                if ((temp1058 == 0)) {
                    this.Manager.Comment("reaching state \'S2002\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1056;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1056 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2980\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1056, "return of NetrLogonControl2, state S2980");
                    this.Manager.Comment("reaching state \'S3570\'");
                    goto label301;
                }
                if ((temp1058 == 1)) {
                    this.Manager.Comment("reaching state \'S2003\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1057;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1057 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2981\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1057, "return of NetrLogonControl2, state S2981");
                    this.Manager.Comment("reaching state \'S3571\'");
                    goto label301;
                }
                throw new InvalidOperationException("never reached");
            label301:
;
                goto label303;
            }
            if ((temp1063 == 2)) {
                this.Manager.Comment("reaching state \'S676\'");
                bool temp1059;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1059);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1059);
                this.Manager.Comment("reaching state \'S1165\'");
                int temp1062 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker5)));
                if ((temp1062 == 0)) {
                    this.Manager.Comment("reaching state \'S2004\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1060;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1060 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2982\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1060, "return of NetrLogonControl2, state S2982");
                    this.Manager.Comment("reaching state \'S3572\'");
                    goto label302;
                }
                if ((temp1062 == 1)) {
                    this.Manager.Comment("reaching state \'S2005\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1061;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1061 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2983\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1061, "return of NetrLogonControl2, state S2983");
                    this.Manager.Comment("reaching state \'S3573\'");
                    goto label302;
                }
                throw new InvalidOperationException("never reached");
            label302:
;
                goto label303;
            }
            throw new InvalidOperationException("never reached");
        label303:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S233");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1163");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S233");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1164");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1164");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S233");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1165");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS232GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1165");
        }
        #endregion
        
        #region Test Starting in S234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234");
            this.Manager.Comment("reaching state \'S234\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1064;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1064);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1064);
            this.Manager.Comment("reaching state \'S235\'");
            int temp1077 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetPlatformChecker2)));
            if ((temp1077 == 0)) {
                this.Manager.Comment("reaching state \'S677\'");
                bool temp1065;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1065);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1065);
                this.Manager.Comment("reaching state \'S1166\'");
                int temp1068 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker1)));
                if ((temp1068 == 0)) {
                    this.Manager.Comment("reaching state \'S2006\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1066;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,3,Valid)\'");
                    temp1066 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2984\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1066, "return of NetrLogonControl2, state S2984");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label304;
                }
                if ((temp1068 == 1)) {
                    this.Manager.Comment("reaching state \'S2007\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1067;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,2,Valid)\'");
                    temp1067 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2985\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1067, "return of NetrLogonControl2, state S2985");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label304;
                }
                throw new InvalidOperationException("never reached");
            label304:
;
                goto label307;
            }
            if ((temp1077 == 1)) {
                this.Manager.Comment("reaching state \'S678\'");
                bool temp1069;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1069);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1069);
                this.Manager.Comment("reaching state \'S1167\'");
                int temp1072 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker3)));
                if ((temp1072 == 0)) {
                    this.Manager.Comment("reaching state \'S2008\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1070;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1070 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2986\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1070, "return of NetrLogonControl2, state S2986");
                    this.Manager.Comment("reaching state \'S3574\'");
                    goto label305;
                }
                if ((temp1072 == 1)) {
                    this.Manager.Comment("reaching state \'S2009\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1071;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1071 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2987\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1071, "return of NetrLogonControl2, state S2987");
                    this.Manager.Comment("reaching state \'S3575\'");
                    goto label305;
                }
                throw new InvalidOperationException("never reached");
            label305:
;
                goto label307;
            }
            if ((temp1077 == 2)) {
                this.Manager.Comment("reaching state \'S679\'");
                bool temp1073;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1073);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1073);
                this.Manager.Comment("reaching state \'S1168\'");
                int temp1076 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker5)));
                if ((temp1076 == 0)) {
                    this.Manager.Comment("reaching state \'S2010\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1074;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1074 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2988\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1074, "return of NetrLogonControl2, state S2988");
                    this.Manager.Comment("reaching state \'S3576\'");
                    goto label306;
                }
                if ((temp1076 == 1)) {
                    this.Manager.Comment("reaching state \'S2011\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1075;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1075 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2989\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1075, "return of NetrLogonControl2, state S2989");
                    this.Manager.Comment("reaching state \'S3577\'");
                    goto label306;
                }
                throw new InvalidOperationException("never reached");
            label306:
;
                goto label307;
            }
            throw new InvalidOperationException("never reached");
        label307:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S235");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1166");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1166");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S235");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1167");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S235");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1168");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS234GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1168");
        }
        #endregion
        
        #region Test Starting in S236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236");
            this.Manager.Comment("reaching state \'S236\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1078;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1078);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1078);
            this.Manager.Comment("reaching state \'S237\'");
            int temp1091 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetPlatformChecker2)));
            if ((temp1091 == 0)) {
                this.Manager.Comment("reaching state \'S680\'");
                bool temp1079;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1079);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1079);
                this.Manager.Comment("reaching state \'S1169\'");
                int temp1082 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker1)));
                if ((temp1082 == 0)) {
                    this.Manager.Comment("reaching state \'S2012\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1080;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,3,Valid)\'");
                    temp1080 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2990\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1080, "return of NetrLogonControl2, state S2990");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label308;
                }
                if ((temp1082 == 1)) {
                    this.Manager.Comment("reaching state \'S2013\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1081;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,2,Valid)\'");
                    temp1081 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2991\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1081, "return of NetrLogonControl2, state S2991");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label308;
                }
                throw new InvalidOperationException("never reached");
            label308:
;
                goto label311;
            }
            if ((temp1091 == 1)) {
                this.Manager.Comment("reaching state \'S681\'");
                bool temp1083;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1083);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1083);
                this.Manager.Comment("reaching state \'S1170\'");
                int temp1086 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker3)));
                if ((temp1086 == 0)) {
                    this.Manager.Comment("reaching state \'S2014\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1084;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1084 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2992\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1084, "return of NetrLogonControl2, state S2992");
                    this.Manager.Comment("reaching state \'S3578\'");
                    goto label309;
                }
                if ((temp1086 == 1)) {
                    this.Manager.Comment("reaching state \'S2015\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1085;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1085 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2993\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1085, "return of NetrLogonControl2, state S2993");
                    this.Manager.Comment("reaching state \'S3579\'");
                    goto label309;
                }
                throw new InvalidOperationException("never reached");
            label309:
;
                goto label311;
            }
            if ((temp1091 == 2)) {
                this.Manager.Comment("reaching state \'S682\'");
                bool temp1087;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1087);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1087);
                this.Manager.Comment("reaching state \'S1171\'");
                int temp1090 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker5)));
                if ((temp1090 == 0)) {
                    this.Manager.Comment("reaching state \'S2016\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1088;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1088 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2994\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1088, "return of NetrLogonControl2, state S2994");
                    this.Manager.Comment("reaching state \'S3580\'");
                    goto label310;
                }
                if ((temp1090 == 1)) {
                    this.Manager.Comment("reaching state \'S2017\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1089;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1089 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2995\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1089, "return of NetrLogonControl2, state S2995");
                    this.Manager.Comment("reaching state \'S3581\'");
                    goto label310;
                }
                throw new InvalidOperationException("never reached");
            label310:
;
                goto label311;
            }
            throw new InvalidOperationException("never reached");
        label311:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S237");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1169");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S237");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1170");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1170");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S237");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1171");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS236GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1171");
        }
        #endregion
        
        #region Test Starting in S238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238");
            this.Manager.Comment("reaching state \'S238\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1092;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1092);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1092);
            this.Manager.Comment("reaching state \'S239\'");
            int temp1105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetPlatformChecker2)));
            if ((temp1105 == 0)) {
                this.Manager.Comment("reaching state \'S683\'");
                bool temp1093;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1093);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1093);
                this.Manager.Comment("reaching state \'S1172\'");
                int temp1096 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker1)));
                if ((temp1096 == 0)) {
                    this.Manager.Comment("reaching state \'S2018\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1094;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,Valid)\'");
                    temp1094 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2996\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1094, "return of NetrLogonControl2, state S2996");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label312;
                }
                if ((temp1096 == 1)) {
                    this.Manager.Comment("reaching state \'S2019\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1095;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,3,Valid)\'");
                    temp1095 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2997\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1095, "return of NetrLogonControl2, state S2997");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label312;
                }
                throw new InvalidOperationException("never reached");
            label312:
;
                goto label315;
            }
            if ((temp1105 == 1)) {
                this.Manager.Comment("reaching state \'S684\'");
                bool temp1097;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1097);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1097);
                this.Manager.Comment("reaching state \'S1173\'");
                int temp1100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker3)));
                if ((temp1100 == 0)) {
                    this.Manager.Comment("reaching state \'S2020\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1098;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1098 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2998\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1098, "return of NetrLogonControl2, state S2998");
                    this.Manager.Comment("reaching state \'S3582\'");
                    goto label313;
                }
                if ((temp1100 == 1)) {
                    this.Manager.Comment("reaching state \'S2021\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1099;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1099 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2999\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1099, "return of NetrLogonControl2, state S2999");
                    this.Manager.Comment("reaching state \'S3583\'");
                    goto label313;
                }
                throw new InvalidOperationException("never reached");
            label313:
;
                goto label315;
            }
            if ((temp1105 == 2)) {
                this.Manager.Comment("reaching state \'S685\'");
                bool temp1101;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1101);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1101);
                this.Manager.Comment("reaching state \'S1174\'");
                int temp1104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker5)));
                if ((temp1104 == 0)) {
                    this.Manager.Comment("reaching state \'S2022\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1102;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1102 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3000\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1102, "return of NetrLogonControl2, state S3000");
                    this.Manager.Comment("reaching state \'S3584\'");
                    goto label314;
                }
                if ((temp1104 == 1)) {
                    this.Manager.Comment("reaching state \'S2023\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1103;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1103 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3001\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1103, "return of NetrLogonControl2, state S3001");
                    this.Manager.Comment("reaching state \'S3585\'");
                    goto label314;
                }
                throw new InvalidOperationException("never reached");
            label314:
;
                goto label315;
            }
            throw new InvalidOperationException("never reached");
        label315:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S239");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1172");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1172");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S239");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1173");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S239");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1174");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS238GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1174");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1106;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1106);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1106);
            this.Manager.Comment("reaching state \'S25\'");
            int temp1119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetPlatformChecker2)));
            if ((temp1119 == 0)) {
                this.Manager.Comment("reaching state \'S362\'");
                bool temp1107;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1107);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1107);
                this.Manager.Comment("reaching state \'S851\'");
                int temp1110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker1)));
                if ((temp1110 == 0)) {
                    this.Manager.Comment("reaching state \'S1376\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1108;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,Valid)\'");
                    temp1108 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2354\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1108, "return of NetrLogonControl2, state S2354");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label316;
                }
                if ((temp1110 == 1)) {
                    this.Manager.Comment("reaching state \'S1377\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1109;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,4,Valid)\'");
                    temp1109 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2355\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1109, "return of NetrLogonControl2, state S2355");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label316;
                }
                throw new InvalidOperationException("never reached");
            label316:
;
                goto label319;
            }
            if ((temp1119 == 1)) {
                this.Manager.Comment("reaching state \'S363\'");
                bool temp1111;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1111);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1111);
                this.Manager.Comment("reaching state \'S852\'");
                int temp1114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker3)));
                if ((temp1114 == 0)) {
                    this.Manager.Comment("reaching state \'S1378\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1112;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,Valid)\'");
                    temp1112 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2356\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1112, "return of NetrLogonControl2, state S2356");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label317;
                }
                if ((temp1114 == 1)) {
                    this.Manager.Comment("reaching state \'S1379\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1113;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1113 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2357\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1113, "return of NetrLogonControl2, state S2357");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label317;
                }
                throw new InvalidOperationException("never reached");
            label317:
;
                goto label319;
            }
            if ((temp1119 == 2)) {
                this.Manager.Comment("reaching state \'S364\'");
                bool temp1115;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1115);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1115);
                this.Manager.Comment("reaching state \'S853\'");
                int temp1118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker5)));
                if ((temp1118 == 0)) {
                    this.Manager.Comment("reaching state \'S1380\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1116;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1116 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2358\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1116, "return of NetrLogonControl2, state S2358");
                    this.Manager.Comment("reaching state \'S3292\'");
                    goto label318;
                }
                if ((temp1118 == 1)) {
                    this.Manager.Comment("reaching state \'S1381\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1117;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1117 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2359\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1117, "return of NetrLogonControl2, state S2359");
                    this.Manager.Comment("reaching state \'S3293\'");
                    goto label318;
                }
                throw new InvalidOperationException("never reached");
            label318:
;
                goto label319;
            }
            throw new InvalidOperationException("never reached");
        label319:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S851");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S851");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S852");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S852");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S25");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S853");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS24GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S853");
        }
        #endregion
        
        #region Test Starting in S240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240");
            this.Manager.Comment("reaching state \'S240\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1120;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1120);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1120);
            this.Manager.Comment("reaching state \'S241\'");
            int temp1133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetPlatformChecker2)));
            if ((temp1133 == 0)) {
                this.Manager.Comment("reaching state \'S686\'");
                bool temp1121;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1121);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1121);
                this.Manager.Comment("reaching state \'S1175\'");
                int temp1124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker1)));
                if ((temp1124 == 0)) {
                    this.Manager.Comment("reaching state \'S2024\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1122;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,Valid)\'");
                    temp1122 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3002\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1122, "return of NetrLogonControl2, state S3002");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label320;
                }
                if ((temp1124 == 1)) {
                    this.Manager.Comment("reaching state \'S2025\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1123;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,3,Valid)\'");
                    temp1123 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3003\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1123, "return of NetrLogonControl2, state S3003");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label320;
                }
                throw new InvalidOperationException("never reached");
            label320:
;
                goto label323;
            }
            if ((temp1133 == 1)) {
                this.Manager.Comment("reaching state \'S687\'");
                bool temp1125;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1125);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1125);
                this.Manager.Comment("reaching state \'S1176\'");
                int temp1128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker3)));
                if ((temp1128 == 0)) {
                    this.Manager.Comment("reaching state \'S2026\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1126;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1126 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3004\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1126, "return of NetrLogonControl2, state S3004");
                    this.Manager.Comment("reaching state \'S3586\'");
                    goto label321;
                }
                if ((temp1128 == 1)) {
                    this.Manager.Comment("reaching state \'S2027\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1127;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1127 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3005\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1127, "return of NetrLogonControl2, state S3005");
                    this.Manager.Comment("reaching state \'S3587\'");
                    goto label321;
                }
                throw new InvalidOperationException("never reached");
            label321:
;
                goto label323;
            }
            if ((temp1133 == 2)) {
                this.Manager.Comment("reaching state \'S688\'");
                bool temp1129;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1129);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1129);
                this.Manager.Comment("reaching state \'S1177\'");
                int temp1132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker5)));
                if ((temp1132 == 0)) {
                    this.Manager.Comment("reaching state \'S2028\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1130;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1130 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3006\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1130, "return of NetrLogonControl2, state S3006");
                    this.Manager.Comment("reaching state \'S3588\'");
                    goto label322;
                }
                if ((temp1132 == 1)) {
                    this.Manager.Comment("reaching state \'S2029\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1131;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1131 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3007\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1131, "return of NetrLogonControl2, state S3007");
                    this.Manager.Comment("reaching state \'S3589\'");
                    goto label322;
                }
                throw new InvalidOperationException("never reached");
            label322:
;
                goto label323;
            }
            throw new InvalidOperationException("never reached");
        label323:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S241");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1175");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S241");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1176");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1176");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S241");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1177");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS240GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1177");
        }
        #endregion
        
        #region Test Starting in S242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242");
            this.Manager.Comment("reaching state \'S242\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1134;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1134);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1134);
            this.Manager.Comment("reaching state \'S243\'");
            int temp1147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetPlatformChecker2)));
            if ((temp1147 == 0)) {
                this.Manager.Comment("reaching state \'S689\'");
                bool temp1135;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1135);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1135);
                this.Manager.Comment("reaching state \'S1178\'");
                int temp1138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker1)));
                if ((temp1138 == 0)) {
                    this.Manager.Comment("reaching state \'S2030\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1136;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,Valid)\'");
                    temp1136 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3008\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1136, "return of NetrLogonControl2, state S3008");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label324;
                }
                if ((temp1138 == 1)) {
                    this.Manager.Comment("reaching state \'S2031\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1137;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,3,Valid)\'");
                    temp1137 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3009\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1137, "return of NetrLogonControl2, state S3009");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label324;
                }
                throw new InvalidOperationException("never reached");
            label324:
;
                goto label327;
            }
            if ((temp1147 == 1)) {
                this.Manager.Comment("reaching state \'S690\'");
                bool temp1139;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1139);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1139);
                this.Manager.Comment("reaching state \'S1179\'");
                int temp1142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker3)));
                if ((temp1142 == 0)) {
                    this.Manager.Comment("reaching state \'S2032\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1140;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1140 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3010\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1140, "return of NetrLogonControl2, state S3010");
                    this.Manager.Comment("reaching state \'S3590\'");
                    goto label325;
                }
                if ((temp1142 == 1)) {
                    this.Manager.Comment("reaching state \'S2033\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1141;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1141 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3011\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1141, "return of NetrLogonControl2, state S3011");
                    this.Manager.Comment("reaching state \'S3591\'");
                    goto label325;
                }
                throw new InvalidOperationException("never reached");
            label325:
;
                goto label327;
            }
            if ((temp1147 == 2)) {
                this.Manager.Comment("reaching state \'S691\'");
                bool temp1143;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1143);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1143);
                this.Manager.Comment("reaching state \'S1180\'");
                int temp1146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker5)));
                if ((temp1146 == 0)) {
                    this.Manager.Comment("reaching state \'S2034\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1144;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1144 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3012\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1144, "return of NetrLogonControl2, state S3012");
                    this.Manager.Comment("reaching state \'S3592\'");
                    goto label326;
                }
                if ((temp1146 == 1)) {
                    this.Manager.Comment("reaching state \'S2035\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1145;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1145 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3013\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1145, "return of NetrLogonControl2, state S3013");
                    this.Manager.Comment("reaching state \'S3593\'");
                    goto label326;
                }
                throw new InvalidOperationException("never reached");
            label326:
;
                goto label327;
            }
            throw new InvalidOperationException("never reached");
        label327:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S243");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1178");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1178");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S243");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1179");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S243");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1180");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS242GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1180");
        }
        #endregion
        
        #region Test Starting in S244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244");
            this.Manager.Comment("reaching state \'S244\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1148;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1148);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1148);
            this.Manager.Comment("reaching state \'S245\'");
            int temp1161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetPlatformChecker2)));
            if ((temp1161 == 0)) {
                this.Manager.Comment("reaching state \'S692\'");
                bool temp1149;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1149);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1149);
                this.Manager.Comment("reaching state \'S1181\'");
                int temp1152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker1)));
                if ((temp1152 == 0)) {
                    this.Manager.Comment("reaching state \'S2036\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1150;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1150 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3014\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1150, "return of NetrLogonControl2, state S3014");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label328;
                }
                if ((temp1152 == 1)) {
                    this.Manager.Comment("reaching state \'S2037\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1151;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,Valid)\'");
                    temp1151 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3015\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1151, "return of NetrLogonControl2, state S3015");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label328;
                }
                throw new InvalidOperationException("never reached");
            label328:
;
                goto label331;
            }
            if ((temp1161 == 1)) {
                this.Manager.Comment("reaching state \'S693\'");
                bool temp1153;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1153);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1153);
                this.Manager.Comment("reaching state \'S1182\'");
                int temp1156 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker3)));
                if ((temp1156 == 0)) {
                    this.Manager.Comment("reaching state \'S2038\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1154;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1154 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3016\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1154, "return of NetrLogonControl2, state S3016");
                    this.Manager.Comment("reaching state \'S3594\'");
                    goto label329;
                }
                if ((temp1156 == 1)) {
                    this.Manager.Comment("reaching state \'S2039\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1155;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1155 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3017\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1155, "return of NetrLogonControl2, state S3017");
                    this.Manager.Comment("reaching state \'S3595\'");
                    goto label329;
                }
                throw new InvalidOperationException("never reached");
            label329:
;
                goto label331;
            }
            if ((temp1161 == 2)) {
                this.Manager.Comment("reaching state \'S694\'");
                bool temp1157;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1157);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1157);
                this.Manager.Comment("reaching state \'S1183\'");
                int temp1160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker5)));
                if ((temp1160 == 0)) {
                    this.Manager.Comment("reaching state \'S2040\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1158;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1158 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3018\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1158, "return of NetrLogonControl2, state S3018");
                    this.Manager.Comment("reaching state \'S3596\'");
                    goto label330;
                }
                if ((temp1160 == 1)) {
                    this.Manager.Comment("reaching state \'S2041\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1159;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1159 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3019\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1159, "return of NetrLogonControl2, state S3019");
                    this.Manager.Comment("reaching state \'S3597\'");
                    goto label330;
                }
                throw new InvalidOperationException("never reached");
            label330:
;
                goto label331;
            }
            throw new InvalidOperationException("never reached");
        label331:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S245");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1181");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S245");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1182");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1182");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S245");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1183");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS244GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1183");
        }
        #endregion
        
        #region Test Starting in S246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246");
            this.Manager.Comment("reaching state \'S246\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1162;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1162);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1162);
            this.Manager.Comment("reaching state \'S247\'");
            int temp1175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetPlatformChecker2)));
            if ((temp1175 == 0)) {
                this.Manager.Comment("reaching state \'S695\'");
                bool temp1163;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1163);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1163);
                this.Manager.Comment("reaching state \'S1184\'");
                int temp1166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker1)));
                if ((temp1166 == 0)) {
                    this.Manager.Comment("reaching state \'S2042\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1164;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,2,Valid)\'");
                    temp1164 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3020\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1164, "return of NetrLogonControl2, state S3020");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label332;
                }
                if ((temp1166 == 1)) {
                    this.Manager.Comment("reaching state \'S2043\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1165;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,Valid)\'");
                    temp1165 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3021\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1165, "return of NetrLogonControl2, state S3021");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label332;
                }
                throw new InvalidOperationException("never reached");
            label332:
;
                goto label335;
            }
            if ((temp1175 == 1)) {
                this.Manager.Comment("reaching state \'S696\'");
                bool temp1167;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1167);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1167);
                this.Manager.Comment("reaching state \'S1185\'");
                int temp1170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker3)));
                if ((temp1170 == 0)) {
                    this.Manager.Comment("reaching state \'S2044\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1168;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1168 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3022\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1168, "return of NetrLogonControl2, state S3022");
                    this.Manager.Comment("reaching state \'S3598\'");
                    goto label333;
                }
                if ((temp1170 == 1)) {
                    this.Manager.Comment("reaching state \'S2045\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1169;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1169 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3023\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1169, "return of NetrLogonControl2, state S3023");
                    this.Manager.Comment("reaching state \'S3599\'");
                    goto label333;
                }
                throw new InvalidOperationException("never reached");
            label333:
;
                goto label335;
            }
            if ((temp1175 == 2)) {
                this.Manager.Comment("reaching state \'S697\'");
                bool temp1171;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1171);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1171);
                this.Manager.Comment("reaching state \'S1186\'");
                int temp1174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker5)));
                if ((temp1174 == 0)) {
                    this.Manager.Comment("reaching state \'S2046\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1172;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1172 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3024\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1172, "return of NetrLogonControl2, state S3024");
                    this.Manager.Comment("reaching state \'S3600\'");
                    goto label334;
                }
                if ((temp1174 == 1)) {
                    this.Manager.Comment("reaching state \'S2047\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1173;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1173 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3025\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1173, "return of NetrLogonControl2, state S3025");
                    this.Manager.Comment("reaching state \'S3601\'");
                    goto label334;
                }
                throw new InvalidOperationException("never reached");
            label334:
;
                goto label335;
            }
            throw new InvalidOperationException("never reached");
        label335:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S247");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1184");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1184");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S247");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1185");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S247");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1186");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS246GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1186");
        }
        #endregion
        
        #region Test Starting in S248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248");
            this.Manager.Comment("reaching state \'S248\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1176;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1176);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1176);
            this.Manager.Comment("reaching state \'S249\'");
            int temp1189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetPlatformChecker2)));
            if ((temp1189 == 0)) {
                this.Manager.Comment("reaching state \'S698\'");
                bool temp1177;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1177);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1177);
                this.Manager.Comment("reaching state \'S1187\'");
                int temp1180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker1)));
                if ((temp1180 == 0)) {
                    this.Manager.Comment("reaching state \'S2048\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1178;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,3,Valid)\'");
                    temp1178 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3026\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1178, "return of NetrLogonControl2, state S3026");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label336;
                }
                if ((temp1180 == 1)) {
                    this.Manager.Comment("reaching state \'S2049\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1179;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,1,Valid)\'");
                    temp1179 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3027\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1179, "return of NetrLogonControl2, state S3027");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label336;
                }
                throw new InvalidOperationException("never reached");
            label336:
;
                goto label339;
            }
            if ((temp1189 == 1)) {
                this.Manager.Comment("reaching state \'S699\'");
                bool temp1181;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1181);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1181);
                this.Manager.Comment("reaching state \'S1188\'");
                int temp1184 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker3)));
                if ((temp1184 == 0)) {
                    this.Manager.Comment("reaching state \'S2050\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1182;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1182 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3028\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1182, "return of NetrLogonControl2, state S3028");
                    this.Manager.Comment("reaching state \'S3602\'");
                    goto label337;
                }
                if ((temp1184 == 1)) {
                    this.Manager.Comment("reaching state \'S2051\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1183;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1183 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3029\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1183, "return of NetrLogonControl2, state S3029");
                    this.Manager.Comment("reaching state \'S3603\'");
                    goto label337;
                }
                throw new InvalidOperationException("never reached");
            label337:
;
                goto label339;
            }
            if ((temp1189 == 2)) {
                this.Manager.Comment("reaching state \'S700\'");
                bool temp1185;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1185);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1185);
                this.Manager.Comment("reaching state \'S1189\'");
                int temp1188 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker5)));
                if ((temp1188 == 0)) {
                    this.Manager.Comment("reaching state \'S2052\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1186;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1186 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3030\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1186, "return of NetrLogonControl2, state S3030");
                    this.Manager.Comment("reaching state \'S3604\'");
                    goto label338;
                }
                if ((temp1188 == 1)) {
                    this.Manager.Comment("reaching state \'S2053\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1187;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1187 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3031\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1187, "return of NetrLogonControl2, state S3031");
                    this.Manager.Comment("reaching state \'S3605\'");
                    goto label338;
                }
                throw new InvalidOperationException("never reached");
            label338:
;
                goto label339;
            }
            throw new InvalidOperationException("never reached");
        label339:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S249");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1187");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S249");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1188");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1188");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S249");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1189");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS248GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1189");
        }
        #endregion
        
        #region Test Starting in S250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250");
            this.Manager.Comment("reaching state \'S250\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1190;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1190);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1190);
            this.Manager.Comment("reaching state \'S251\'");
            int temp1203 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetPlatformChecker2)));
            if ((temp1203 == 0)) {
                this.Manager.Comment("reaching state \'S701\'");
                bool temp1191;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1191);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1191);
                this.Manager.Comment("reaching state \'S1190\'");
                int temp1194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker1)));
                if ((temp1194 == 0)) {
                    this.Manager.Comment("reaching state \'S2054\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1192;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,3,Valid)\'");
                    temp1192 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3032\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1192, "return of NetrLogonControl2, state S3032");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label340;
                }
                if ((temp1194 == 1)) {
                    this.Manager.Comment("reaching state \'S2055\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1193;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,1,Valid)\'");
                    temp1193 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3033\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1193, "return of NetrLogonControl2, state S3033");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label340;
                }
                throw new InvalidOperationException("never reached");
            label340:
;
                goto label343;
            }
            if ((temp1203 == 1)) {
                this.Manager.Comment("reaching state \'S702\'");
                bool temp1195;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1195);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1195);
                this.Manager.Comment("reaching state \'S1191\'");
                int temp1198 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker3)));
                if ((temp1198 == 0)) {
                    this.Manager.Comment("reaching state \'S2056\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1196;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1196 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3034\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1196, "return of NetrLogonControl2, state S3034");
                    this.Manager.Comment("reaching state \'S3606\'");
                    goto label341;
                }
                if ((temp1198 == 1)) {
                    this.Manager.Comment("reaching state \'S2057\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1197;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1197 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3035\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1197, "return of NetrLogonControl2, state S3035");
                    this.Manager.Comment("reaching state \'S3607\'");
                    goto label341;
                }
                throw new InvalidOperationException("never reached");
            label341:
;
                goto label343;
            }
            if ((temp1203 == 2)) {
                this.Manager.Comment("reaching state \'S703\'");
                bool temp1199;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1199);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1199);
                this.Manager.Comment("reaching state \'S1192\'");
                int temp1202 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker5)));
                if ((temp1202 == 0)) {
                    this.Manager.Comment("reaching state \'S2058\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1200;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1200 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3036\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1200, "return of NetrLogonControl2, state S3036");
                    this.Manager.Comment("reaching state \'S3608\'");
                    goto label342;
                }
                if ((temp1202 == 1)) {
                    this.Manager.Comment("reaching state \'S2059\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1201;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1201 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3037\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1201, "return of NetrLogonControl2, state S3037");
                    this.Manager.Comment("reaching state \'S3609\'");
                    goto label342;
                }
                throw new InvalidOperationException("never reached");
            label342:
;
                goto label343;
            }
            throw new InvalidOperationException("never reached");
        label343:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S251");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1190");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1190");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S251");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1191");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1191");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S251");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1192");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS250GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1192");
        }
        #endregion
        
        #region Test Starting in S252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252");
            this.Manager.Comment("reaching state \'S252\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1204;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1204);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1204);
            this.Manager.Comment("reaching state \'S253\'");
            int temp1217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetPlatformChecker2)));
            if ((temp1217 == 0)) {
                this.Manager.Comment("reaching state \'S704\'");
                bool temp1205;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1205);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1205);
                this.Manager.Comment("reaching state \'S1193\'");
                int temp1208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker1)));
                if ((temp1208 == 0)) {
                    this.Manager.Comment("reaching state \'S2060\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1206;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,2,Valid)\'");
                    temp1206 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3038\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1206, "return of NetrLogonControl2, state S3038");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label344;
                }
                if ((temp1208 == 1)) {
                    this.Manager.Comment("reaching state \'S2061\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1207;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,1,Valid)\'");
                    temp1207 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3039\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1207, "return of NetrLogonControl2, state S3039");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label344;
                }
                throw new InvalidOperationException("never reached");
            label344:
;
                goto label347;
            }
            if ((temp1217 == 1)) {
                this.Manager.Comment("reaching state \'S705\'");
                bool temp1209;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1209);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1209);
                this.Manager.Comment("reaching state \'S1194\'");
                int temp1212 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker3)));
                if ((temp1212 == 0)) {
                    this.Manager.Comment("reaching state \'S2062\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1210;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1210 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3040\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1210, "return of NetrLogonControl2, state S3040");
                    this.Manager.Comment("reaching state \'S3610\'");
                    goto label345;
                }
                if ((temp1212 == 1)) {
                    this.Manager.Comment("reaching state \'S2063\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1211;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1211 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3041\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1211, "return of NetrLogonControl2, state S3041");
                    this.Manager.Comment("reaching state \'S3611\'");
                    goto label345;
                }
                throw new InvalidOperationException("never reached");
            label345:
;
                goto label347;
            }
            if ((temp1217 == 2)) {
                this.Manager.Comment("reaching state \'S706\'");
                bool temp1213;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1213);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1213);
                this.Manager.Comment("reaching state \'S1195\'");
                int temp1216 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker5)));
                if ((temp1216 == 0)) {
                    this.Manager.Comment("reaching state \'S2064\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1214;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1214 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3042\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1214, "return of NetrLogonControl2, state S3042");
                    this.Manager.Comment("reaching state \'S3612\'");
                    goto label346;
                }
                if ((temp1216 == 1)) {
                    this.Manager.Comment("reaching state \'S2065\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1215;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1215 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3043\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1215, "return of NetrLogonControl2, state S3043");
                    this.Manager.Comment("reaching state \'S3613\'");
                    goto label346;
                }
                throw new InvalidOperationException("never reached");
            label346:
;
                goto label347;
            }
            throw new InvalidOperationException("never reached");
        label347:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S253");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1193");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1193");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S253");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1194");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1194");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S253");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1195");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS252GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1195");
        }
        #endregion
        
        #region Test Starting in S254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254");
            this.Manager.Comment("reaching state \'S254\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1218;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1218);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1218);
            this.Manager.Comment("reaching state \'S255\'");
            int temp1231 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetPlatformChecker2)));
            if ((temp1231 == 0)) {
                this.Manager.Comment("reaching state \'S707\'");
                bool temp1219;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1219);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1219);
                this.Manager.Comment("reaching state \'S1196\'");
                int temp1222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker1)));
                if ((temp1222 == 0)) {
                    this.Manager.Comment("reaching state \'S2066\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1220;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,2,Valid)\'");
                    temp1220 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3044\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1220, "return of NetrLogonControl2, state S3044");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label348;
                }
                if ((temp1222 == 1)) {
                    this.Manager.Comment("reaching state \'S2067\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1221;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,1,Valid)\'");
                    temp1221 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3045\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1221, "return of NetrLogonControl2, state S3045");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label348;
                }
                throw new InvalidOperationException("never reached");
            label348:
;
                goto label351;
            }
            if ((temp1231 == 1)) {
                this.Manager.Comment("reaching state \'S708\'");
                bool temp1223;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1223);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1223);
                this.Manager.Comment("reaching state \'S1197\'");
                int temp1226 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker3)));
                if ((temp1226 == 0)) {
                    this.Manager.Comment("reaching state \'S2068\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1224;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1224 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3046\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1224, "return of NetrLogonControl2, state S3046");
                    this.Manager.Comment("reaching state \'S3614\'");
                    goto label349;
                }
                if ((temp1226 == 1)) {
                    this.Manager.Comment("reaching state \'S2069\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1225;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1225 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3047\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1225, "return of NetrLogonControl2, state S3047");
                    this.Manager.Comment("reaching state \'S3615\'");
                    goto label349;
                }
                throw new InvalidOperationException("never reached");
            label349:
;
                goto label351;
            }
            if ((temp1231 == 2)) {
                this.Manager.Comment("reaching state \'S709\'");
                bool temp1227;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1227);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1227);
                this.Manager.Comment("reaching state \'S1198\'");
                int temp1230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker5)));
                if ((temp1230 == 0)) {
                    this.Manager.Comment("reaching state \'S2070\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1228;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1228 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3048\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1228, "return of NetrLogonControl2, state S3048");
                    this.Manager.Comment("reaching state \'S3616\'");
                    goto label350;
                }
                if ((temp1230 == 1)) {
                    this.Manager.Comment("reaching state \'S2071\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1229;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1229 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3049\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1229, "return of NetrLogonControl2, state S3049");
                    this.Manager.Comment("reaching state \'S3617\'");
                    goto label350;
                }
                throw new InvalidOperationException("never reached");
            label350:
;
                goto label351;
            }
            throw new InvalidOperationException("never reached");
        label351:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S255");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1196");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1196");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S255");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1197");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1197");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S255");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1198");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS254GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1198");
        }
        #endregion
        
        #region Test Starting in S256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256");
            this.Manager.Comment("reaching state \'S256\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1232;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1232);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1232);
            this.Manager.Comment("reaching state \'S257\'");
            int temp1245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetPlatformChecker2)));
            if ((temp1245 == 0)) {
                this.Manager.Comment("reaching state \'S710\'");
                bool temp1233;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1233);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1233);
                this.Manager.Comment("reaching state \'S1199\'");
                int temp1236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker1)));
                if ((temp1236 == 0)) {
                    this.Manager.Comment("reaching state \'S2072\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1234;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,Valid)\'");
                    temp1234 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3050\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1234, "return of NetrLogonControl2, state S3050");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label352;
                }
                if ((temp1236 == 1)) {
                    this.Manager.Comment("reaching state \'S2073\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1235;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,1,Valid)\'");
                    temp1235 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3051\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1235, "return of NetrLogonControl2, state S3051");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label352;
                }
                throw new InvalidOperationException("never reached");
            label352:
;
                goto label355;
            }
            if ((temp1245 == 1)) {
                this.Manager.Comment("reaching state \'S711\'");
                bool temp1237;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1237);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1237);
                this.Manager.Comment("reaching state \'S1200\'");
                int temp1240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker3)));
                if ((temp1240 == 0)) {
                    this.Manager.Comment("reaching state \'S2074\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1238;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1238 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3052\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1238, "return of NetrLogonControl2, state S3052");
                    this.Manager.Comment("reaching state \'S3618\'");
                    goto label353;
                }
                if ((temp1240 == 1)) {
                    this.Manager.Comment("reaching state \'S2075\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1239;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1239 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3053\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1239, "return of NetrLogonControl2, state S3053");
                    this.Manager.Comment("reaching state \'S3619\'");
                    goto label353;
                }
                throw new InvalidOperationException("never reached");
            label353:
;
                goto label355;
            }
            if ((temp1245 == 2)) {
                this.Manager.Comment("reaching state \'S712\'");
                bool temp1241;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1241);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1241);
                this.Manager.Comment("reaching state \'S1201\'");
                int temp1244 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker5)));
                if ((temp1244 == 0)) {
                    this.Manager.Comment("reaching state \'S2076\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1242;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1242 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3054\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1242, "return of NetrLogonControl2, state S3054");
                    this.Manager.Comment("reaching state \'S3620\'");
                    goto label354;
                }
                if ((temp1244 == 1)) {
                    this.Manager.Comment("reaching state \'S2077\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1243;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1243 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3055\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1243, "return of NetrLogonControl2, state S3055");
                    this.Manager.Comment("reaching state \'S3621\'");
                    goto label354;
                }
                throw new InvalidOperationException("never reached");
            label354:
;
                goto label355;
            }
            throw new InvalidOperationException("never reached");
        label355:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S257");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1199");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1199");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S257");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1200");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1200");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S257");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1201");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS256GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1201");
        }
        #endregion
        
        #region Test Starting in S258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258");
            this.Manager.Comment("reaching state \'S258\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1246;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1246);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1246);
            this.Manager.Comment("reaching state \'S259\'");
            int temp1259 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetPlatformChecker2)));
            if ((temp1259 == 0)) {
                this.Manager.Comment("reaching state \'S713\'");
                bool temp1247;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1247);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1247);
                this.Manager.Comment("reaching state \'S1202\'");
                int temp1250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker1)));
                if ((temp1250 == 0)) {
                    this.Manager.Comment("reaching state \'S2078\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1248;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,4,Valid)\'");
                    temp1248 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3056\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1248, "return of NetrLogonControl2, state S3056");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label356;
                }
                if ((temp1250 == 1)) {
                    this.Manager.Comment("reaching state \'S2079\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1249;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,1,Valid)\'");
                    temp1249 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3057\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1249, "return of NetrLogonControl2, state S3057");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label356;
                }
                throw new InvalidOperationException("never reached");
            label356:
;
                goto label359;
            }
            if ((temp1259 == 1)) {
                this.Manager.Comment("reaching state \'S714\'");
                bool temp1251;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1251);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1251);
                this.Manager.Comment("reaching state \'S1203\'");
                int temp1254 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker3)));
                if ((temp1254 == 0)) {
                    this.Manager.Comment("reaching state \'S2080\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1252;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1252 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3058\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1252, "return of NetrLogonControl2, state S3058");
                    this.Manager.Comment("reaching state \'S3622\'");
                    goto label357;
                }
                if ((temp1254 == 1)) {
                    this.Manager.Comment("reaching state \'S2081\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1253;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1253 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3059\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1253, "return of NetrLogonControl2, state S3059");
                    this.Manager.Comment("reaching state \'S3623\'");
                    goto label357;
                }
                throw new InvalidOperationException("never reached");
            label357:
;
                goto label359;
            }
            if ((temp1259 == 2)) {
                this.Manager.Comment("reaching state \'S715\'");
                bool temp1255;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1255);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1255);
                this.Manager.Comment("reaching state \'S1204\'");
                int temp1258 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker5)));
                if ((temp1258 == 0)) {
                    this.Manager.Comment("reaching state \'S2082\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1256;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1256 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3060\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1256, "return of NetrLogonControl2, state S3060");
                    this.Manager.Comment("reaching state \'S3624\'");
                    goto label358;
                }
                if ((temp1258 == 1)) {
                    this.Manager.Comment("reaching state \'S2083\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1257;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1257 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3061\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1257, "return of NetrLogonControl2, state S3061");
                    this.Manager.Comment("reaching state \'S3625\'");
                    goto label358;
                }
                throw new InvalidOperationException("never reached");
            label358:
;
                goto label359;
            }
            throw new InvalidOperationException("never reached");
        label359:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S259");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1202");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1202");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S259");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1203");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1203");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S259");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1204");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS258GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1204");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1260;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1260);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1260);
            this.Manager.Comment("reaching state \'S27\'");
            int temp1273 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetPlatformChecker2)));
            if ((temp1273 == 0)) {
                this.Manager.Comment("reaching state \'S365\'");
                bool temp1261;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1261);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1261);
                this.Manager.Comment("reaching state \'S854\'");
                int temp1264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker1)));
                if ((temp1264 == 0)) {
                    this.Manager.Comment("reaching state \'S1382\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1262;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp1262 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2360\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1262, "return of NetrLogonControl2, state S2360");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label360;
                }
                if ((temp1264 == 1)) {
                    this.Manager.Comment("reaching state \'S1383\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1263;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,2,Valid)\'");
                    temp1263 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2361\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1263, "return of NetrLogonControl2, state S2361");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label360;
                }
                throw new InvalidOperationException("never reached");
            label360:
;
                goto label363;
            }
            if ((temp1273 == 1)) {
                this.Manager.Comment("reaching state \'S366\'");
                bool temp1265;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1265);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1265);
                this.Manager.Comment("reaching state \'S855\'");
                int temp1268 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker3)));
                if ((temp1268 == 0)) {
                    this.Manager.Comment("reaching state \'S1384\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1266;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp1266 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2362\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1266, "return of NetrLogonControl2, state S2362");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label361;
                }
                if ((temp1268 == 1)) {
                    this.Manager.Comment("reaching state \'S1385\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1267;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1267 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2363\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1267, "return of NetrLogonControl2, state S2363");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label361;
                }
                throw new InvalidOperationException("never reached");
            label361:
;
                goto label363;
            }
            if ((temp1273 == 2)) {
                this.Manager.Comment("reaching state \'S367\'");
                bool temp1269;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1269);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1269);
                this.Manager.Comment("reaching state \'S856\'");
                int temp1272 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker5)));
                if ((temp1272 == 0)) {
                    this.Manager.Comment("reaching state \'S1386\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1270;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1270 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2364\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1270, "return of NetrLogonControl2, state S2364");
                    this.Manager.Comment("reaching state \'S3294\'");
                    goto label362;
                }
                if ((temp1272 == 1)) {
                    this.Manager.Comment("reaching state \'S1387\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1271;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1271 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2365\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1271, "return of NetrLogonControl2, state S2365");
                    this.Manager.Comment("reaching state \'S3295\'");
                    goto label362;
                }
                throw new InvalidOperationException("never reached");
            label362:
;
                goto label363;
            }
            throw new InvalidOperationException("never reached");
        label363:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S854");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S854");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S855");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S855");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S27");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S856");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS26GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S856");
        }
        #endregion
        
        #region Test Starting in S260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260");
            this.Manager.Comment("reaching state \'S260\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1274;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1274);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1274);
            this.Manager.Comment("reaching state \'S261\'");
            int temp1287 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetPlatformChecker2)));
            if ((temp1287 == 0)) {
                this.Manager.Comment("reaching state \'S716\'");
                bool temp1275;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1275);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1275);
                this.Manager.Comment("reaching state \'S1205\'");
                int temp1278 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker1)));
                if ((temp1278 == 0)) {
                    this.Manager.Comment("reaching state \'S2084\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1276;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,4,Valid)\'");
                    temp1276 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3062\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1276, "return of NetrLogonControl2, state S3062");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label364;
                }
                if ((temp1278 == 1)) {
                    this.Manager.Comment("reaching state \'S2085\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1277;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,1,Valid)\'");
                    temp1277 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3063\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1277, "return of NetrLogonControl2, state S3063");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label364;
                }
                throw new InvalidOperationException("never reached");
            label364:
;
                goto label367;
            }
            if ((temp1287 == 1)) {
                this.Manager.Comment("reaching state \'S717\'");
                bool temp1279;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1279);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1279);
                this.Manager.Comment("reaching state \'S1206\'");
                int temp1282 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker3)));
                if ((temp1282 == 0)) {
                    this.Manager.Comment("reaching state \'S2086\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1280;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1280 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3064\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1280, "return of NetrLogonControl2, state S3064");
                    this.Manager.Comment("reaching state \'S3626\'");
                    goto label365;
                }
                if ((temp1282 == 1)) {
                    this.Manager.Comment("reaching state \'S2087\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1281;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1281 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3065\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1281, "return of NetrLogonControl2, state S3065");
                    this.Manager.Comment("reaching state \'S3627\'");
                    goto label365;
                }
                throw new InvalidOperationException("never reached");
            label365:
;
                goto label367;
            }
            if ((temp1287 == 2)) {
                this.Manager.Comment("reaching state \'S718\'");
                bool temp1283;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1283);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1283);
                this.Manager.Comment("reaching state \'S1207\'");
                int temp1286 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker5)));
                if ((temp1286 == 0)) {
                    this.Manager.Comment("reaching state \'S2088\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1284;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1284 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3066\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1284, "return of NetrLogonControl2, state S3066");
                    this.Manager.Comment("reaching state \'S3628\'");
                    goto label366;
                }
                if ((temp1286 == 1)) {
                    this.Manager.Comment("reaching state \'S2089\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1285;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1285 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3067\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1285, "return of NetrLogonControl2, state S3067");
                    this.Manager.Comment("reaching state \'S3629\'");
                    goto label366;
                }
                throw new InvalidOperationException("never reached");
            label366:
;
                goto label367;
            }
            throw new InvalidOperationException("never reached");
        label367:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S261");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1205");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1205");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S261");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1206");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1206");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S261");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1207");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS260GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1207");
        }
        #endregion
        
        #region Test Starting in S262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262");
            this.Manager.Comment("reaching state \'S262\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1288;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1288);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1288);
            this.Manager.Comment("reaching state \'S263\'");
            int temp1301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetPlatformChecker2)));
            if ((temp1301 == 0)) {
                this.Manager.Comment("reaching state \'S719\'");
                bool temp1289;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1289);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1289);
                this.Manager.Comment("reaching state \'S1208\'");
                int temp1292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker1)));
                if ((temp1292 == 0)) {
                    this.Manager.Comment("reaching state \'S2090\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1290;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1290 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3068\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1290, "return of NetrLogonControl2, state S3068");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label368;
                }
                if ((temp1292 == 1)) {
                    this.Manager.Comment("reaching state \'S2091\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1291;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,1,Valid)\'");
                    temp1291 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3069\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1291, "return of NetrLogonControl2, state S3069");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label368;
                }
                throw new InvalidOperationException("never reached");
            label368:
;
                goto label371;
            }
            if ((temp1301 == 1)) {
                this.Manager.Comment("reaching state \'S720\'");
                bool temp1293;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1293);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1293);
                this.Manager.Comment("reaching state \'S1209\'");
                int temp1296 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker3)));
                if ((temp1296 == 0)) {
                    this.Manager.Comment("reaching state \'S2092\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1294;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1294 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3070\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1294, "return of NetrLogonControl2, state S3070");
                    this.Manager.Comment("reaching state \'S3630\'");
                    goto label369;
                }
                if ((temp1296 == 1)) {
                    this.Manager.Comment("reaching state \'S2093\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1295;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1295 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3071\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1295, "return of NetrLogonControl2, state S3071");
                    this.Manager.Comment("reaching state \'S3631\'");
                    goto label369;
                }
                throw new InvalidOperationException("never reached");
            label369:
;
                goto label371;
            }
            if ((temp1301 == 2)) {
                this.Manager.Comment("reaching state \'S721\'");
                bool temp1297;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1297);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1297);
                this.Manager.Comment("reaching state \'S1210\'");
                int temp1300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker5)));
                if ((temp1300 == 0)) {
                    this.Manager.Comment("reaching state \'S2094\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1298;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1298 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3072\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1298, "return of NetrLogonControl2, state S3072");
                    this.Manager.Comment("reaching state \'S3632\'");
                    goto label370;
                }
                if ((temp1300 == 1)) {
                    this.Manager.Comment("reaching state \'S2095\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1299;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1299 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3073\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1299, "return of NetrLogonControl2, state S3073");
                    this.Manager.Comment("reaching state \'S3633\'");
                    goto label370;
                }
                throw new InvalidOperationException("never reached");
            label370:
;
                goto label371;
            }
            throw new InvalidOperationException("never reached");
        label371:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S263");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1208");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1208");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S263");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1209");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1209");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S263");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1210");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS262GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1210");
        }
        #endregion
        
        #region Test Starting in S264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264");
            this.Manager.Comment("reaching state \'S264\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1302;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1302);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1302);
            this.Manager.Comment("reaching state \'S265\'");
            int temp1315 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetPlatformChecker2)));
            if ((temp1315 == 0)) {
                this.Manager.Comment("reaching state \'S722\'");
                bool temp1303;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1303);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1303);
                this.Manager.Comment("reaching state \'S1211\'");
                int temp1306 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker1)));
                if ((temp1306 == 0)) {
                    this.Manager.Comment("reaching state \'S2096\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1304;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,Valid)\'");
                    temp1304 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3074\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1304, "return of NetrLogonControl2, state S3074");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label372;
                }
                if ((temp1306 == 1)) {
                    this.Manager.Comment("reaching state \'S2097\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1305;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,1,Valid)\'");
                    temp1305 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3075\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1305, "return of NetrLogonControl2, state S3075");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label372;
                }
                throw new InvalidOperationException("never reached");
            label372:
;
                goto label375;
            }
            if ((temp1315 == 1)) {
                this.Manager.Comment("reaching state \'S723\'");
                bool temp1307;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1307);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1307);
                this.Manager.Comment("reaching state \'S1212\'");
                int temp1310 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker3)));
                if ((temp1310 == 0)) {
                    this.Manager.Comment("reaching state \'S2098\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1308;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1308 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3076\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1308, "return of NetrLogonControl2, state S3076");
                    this.Manager.Comment("reaching state \'S3634\'");
                    goto label373;
                }
                if ((temp1310 == 1)) {
                    this.Manager.Comment("reaching state \'S2099\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1309;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1309 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3077\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1309, "return of NetrLogonControl2, state S3077");
                    this.Manager.Comment("reaching state \'S3635\'");
                    goto label373;
                }
                throw new InvalidOperationException("never reached");
            label373:
;
                goto label375;
            }
            if ((temp1315 == 2)) {
                this.Manager.Comment("reaching state \'S724\'");
                bool temp1311;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1311);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1311);
                this.Manager.Comment("reaching state \'S1213\'");
                int temp1314 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker5)));
                if ((temp1314 == 0)) {
                    this.Manager.Comment("reaching state \'S2100\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1312;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1312 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3078\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1312, "return of NetrLogonControl2, state S3078");
                    this.Manager.Comment("reaching state \'S3636\'");
                    goto label374;
                }
                if ((temp1314 == 1)) {
                    this.Manager.Comment("reaching state \'S2101\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1313;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1313 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3079\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1313, "return of NetrLogonControl2, state S3079");
                    this.Manager.Comment("reaching state \'S3637\'");
                    goto label374;
                }
                throw new InvalidOperationException("never reached");
            label374:
;
                goto label375;
            }
            throw new InvalidOperationException("never reached");
        label375:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S265");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1211");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1211");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S265");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1212");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1212");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S265");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1213");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS264GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1213");
        }
        #endregion
        
        #region Test Starting in S266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266");
            this.Manager.Comment("reaching state \'S266\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1316;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1316);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1316);
            this.Manager.Comment("reaching state \'S267\'");
            int temp1329 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetPlatformChecker2)));
            if ((temp1329 == 0)) {
                this.Manager.Comment("reaching state \'S725\'");
                bool temp1317;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1317);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1317);
                this.Manager.Comment("reaching state \'S1214\'");
                int temp1320 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker1)));
                if ((temp1320 == 0)) {
                    this.Manager.Comment("reaching state \'S2102\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1318;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,1,Valid)\'");
                    temp1318 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3080\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1318, "return of NetrLogonControl2, state S3080");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label376;
                }
                if ((temp1320 == 1)) {
                    this.Manager.Comment("reaching state \'S2103\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1319;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,1,Valid)\'");
                    temp1319 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3081\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1319, "return of NetrLogonControl2, state S3081");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label376;
                }
                throw new InvalidOperationException("never reached");
            label376:
;
                goto label379;
            }
            if ((temp1329 == 1)) {
                this.Manager.Comment("reaching state \'S726\'");
                bool temp1321;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1321);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1321);
                this.Manager.Comment("reaching state \'S1215\'");
                int temp1324 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker3)));
                if ((temp1324 == 0)) {
                    this.Manager.Comment("reaching state \'S2104\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1322;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1322 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3082\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1322, "return of NetrLogonControl2, state S3082");
                    this.Manager.Comment("reaching state \'S3638\'");
                    goto label377;
                }
                if ((temp1324 == 1)) {
                    this.Manager.Comment("reaching state \'S2105\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1323;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1323 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3083\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1323, "return of NetrLogonControl2, state S3083");
                    this.Manager.Comment("reaching state \'S3639\'");
                    goto label377;
                }
                throw new InvalidOperationException("never reached");
            label377:
;
                goto label379;
            }
            if ((temp1329 == 2)) {
                this.Manager.Comment("reaching state \'S727\'");
                bool temp1325;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1325);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1325);
                this.Manager.Comment("reaching state \'S1216\'");
                int temp1328 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker5)));
                if ((temp1328 == 0)) {
                    this.Manager.Comment("reaching state \'S2106\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1326;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1326 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3084\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1326, "return of NetrLogonControl2, state S3084");
                    this.Manager.Comment("reaching state \'S3640\'");
                    goto label378;
                }
                if ((temp1328 == 1)) {
                    this.Manager.Comment("reaching state \'S2107\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1327;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1327 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3085\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1327, "return of NetrLogonControl2, state S3085");
                    this.Manager.Comment("reaching state \'S3641\'");
                    goto label378;
                }
                throw new InvalidOperationException("never reached");
            label378:
;
                goto label379;
            }
            throw new InvalidOperationException("never reached");
        label379:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S267");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1214");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1214");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S267");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1215");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1215");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S267");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1216");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS266GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1216");
        }
        #endregion
        
        #region Test Starting in S268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268");
            this.Manager.Comment("reaching state \'S268\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1330;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1330);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1330);
            this.Manager.Comment("reaching state \'S269\'");
            int temp1343 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetPlatformChecker2)));
            if ((temp1343 == 0)) {
                this.Manager.Comment("reaching state \'S728\'");
                bool temp1331;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1331);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1331);
                this.Manager.Comment("reaching state \'S1217\'");
                int temp1334 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker1)));
                if ((temp1334 == 0)) {
                    this.Manager.Comment("reaching state \'S2108\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1332;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,1,Valid)\'");
                    temp1332 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3086\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1332, "return of NetrLogonControl2, state S3086");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label380;
                }
                if ((temp1334 == 1)) {
                    this.Manager.Comment("reaching state \'S2109\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1333;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,1,Valid)\'");
                    temp1333 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3087\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1333, "return of NetrLogonControl2, state S3087");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label380;
                }
                throw new InvalidOperationException("never reached");
            label380:
;
                goto label383;
            }
            if ((temp1343 == 1)) {
                this.Manager.Comment("reaching state \'S729\'");
                bool temp1335;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1335);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1335);
                this.Manager.Comment("reaching state \'S1218\'");
                int temp1338 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker3)));
                if ((temp1338 == 0)) {
                    this.Manager.Comment("reaching state \'S2110\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1336;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1336 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3088\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1336, "return of NetrLogonControl2, state S3088");
                    this.Manager.Comment("reaching state \'S3642\'");
                    goto label381;
                }
                if ((temp1338 == 1)) {
                    this.Manager.Comment("reaching state \'S2111\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1337;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1337 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3089\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1337, "return of NetrLogonControl2, state S3089");
                    this.Manager.Comment("reaching state \'S3643\'");
                    goto label381;
                }
                throw new InvalidOperationException("never reached");
            label381:
;
                goto label383;
            }
            if ((temp1343 == 2)) {
                this.Manager.Comment("reaching state \'S730\'");
                bool temp1339;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1339);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1339);
                this.Manager.Comment("reaching state \'S1219\'");
                int temp1342 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker5)));
                if ((temp1342 == 0)) {
                    this.Manager.Comment("reaching state \'S2112\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1340;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1340 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3090\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1340, "return of NetrLogonControl2, state S3090");
                    this.Manager.Comment("reaching state \'S3644\'");
                    goto label382;
                }
                if ((temp1342 == 1)) {
                    this.Manager.Comment("reaching state \'S2113\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1341;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1341 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3091\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1341, "return of NetrLogonControl2, state S3091");
                    this.Manager.Comment("reaching state \'S3645\'");
                    goto label382;
                }
                throw new InvalidOperationException("never reached");
            label382:
;
                goto label383;
            }
            throw new InvalidOperationException("never reached");
        label383:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S269");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1217");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1217");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S269");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1218");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1218");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S269");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1219");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS268GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1219");
        }
        #endregion
        
        #region Test Starting in S270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270");
            this.Manager.Comment("reaching state \'S270\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1344;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1344);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1344);
            this.Manager.Comment("reaching state \'S271\'");
            int temp1357 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetPlatformChecker2)));
            if ((temp1357 == 0)) {
                this.Manager.Comment("reaching state \'S731\'");
                bool temp1345;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1345);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1345);
                this.Manager.Comment("reaching state \'S1220\'");
                int temp1348 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker1)));
                if ((temp1348 == 0)) {
                    this.Manager.Comment("reaching state \'S2114\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1346;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,1,Valid)\'");
                    temp1346 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3092\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1346, "return of NetrLogonControl2, state S3092");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label384;
                }
                if ((temp1348 == 1)) {
                    this.Manager.Comment("reaching state \'S2115\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1347;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,1,Valid)\'");
                    temp1347 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3093\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1347, "return of NetrLogonControl2, state S3093");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label384;
                }
                throw new InvalidOperationException("never reached");
            label384:
;
                goto label387;
            }
            if ((temp1357 == 1)) {
                this.Manager.Comment("reaching state \'S732\'");
                bool temp1349;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1349);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1349);
                this.Manager.Comment("reaching state \'S1221\'");
                int temp1352 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker3)));
                if ((temp1352 == 0)) {
                    this.Manager.Comment("reaching state \'S2116\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1350;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1350 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3094\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1350, "return of NetrLogonControl2, state S3094");
                    this.Manager.Comment("reaching state \'S3646\'");
                    goto label385;
                }
                if ((temp1352 == 1)) {
                    this.Manager.Comment("reaching state \'S2117\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1351;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1351 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3095\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1351, "return of NetrLogonControl2, state S3095");
                    this.Manager.Comment("reaching state \'S3647\'");
                    goto label385;
                }
                throw new InvalidOperationException("never reached");
            label385:
;
                goto label387;
            }
            if ((temp1357 == 2)) {
                this.Manager.Comment("reaching state \'S733\'");
                bool temp1353;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1353);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1353);
                this.Manager.Comment("reaching state \'S1222\'");
                int temp1356 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker5)));
                if ((temp1356 == 0)) {
                    this.Manager.Comment("reaching state \'S2118\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1354;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1354 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3096\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1354, "return of NetrLogonControl2, state S3096");
                    this.Manager.Comment("reaching state \'S3648\'");
                    goto label386;
                }
                if ((temp1356 == 1)) {
                    this.Manager.Comment("reaching state \'S2119\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1355;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1355 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3097\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1355, "return of NetrLogonControl2, state S3097");
                    this.Manager.Comment("reaching state \'S3649\'");
                    goto label386;
                }
                throw new InvalidOperationException("never reached");
            label386:
;
                goto label387;
            }
            throw new InvalidOperationException("never reached");
        label387:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S271");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1220");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1220");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S271");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1221");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1221");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S271");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1222");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS270GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1222");
        }
        #endregion
        
        #region Test Starting in S272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272");
            this.Manager.Comment("reaching state \'S272\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1358;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1358);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1358);
            this.Manager.Comment("reaching state \'S273\'");
            int temp1371 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetPlatformChecker2)));
            if ((temp1371 == 0)) {
                this.Manager.Comment("reaching state \'S734\'");
                bool temp1359;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1359);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1359);
                this.Manager.Comment("reaching state \'S1223\'");
                int temp1362 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker1)));
                if ((temp1362 == 0)) {
                    this.Manager.Comment("reaching state \'S2120\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1360;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,3,Valid)\'");
                    temp1360 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3098\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1360, "return of NetrLogonControl2, state S3098");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label388;
                }
                if ((temp1362 == 1)) {
                    this.Manager.Comment("reaching state \'S2121\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1361;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,3,Valid)\'");
                    temp1361 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104100");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3099\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1361, "return of NetrLogonControl2, state S3099");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label388;
                }
                throw new InvalidOperationException("never reached");
            label388:
;
                goto label391;
            }
            if ((temp1371 == 1)) {
                this.Manager.Comment("reaching state \'S735\'");
                bool temp1363;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1363);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1363);
                this.Manager.Comment("reaching state \'S1224\'");
                int temp1366 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker3)));
                if ((temp1366 == 0)) {
                    this.Manager.Comment("reaching state \'S2122\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1364;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1364 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3100\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1364, "return of NetrLogonControl2, state S3100");
                    this.Manager.Comment("reaching state \'S3650\'");
                    goto label389;
                }
                if ((temp1366 == 1)) {
                    this.Manager.Comment("reaching state \'S2123\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1365;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1365 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3101\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1365, "return of NetrLogonControl2, state S3101");
                    this.Manager.Comment("reaching state \'S3651\'");
                    goto label389;
                }
                throw new InvalidOperationException("never reached");
            label389:
;
                goto label391;
            }
            if ((temp1371 == 2)) {
                this.Manager.Comment("reaching state \'S736\'");
                bool temp1367;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1367);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1367);
                this.Manager.Comment("reaching state \'S1225\'");
                int temp1370 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker5)));
                if ((temp1370 == 0)) {
                    this.Manager.Comment("reaching state \'S2124\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1368;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1368 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3102\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1368, "return of NetrLogonControl2, state S3102");
                    this.Manager.Comment("reaching state \'S3652\'");
                    goto label390;
                }
                if ((temp1370 == 1)) {
                    this.Manager.Comment("reaching state \'S2125\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1369;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1369 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3103\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1369, "return of NetrLogonControl2, state S3103");
                    this.Manager.Comment("reaching state \'S3653\'");
                    goto label390;
                }
                throw new InvalidOperationException("never reached");
            label390:
;
                goto label391;
            }
            throw new InvalidOperationException("never reached");
        label391:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S273");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1223");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1223");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S273");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1224");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1224");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S273");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1225");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS272GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1225");
        }
        #endregion
        
        #region Test Starting in S274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274");
            this.Manager.Comment("reaching state \'S274\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1372;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1372);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1372);
            this.Manager.Comment("reaching state \'S275\'");
            int temp1385 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetPlatformChecker2)));
            if ((temp1385 == 0)) {
                this.Manager.Comment("reaching state \'S737\'");
                bool temp1373;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1373);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1373);
                this.Manager.Comment("reaching state \'S1226\'");
                int temp1376 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker1)));
                if ((temp1376 == 0)) {
                    this.Manager.Comment("reaching state \'S2126\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1374;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,2,Valid)\'");
                    temp1374 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3104\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1374, "return of NetrLogonControl2, state S3104");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label392;
                }
                if ((temp1376 == 1)) {
                    this.Manager.Comment("reaching state \'S2127\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1375;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,3,Valid)\'");
                    temp1375 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3105\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1375, "return of NetrLogonControl2, state S3105");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label392;
                }
                throw new InvalidOperationException("never reached");
            label392:
;
                goto label395;
            }
            if ((temp1385 == 1)) {
                this.Manager.Comment("reaching state \'S738\'");
                bool temp1377;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1377);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1377);
                this.Manager.Comment("reaching state \'S1227\'");
                int temp1380 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker3)));
                if ((temp1380 == 0)) {
                    this.Manager.Comment("reaching state \'S2128\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1378;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1378 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3106\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1378, "return of NetrLogonControl2, state S3106");
                    this.Manager.Comment("reaching state \'S3654\'");
                    goto label393;
                }
                if ((temp1380 == 1)) {
                    this.Manager.Comment("reaching state \'S2129\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1379;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1379 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3107\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1379, "return of NetrLogonControl2, state S3107");
                    this.Manager.Comment("reaching state \'S3655\'");
                    goto label393;
                }
                throw new InvalidOperationException("never reached");
            label393:
;
                goto label395;
            }
            if ((temp1385 == 2)) {
                this.Manager.Comment("reaching state \'S739\'");
                bool temp1381;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1381);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1381);
                this.Manager.Comment("reaching state \'S1228\'");
                int temp1384 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker5)));
                if ((temp1384 == 0)) {
                    this.Manager.Comment("reaching state \'S2130\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1382;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1382 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3108\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1382, "return of NetrLogonControl2, state S3108");
                    this.Manager.Comment("reaching state \'S3656\'");
                    goto label394;
                }
                if ((temp1384 == 1)) {
                    this.Manager.Comment("reaching state \'S2131\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1383;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1383 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3109\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1383, "return of NetrLogonControl2, state S3109");
                    this.Manager.Comment("reaching state \'S3657\'");
                    goto label394;
                }
                throw new InvalidOperationException("never reached");
            label394:
;
                goto label395;
            }
            throw new InvalidOperationException("never reached");
        label395:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S275");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1226");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1226");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S275");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1227");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1227");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S275");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1228");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS274GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1228");
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1386;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1386);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1386);
            this.Manager.Comment("reaching state \'S277\'");
            int temp1399 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetPlatformChecker2)));
            if ((temp1399 == 0)) {
                this.Manager.Comment("reaching state \'S740\'");
                bool temp1387;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1387);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1387);
                this.Manager.Comment("reaching state \'S1229\'");
                int temp1390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker1)));
                if ((temp1390 == 0)) {
                    this.Manager.Comment("reaching state \'S2132\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1388;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,2,Valid)\'");
                    temp1388 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3110\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1388, "return of NetrLogonControl2, state S3110");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label396;
                }
                if ((temp1390 == 1)) {
                    this.Manager.Comment("reaching state \'S2133\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1389;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,3,Valid)\'");
                    temp1389 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3111\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1389, "return of NetrLogonControl2, state S3111");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label396;
                }
                throw new InvalidOperationException("never reached");
            label396:
;
                goto label399;
            }
            if ((temp1399 == 1)) {
                this.Manager.Comment("reaching state \'S741\'");
                bool temp1391;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1391);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1391);
                this.Manager.Comment("reaching state \'S1230\'");
                int temp1394 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker3)));
                if ((temp1394 == 0)) {
                    this.Manager.Comment("reaching state \'S2134\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1392;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1392 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3112\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1392, "return of NetrLogonControl2, state S3112");
                    this.Manager.Comment("reaching state \'S3658\'");
                    goto label397;
                }
                if ((temp1394 == 1)) {
                    this.Manager.Comment("reaching state \'S2135\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1393;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1393 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3113\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1393, "return of NetrLogonControl2, state S3113");
                    this.Manager.Comment("reaching state \'S3659\'");
                    goto label397;
                }
                throw new InvalidOperationException("never reached");
            label397:
;
                goto label399;
            }
            if ((temp1399 == 2)) {
                this.Manager.Comment("reaching state \'S742\'");
                bool temp1395;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1395);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1395);
                this.Manager.Comment("reaching state \'S1231\'");
                int temp1398 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker5)));
                if ((temp1398 == 0)) {
                    this.Manager.Comment("reaching state \'S2136\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1396;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1396 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3114\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1396, "return of NetrLogonControl2, state S3114");
                    this.Manager.Comment("reaching state \'S3660\'");
                    goto label398;
                }
                if ((temp1398 == 1)) {
                    this.Manager.Comment("reaching state \'S2137\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1397;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1397 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3115\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1397, "return of NetrLogonControl2, state S3115");
                    this.Manager.Comment("reaching state \'S3661\'");
                    goto label398;
                }
                throw new InvalidOperationException("never reached");
            label398:
;
                goto label399;
            }
            throw new InvalidOperationException("never reached");
        label399:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S277");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1229");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1229");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S277");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1230");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1230");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S277");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1231");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS276GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1231");
        }
        #endregion
        
        #region Test Starting in S278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278");
            this.Manager.Comment("reaching state \'S278\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1400;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1400);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1400);
            this.Manager.Comment("reaching state \'S279\'");
            int temp1413 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetPlatformChecker2)));
            if ((temp1413 == 0)) {
                this.Manager.Comment("reaching state \'S743\'");
                bool temp1401;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1401);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1401);
                this.Manager.Comment("reaching state \'S1232\'");
                int temp1404 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker1)));
                if ((temp1404 == 0)) {
                    this.Manager.Comment("reaching state \'S2138\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1402;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,2,Valid)\'");
                    temp1402 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3116\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1402, "return of NetrLogonControl2, state S3116");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label400;
                }
                if ((temp1404 == 1)) {
                    this.Manager.Comment("reaching state \'S2139\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1403;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,3,Valid)\'");
                    temp1403 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3117\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1403, "return of NetrLogonControl2, state S3117");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label400;
                }
                throw new InvalidOperationException("never reached");
            label400:
;
                goto label403;
            }
            if ((temp1413 == 1)) {
                this.Manager.Comment("reaching state \'S744\'");
                bool temp1405;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1405);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1405);
                this.Manager.Comment("reaching state \'S1233\'");
                int temp1408 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker3)));
                if ((temp1408 == 0)) {
                    this.Manager.Comment("reaching state \'S2140\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1406;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1406 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3118\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1406, "return of NetrLogonControl2, state S3118");
                    this.Manager.Comment("reaching state \'S3662\'");
                    goto label401;
                }
                if ((temp1408 == 1)) {
                    this.Manager.Comment("reaching state \'S2141\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1407;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1407 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3119\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1407, "return of NetrLogonControl2, state S3119");
                    this.Manager.Comment("reaching state \'S3663\'");
                    goto label401;
                }
                throw new InvalidOperationException("never reached");
            label401:
;
                goto label403;
            }
            if ((temp1413 == 2)) {
                this.Manager.Comment("reaching state \'S745\'");
                bool temp1409;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1409);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1409);
                this.Manager.Comment("reaching state \'S1234\'");
                int temp1412 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker5)));
                if ((temp1412 == 0)) {
                    this.Manager.Comment("reaching state \'S2142\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1410;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1410 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3120\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1410, "return of NetrLogonControl2, state S3120");
                    this.Manager.Comment("reaching state \'S3664\'");
                    goto label402;
                }
                if ((temp1412 == 1)) {
                    this.Manager.Comment("reaching state \'S2143\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1411;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1411 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3121\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1411, "return of NetrLogonControl2, state S3121");
                    this.Manager.Comment("reaching state \'S3665\'");
                    goto label402;
                }
                throw new InvalidOperationException("never reached");
            label402:
;
                goto label403;
            }
            throw new InvalidOperationException("never reached");
        label403:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S279");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1232");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1232");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S279");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1233");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1233");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S279");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1234");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS278GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1234");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28");
            this.Manager.Comment("reaching state \'S28\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1414;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1414);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1414);
            this.Manager.Comment("reaching state \'S29\'");
            int temp1427 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetPlatformChecker2)));
            if ((temp1427 == 0)) {
                this.Manager.Comment("reaching state \'S368\'");
                bool temp1415;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1415);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1415);
                this.Manager.Comment("reaching state \'S857\'");
                int temp1418 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker1)));
                if ((temp1418 == 0)) {
                    this.Manager.Comment("reaching state \'S1388\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1416;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,4,Valid)\'");
                    temp1416 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2366\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1416, "return of NetrLogonControl2, state S2366");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label404;
                }
                if ((temp1418 == 1)) {
                    this.Manager.Comment("reaching state \'S1389\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1417;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,2,Valid)\'");
                    temp1417 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2367\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1417, "return of NetrLogonControl2, state S2367");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label404;
                }
                throw new InvalidOperationException("never reached");
            label404:
;
                goto label407;
            }
            if ((temp1427 == 1)) {
                this.Manager.Comment("reaching state \'S369\'");
                bool temp1419;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1419);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1419);
                this.Manager.Comment("reaching state \'S858\'");
                int temp1422 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker3)));
                if ((temp1422 == 0)) {
                    this.Manager.Comment("reaching state \'S1390\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1420;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,4,Valid)\'");
                    temp1420 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2368\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1420, "return of NetrLogonControl2, state S2368");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label405;
                }
                if ((temp1422 == 1)) {
                    this.Manager.Comment("reaching state \'S1391\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1421;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1421 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2369\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1421, "return of NetrLogonControl2, state S2369");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label405;
                }
                throw new InvalidOperationException("never reached");
            label405:
;
                goto label407;
            }
            if ((temp1427 == 2)) {
                this.Manager.Comment("reaching state \'S370\'");
                bool temp1423;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1423);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1423);
                this.Manager.Comment("reaching state \'S859\'");
                int temp1426 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker5)));
                if ((temp1426 == 0)) {
                    this.Manager.Comment("reaching state \'S1392\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1424;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1424 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2370\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1424, "return of NetrLogonControl2, state S2370");
                    this.Manager.Comment("reaching state \'S3296\'");
                    goto label406;
                }
                if ((temp1426 == 1)) {
                    this.Manager.Comment("reaching state \'S1393\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1425;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1425 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2371\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1425, "return of NetrLogonControl2, state S2371");
                    this.Manager.Comment("reaching state \'S3297\'");
                    goto label406;
                }
                throw new InvalidOperationException("never reached");
            label406:
;
                goto label407;
            }
            throw new InvalidOperationException("never reached");
        label407:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S857");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S857");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S858");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S858");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S29");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S859");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS28GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S859");
        }
        #endregion
        
        #region Test Starting in S280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280");
            this.Manager.Comment("reaching state \'S280\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1428;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1428);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1428);
            this.Manager.Comment("reaching state \'S281\'");
            int temp1441 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetPlatformChecker2)));
            if ((temp1441 == 0)) {
                this.Manager.Comment("reaching state \'S746\'");
                bool temp1429;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1429);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1429);
                this.Manager.Comment("reaching state \'S1235\'");
                int temp1432 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker1)));
                if ((temp1432 == 0)) {
                    this.Manager.Comment("reaching state \'S2144\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1430;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,2,Valid)\'");
                    temp1430 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3122\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1430, "return of NetrLogonControl2, state S3122");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label408;
                }
                if ((temp1432 == 1)) {
                    this.Manager.Comment("reaching state \'S2145\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1431;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,3,Valid)\'");
                    temp1431 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3123\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1431, "return of NetrLogonControl2, state S3123");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label408;
                }
                throw new InvalidOperationException("never reached");
            label408:
;
                goto label411;
            }
            if ((temp1441 == 1)) {
                this.Manager.Comment("reaching state \'S747\'");
                bool temp1433;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1433);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1433);
                this.Manager.Comment("reaching state \'S1236\'");
                int temp1436 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker3)));
                if ((temp1436 == 0)) {
                    this.Manager.Comment("reaching state \'S2146\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1434;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1434 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3124\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1434, "return of NetrLogonControl2, state S3124");
                    this.Manager.Comment("reaching state \'S3666\'");
                    goto label409;
                }
                if ((temp1436 == 1)) {
                    this.Manager.Comment("reaching state \'S2147\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1435;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1435 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3125\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1435, "return of NetrLogonControl2, state S3125");
                    this.Manager.Comment("reaching state \'S3667\'");
                    goto label409;
                }
                throw new InvalidOperationException("never reached");
            label409:
;
                goto label411;
            }
            if ((temp1441 == 2)) {
                this.Manager.Comment("reaching state \'S748\'");
                bool temp1437;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1437);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1437);
                this.Manager.Comment("reaching state \'S1237\'");
                int temp1440 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker5)));
                if ((temp1440 == 0)) {
                    this.Manager.Comment("reaching state \'S2148\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1438;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1438 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3126\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1438, "return of NetrLogonControl2, state S3126");
                    this.Manager.Comment("reaching state \'S3668\'");
                    goto label410;
                }
                if ((temp1440 == 1)) {
                    this.Manager.Comment("reaching state \'S2149\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1439;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1439 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3127\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1439, "return of NetrLogonControl2, state S3127");
                    this.Manager.Comment("reaching state \'S3669\'");
                    goto label410;
                }
                throw new InvalidOperationException("never reached");
            label410:
;
                goto label411;
            }
            throw new InvalidOperationException("never reached");
        label411:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S281");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1235");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1235");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S281");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1236");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1236");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S281");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1237");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS280GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1237");
        }
        #endregion
        
        #region Test Starting in S282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282");
            this.Manager.Comment("reaching state \'S282\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1442;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1442);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1442);
            this.Manager.Comment("reaching state \'S283\'");
            int temp1455 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetPlatformChecker2)));
            if ((temp1455 == 0)) {
                this.Manager.Comment("reaching state \'S749\'");
                bool temp1443;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1443);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1443);
                this.Manager.Comment("reaching state \'S1238\'");
                int temp1446 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker1)));
                if ((temp1446 == 0)) {
                    this.Manager.Comment("reaching state \'S2150\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1444;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,2,Valid)\'");
                    temp1444 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3128\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1444, "return of NetrLogonControl2, state S3128");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label412;
                }
                if ((temp1446 == 1)) {
                    this.Manager.Comment("reaching state \'S2151\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1445;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,3,Valid)\'");
                    temp1445 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3129\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1445, "return of NetrLogonControl2, state S3129");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label412;
                }
                throw new InvalidOperationException("never reached");
            label412:
;
                goto label415;
            }
            if ((temp1455 == 1)) {
                this.Manager.Comment("reaching state \'S750\'");
                bool temp1447;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1447);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1447);
                this.Manager.Comment("reaching state \'S1239\'");
                int temp1450 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker3)));
                if ((temp1450 == 0)) {
                    this.Manager.Comment("reaching state \'S2152\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1448;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1448 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3130\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1448, "return of NetrLogonControl2, state S3130");
                    this.Manager.Comment("reaching state \'S3670\'");
                    goto label413;
                }
                if ((temp1450 == 1)) {
                    this.Manager.Comment("reaching state \'S2153\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1449;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1449 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3131\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1449, "return of NetrLogonControl2, state S3131");
                    this.Manager.Comment("reaching state \'S3671\'");
                    goto label413;
                }
                throw new InvalidOperationException("never reached");
            label413:
;
                goto label415;
            }
            if ((temp1455 == 2)) {
                this.Manager.Comment("reaching state \'S751\'");
                bool temp1451;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1451);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1451);
                this.Manager.Comment("reaching state \'S1240\'");
                int temp1454 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker5)));
                if ((temp1454 == 0)) {
                    this.Manager.Comment("reaching state \'S2154\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1452;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1452 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3132\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1452, "return of NetrLogonControl2, state S3132");
                    this.Manager.Comment("reaching state \'S3672\'");
                    goto label414;
                }
                if ((temp1454 == 1)) {
                    this.Manager.Comment("reaching state \'S2155\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1453;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1453 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3133\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1453, "return of NetrLogonControl2, state S3133");
                    this.Manager.Comment("reaching state \'S3673\'");
                    goto label414;
                }
                throw new InvalidOperationException("never reached");
            label414:
;
                goto label415;
            }
            throw new InvalidOperationException("never reached");
        label415:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S283");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1238");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1238");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S283");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1239");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1239");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S283");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1240");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS282GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1240");
        }
        #endregion
        
        #region Test Starting in S284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284");
            this.Manager.Comment("reaching state \'S284\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1456;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1456);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1456);
            this.Manager.Comment("reaching state \'S285\'");
            int temp1469 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetPlatformChecker2)));
            if ((temp1469 == 0)) {
                this.Manager.Comment("reaching state \'S752\'");
                bool temp1457;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1457);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1457);
                this.Manager.Comment("reaching state \'S1241\'");
                int temp1460 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker1)));
                if ((temp1460 == 0)) {
                    this.Manager.Comment("reaching state \'S2156\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1458;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,2,Valid)\'");
                    temp1458 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3134\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1458, "return of NetrLogonControl2, state S3134");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label416;
                }
                if ((temp1460 == 1)) {
                    this.Manager.Comment("reaching state \'S2157\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1459;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,3,Valid)\'");
                    temp1459 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3135\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1459, "return of NetrLogonControl2, state S3135");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label416;
                }
                throw new InvalidOperationException("never reached");
            label416:
;
                goto label419;
            }
            if ((temp1469 == 1)) {
                this.Manager.Comment("reaching state \'S753\'");
                bool temp1461;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1461);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1461);
                this.Manager.Comment("reaching state \'S1242\'");
                int temp1464 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker3)));
                if ((temp1464 == 0)) {
                    this.Manager.Comment("reaching state \'S2158\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1462;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1462 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3136\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1462, "return of NetrLogonControl2, state S3136");
                    this.Manager.Comment("reaching state \'S3674\'");
                    goto label417;
                }
                if ((temp1464 == 1)) {
                    this.Manager.Comment("reaching state \'S2159\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1463;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1463 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3137\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1463, "return of NetrLogonControl2, state S3137");
                    this.Manager.Comment("reaching state \'S3675\'");
                    goto label417;
                }
                throw new InvalidOperationException("never reached");
            label417:
;
                goto label419;
            }
            if ((temp1469 == 2)) {
                this.Manager.Comment("reaching state \'S754\'");
                bool temp1465;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1465);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1465);
                this.Manager.Comment("reaching state \'S1243\'");
                int temp1468 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker5)));
                if ((temp1468 == 0)) {
                    this.Manager.Comment("reaching state \'S2160\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1466;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1466 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3138\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1466, "return of NetrLogonControl2, state S3138");
                    this.Manager.Comment("reaching state \'S3676\'");
                    goto label418;
                }
                if ((temp1468 == 1)) {
                    this.Manager.Comment("reaching state \'S2161\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1467;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1467 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3139\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1467, "return of NetrLogonControl2, state S3139");
                    this.Manager.Comment("reaching state \'S3677\'");
                    goto label418;
                }
                throw new InvalidOperationException("never reached");
            label418:
;
                goto label419;
            }
            throw new InvalidOperationException("never reached");
        label419:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S285");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1241");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1241");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S285");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1242");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1242");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S285");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1243");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS284GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1243");
        }
        #endregion
        
        #region Test Starting in S286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286");
            this.Manager.Comment("reaching state \'S286\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1470;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1470);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1470);
            this.Manager.Comment("reaching state \'S287\'");
            int temp1483 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetPlatformChecker2)));
            if ((temp1483 == 0)) {
                this.Manager.Comment("reaching state \'S755\'");
                bool temp1471;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1471);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1471);
                this.Manager.Comment("reaching state \'S1244\'");
                int temp1474 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker1)));
                if ((temp1474 == 0)) {
                    this.Manager.Comment("reaching state \'S2162\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1472;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,3,Valid)\'");
                    temp1472 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3140\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1472, "return of NetrLogonControl2, state S3140");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label420;
                }
                if ((temp1474 == 1)) {
                    this.Manager.Comment("reaching state \'S2163\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1473;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,3,Valid)\'");
                    temp1473 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3141\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1473, "return of NetrLogonControl2, state S3141");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label420;
                }
                throw new InvalidOperationException("never reached");
            label420:
;
                goto label423;
            }
            if ((temp1483 == 1)) {
                this.Manager.Comment("reaching state \'S756\'");
                bool temp1475;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1475);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1475);
                this.Manager.Comment("reaching state \'S1245\'");
                int temp1478 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker3)));
                if ((temp1478 == 0)) {
                    this.Manager.Comment("reaching state \'S2164\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1476;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1476 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3142\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1476, "return of NetrLogonControl2, state S3142");
                    this.Manager.Comment("reaching state \'S3678\'");
                    goto label421;
                }
                if ((temp1478 == 1)) {
                    this.Manager.Comment("reaching state \'S2165\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1477;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1477 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3143\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1477, "return of NetrLogonControl2, state S3143");
                    this.Manager.Comment("reaching state \'S3679\'");
                    goto label421;
                }
                throw new InvalidOperationException("never reached");
            label421:
;
                goto label423;
            }
            if ((temp1483 == 2)) {
                this.Manager.Comment("reaching state \'S757\'");
                bool temp1479;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1479);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1479);
                this.Manager.Comment("reaching state \'S1246\'");
                int temp1482 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker5)));
                if ((temp1482 == 0)) {
                    this.Manager.Comment("reaching state \'S2166\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1480;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1480 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3144\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1480, "return of NetrLogonControl2, state S3144");
                    this.Manager.Comment("reaching state \'S3680\'");
                    goto label422;
                }
                if ((temp1482 == 1)) {
                    this.Manager.Comment("reaching state \'S2167\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1481;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1481 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3145\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1481, "return of NetrLogonControl2, state S3145");
                    this.Manager.Comment("reaching state \'S3681\'");
                    goto label422;
                }
                throw new InvalidOperationException("never reached");
            label422:
;
                goto label423;
            }
            throw new InvalidOperationException("never reached");
        label423:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S287");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1244");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1244");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S287");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1245");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1245");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S287");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1246");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS286GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1246");
        }
        #endregion
        
        #region Test Starting in S288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288");
            this.Manager.Comment("reaching state \'S288\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1484;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1484);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1484);
            this.Manager.Comment("reaching state \'S289\'");
            int temp1497 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetPlatformChecker2)));
            if ((temp1497 == 0)) {
                this.Manager.Comment("reaching state \'S758\'");
                bool temp1485;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1485);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1485);
                this.Manager.Comment("reaching state \'S1247\'");
                int temp1488 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker1)));
                if ((temp1488 == 0)) {
                    this.Manager.Comment("reaching state \'S2168\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1486;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,3,Valid)\'");
                    temp1486 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3146\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1486, "return of NetrLogonControl2, state S3146");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label424;
                }
                if ((temp1488 == 1)) {
                    this.Manager.Comment("reaching state \'S2169\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1487;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,3,Valid)\'");
                    temp1487 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3147\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1487, "return of NetrLogonControl2, state S3147");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label424;
                }
                throw new InvalidOperationException("never reached");
            label424:
;
                goto label427;
            }
            if ((temp1497 == 1)) {
                this.Manager.Comment("reaching state \'S759\'");
                bool temp1489;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1489);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1489);
                this.Manager.Comment("reaching state \'S1248\'");
                int temp1492 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker3)));
                if ((temp1492 == 0)) {
                    this.Manager.Comment("reaching state \'S2170\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1490;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1490 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3148\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1490, "return of NetrLogonControl2, state S3148");
                    this.Manager.Comment("reaching state \'S3682\'");
                    goto label425;
                }
                if ((temp1492 == 1)) {
                    this.Manager.Comment("reaching state \'S2171\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1491;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1491 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3149\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1491, "return of NetrLogonControl2, state S3149");
                    this.Manager.Comment("reaching state \'S3683\'");
                    goto label425;
                }
                throw new InvalidOperationException("never reached");
            label425:
;
                goto label427;
            }
            if ((temp1497 == 2)) {
                this.Manager.Comment("reaching state \'S760\'");
                bool temp1493;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1493);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1493);
                this.Manager.Comment("reaching state \'S1249\'");
                int temp1496 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker5)));
                if ((temp1496 == 0)) {
                    this.Manager.Comment("reaching state \'S2172\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1494;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1494 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3150\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1494, "return of NetrLogonControl2, state S3150");
                    this.Manager.Comment("reaching state \'S3684\'");
                    goto label426;
                }
                if ((temp1496 == 1)) {
                    this.Manager.Comment("reaching state \'S2173\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1495;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1495 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3151\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1495, "return of NetrLogonControl2, state S3151");
                    this.Manager.Comment("reaching state \'S3685\'");
                    goto label426;
                }
                throw new InvalidOperationException("never reached");
            label426:
;
                goto label427;
            }
            throw new InvalidOperationException("never reached");
        label427:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S289");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1247");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1247");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S289");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1248");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1248");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S289");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1249");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS288GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1249");
        }
        #endregion
        
        #region Test Starting in S290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290");
            this.Manager.Comment("reaching state \'S290\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1498;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1498);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1498);
            this.Manager.Comment("reaching state \'S291\'");
            int temp1511 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetPlatformChecker2)));
            if ((temp1511 == 0)) {
                this.Manager.Comment("reaching state \'S761\'");
                bool temp1499;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1499);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1499);
                this.Manager.Comment("reaching state \'S1250\'");
                int temp1502 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker1)));
                if ((temp1502 == 0)) {
                    this.Manager.Comment("reaching state \'S2174\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1500;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,3,Valid)\'");
                    temp1500 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3152\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1500, "return of NetrLogonControl2, state S3152");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label428;
                }
                if ((temp1502 == 1)) {
                    this.Manager.Comment("reaching state \'S2175\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1501;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,Valid)\'");
                    temp1501 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3153\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1501, "return of NetrLogonControl2, state S3153");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label428;
                }
                throw new InvalidOperationException("never reached");
            label428:
;
                goto label431;
            }
            if ((temp1511 == 1)) {
                this.Manager.Comment("reaching state \'S762\'");
                bool temp1503;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1503);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1503);
                this.Manager.Comment("reaching state \'S1251\'");
                int temp1506 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker3)));
                if ((temp1506 == 0)) {
                    this.Manager.Comment("reaching state \'S2176\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1504;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1504 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3154\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1504, "return of NetrLogonControl2, state S3154");
                    this.Manager.Comment("reaching state \'S3686\'");
                    goto label429;
                }
                if ((temp1506 == 1)) {
                    this.Manager.Comment("reaching state \'S2177\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1505;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1505 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3155\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1505, "return of NetrLogonControl2, state S3155");
                    this.Manager.Comment("reaching state \'S3687\'");
                    goto label429;
                }
                throw new InvalidOperationException("never reached");
            label429:
;
                goto label431;
            }
            if ((temp1511 == 2)) {
                this.Manager.Comment("reaching state \'S763\'");
                bool temp1507;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1507);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1507);
                this.Manager.Comment("reaching state \'S1252\'");
                int temp1510 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker5)));
                if ((temp1510 == 0)) {
                    this.Manager.Comment("reaching state \'S2178\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1508;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1508 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3156\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1508, "return of NetrLogonControl2, state S3156");
                    this.Manager.Comment("reaching state \'S3688\'");
                    goto label430;
                }
                if ((temp1510 == 1)) {
                    this.Manager.Comment("reaching state \'S2179\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1509;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1509 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3157\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1509, "return of NetrLogonControl2, state S3157");
                    this.Manager.Comment("reaching state \'S3689\'");
                    goto label430;
                }
                throw new InvalidOperationException("never reached");
            label430:
;
                goto label431;
            }
            throw new InvalidOperationException("never reached");
        label431:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S291");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1250");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1250");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S291");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1251");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1251");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S291");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1252");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS290GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1252");
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292");
            this.Manager.Comment("reaching state \'S292\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1512;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1512);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1512);
            this.Manager.Comment("reaching state \'S293\'");
            int temp1525 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetPlatformChecker2)));
            if ((temp1525 == 0)) {
                this.Manager.Comment("reaching state \'S764\'");
                bool temp1513;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1513);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1513);
                this.Manager.Comment("reaching state \'S1253\'");
                int temp1516 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker1)));
                if ((temp1516 == 0)) {
                    this.Manager.Comment("reaching state \'S2180\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1514;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,Valid)\'");
                    temp1514 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3158\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1514, "return of NetrLogonControl2, state S3158");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label432;
                }
                if ((temp1516 == 1)) {
                    this.Manager.Comment("reaching state \'S2181\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1515;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,Valid)\'");
                    temp1515 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3159\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1515, "return of NetrLogonControl2, state S3159");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label432;
                }
                throw new InvalidOperationException("never reached");
            label432:
;
                goto label435;
            }
            if ((temp1525 == 1)) {
                this.Manager.Comment("reaching state \'S765\'");
                bool temp1517;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1517);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1517);
                this.Manager.Comment("reaching state \'S1254\'");
                int temp1520 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker3)));
                if ((temp1520 == 0)) {
                    this.Manager.Comment("reaching state \'S2182\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1518;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1518 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3160\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1518, "return of NetrLogonControl2, state S3160");
                    this.Manager.Comment("reaching state \'S3690\'");
                    goto label433;
                }
                if ((temp1520 == 1)) {
                    this.Manager.Comment("reaching state \'S2183\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1519;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1519 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3161\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1519, "return of NetrLogonControl2, state S3161");
                    this.Manager.Comment("reaching state \'S3691\'");
                    goto label433;
                }
                throw new InvalidOperationException("never reached");
            label433:
;
                goto label435;
            }
            if ((temp1525 == 2)) {
                this.Manager.Comment("reaching state \'S766\'");
                bool temp1521;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1521);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1521);
                this.Manager.Comment("reaching state \'S1255\'");
                int temp1524 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker5)));
                if ((temp1524 == 0)) {
                    this.Manager.Comment("reaching state \'S2184\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1522;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1522 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3162\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1522, "return of NetrLogonControl2, state S3162");
                    this.Manager.Comment("reaching state \'S3692\'");
                    goto label434;
                }
                if ((temp1524 == 1)) {
                    this.Manager.Comment("reaching state \'S2185\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1523;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1523 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3163\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1523, "return of NetrLogonControl2, state S3163");
                    this.Manager.Comment("reaching state \'S3693\'");
                    goto label434;
                }
                throw new InvalidOperationException("never reached");
            label434:
;
                goto label435;
            }
            throw new InvalidOperationException("never reached");
        label435:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S293");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1253");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1253");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S293");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1254");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1254");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S293");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1255");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS292GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1255");
        }
        #endregion
        
        #region Test Starting in S294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294");
            this.Manager.Comment("reaching state \'S294\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1526;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1526);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1526);
            this.Manager.Comment("reaching state \'S295\'");
            int temp1539 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetPlatformChecker2)));
            if ((temp1539 == 0)) {
                this.Manager.Comment("reaching state \'S767\'");
                bool temp1527;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1527);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1527);
                this.Manager.Comment("reaching state \'S1256\'");
                int temp1530 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker1)));
                if ((temp1530 == 0)) {
                    this.Manager.Comment("reaching state \'S2186\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1528;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,4,Valid)\'");
                    temp1528 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3164\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1528, "return of NetrLogonControl2, state S3164");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label436;
                }
                if ((temp1530 == 1)) {
                    this.Manager.Comment("reaching state \'S2187\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1529;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,Valid)\'");
                    temp1529 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3165\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1529, "return of NetrLogonControl2, state S3165");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label436;
                }
                throw new InvalidOperationException("never reached");
            label436:
;
                goto label439;
            }
            if ((temp1539 == 1)) {
                this.Manager.Comment("reaching state \'S768\'");
                bool temp1531;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1531);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1531);
                this.Manager.Comment("reaching state \'S1257\'");
                int temp1534 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker3)));
                if ((temp1534 == 0)) {
                    this.Manager.Comment("reaching state \'S2188\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1532;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1532 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3166\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1532, "return of NetrLogonControl2, state S3166");
                    this.Manager.Comment("reaching state \'S3694\'");
                    goto label437;
                }
                if ((temp1534 == 1)) {
                    this.Manager.Comment("reaching state \'S2189\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1533;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1533 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3167\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1533, "return of NetrLogonControl2, state S3167");
                    this.Manager.Comment("reaching state \'S3695\'");
                    goto label437;
                }
                throw new InvalidOperationException("never reached");
            label437:
;
                goto label439;
            }
            if ((temp1539 == 2)) {
                this.Manager.Comment("reaching state \'S769\'");
                bool temp1535;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1535);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1535);
                this.Manager.Comment("reaching state \'S1258\'");
                int temp1538 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker5)));
                if ((temp1538 == 0)) {
                    this.Manager.Comment("reaching state \'S2190\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1536;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1536 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3168\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1536, "return of NetrLogonControl2, state S3168");
                    this.Manager.Comment("reaching state \'S3696\'");
                    goto label438;
                }
                if ((temp1538 == 1)) {
                    this.Manager.Comment("reaching state \'S2191\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1537;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1537 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3169\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1537, "return of NetrLogonControl2, state S3169");
                    this.Manager.Comment("reaching state \'S3697\'");
                    goto label438;
                }
                throw new InvalidOperationException("never reached");
            label438:
;
                goto label439;
            }
            throw new InvalidOperationException("never reached");
        label439:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S295");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1256");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1256");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S295");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1257");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1257");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S295");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1258");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS294GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1258");
        }
        #endregion
        
        #region Test Starting in S296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296");
            this.Manager.Comment("reaching state \'S296\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1540;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1540);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1540);
            this.Manager.Comment("reaching state \'S297\'");
            int temp1553 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetPlatformChecker2)));
            if ((temp1553 == 0)) {
                this.Manager.Comment("reaching state \'S770\'");
                bool temp1541;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1541);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1541);
                this.Manager.Comment("reaching state \'S1259\'");
                int temp1544 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker1)));
                if ((temp1544 == 0)) {
                    this.Manager.Comment("reaching state \'S2192\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1542;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,4,Valid)\'");
                    temp1542 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3170\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1542, "return of NetrLogonControl2, state S3170");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label440;
                }
                if ((temp1544 == 1)) {
                    this.Manager.Comment("reaching state \'S2193\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1543;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,4,Valid)\'");
                    temp1543 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104100");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3171\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1543, "return of NetrLogonControl2, state S3171");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label440;
                }
                throw new InvalidOperationException("never reached");
            label440:
;
                goto label443;
            }
            if ((temp1553 == 1)) {
                this.Manager.Comment("reaching state \'S771\'");
                bool temp1545;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1545);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1545);
                this.Manager.Comment("reaching state \'S1260\'");
                int temp1548 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker3)));
                if ((temp1548 == 0)) {
                    this.Manager.Comment("reaching state \'S2194\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1546;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1546 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3172\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1546, "return of NetrLogonControl2, state S3172");
                    this.Manager.Comment("reaching state \'S3698\'");
                    goto label441;
                }
                if ((temp1548 == 1)) {
                    this.Manager.Comment("reaching state \'S2195\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1547;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1547 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3173\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1547, "return of NetrLogonControl2, state S3173");
                    this.Manager.Comment("reaching state \'S3699\'");
                    goto label441;
                }
                throw new InvalidOperationException("never reached");
            label441:
;
                goto label443;
            }
            if ((temp1553 == 2)) {
                this.Manager.Comment("reaching state \'S772\'");
                bool temp1549;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1549);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1549);
                this.Manager.Comment("reaching state \'S1261\'");
                int temp1552 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker5)));
                if ((temp1552 == 0)) {
                    this.Manager.Comment("reaching state \'S2196\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1550;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1550 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3174\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1550, "return of NetrLogonControl2, state S3174");
                    this.Manager.Comment("reaching state \'S3700\'");
                    goto label442;
                }
                if ((temp1552 == 1)) {
                    this.Manager.Comment("reaching state \'S2197\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1551;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1551 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3175\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1551, "return of NetrLogonControl2, state S3175");
                    this.Manager.Comment("reaching state \'S3701\'");
                    goto label442;
                }
                throw new InvalidOperationException("never reached");
            label442:
;
                goto label443;
            }
            throw new InvalidOperationException("never reached");
        label443:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S297");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1259");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1259");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S297");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1260");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1260");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S297");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1261");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS296GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1261");
        }
        #endregion
        
        #region Test Starting in S298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298");
            this.Manager.Comment("reaching state \'S298\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1554;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1554);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1554);
            this.Manager.Comment("reaching state \'S299\'");
            int temp1567 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetPlatformChecker2)));
            if ((temp1567 == 0)) {
                this.Manager.Comment("reaching state \'S773\'");
                bool temp1555;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1555);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1555);
                this.Manager.Comment("reaching state \'S1262\'");
                int temp1558 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker1)));
                if ((temp1558 == 0)) {
                    this.Manager.Comment("reaching state \'S2198\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1556;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,4,Valid)\'");
                    temp1556 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3176\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1556, "return of NetrLogonControl2, state S3176");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label444;
                }
                if ((temp1558 == 1)) {
                    this.Manager.Comment("reaching state \'S2199\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1557;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,4,Valid)\'");
                    temp1557 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3177\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1557, "return of NetrLogonControl2, state S3177");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label444;
                }
                throw new InvalidOperationException("never reached");
            label444:
;
                goto label447;
            }
            if ((temp1567 == 1)) {
                this.Manager.Comment("reaching state \'S774\'");
                bool temp1559;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1559);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1559);
                this.Manager.Comment("reaching state \'S1263\'");
                int temp1562 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker3)));
                if ((temp1562 == 0)) {
                    this.Manager.Comment("reaching state \'S2200\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1560;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1560 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3178\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1560, "return of NetrLogonControl2, state S3178");
                    this.Manager.Comment("reaching state \'S3702\'");
                    goto label445;
                }
                if ((temp1562 == 1)) {
                    this.Manager.Comment("reaching state \'S2201\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1561;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1561 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3179\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1561, "return of NetrLogonControl2, state S3179");
                    this.Manager.Comment("reaching state \'S3703\'");
                    goto label445;
                }
                throw new InvalidOperationException("never reached");
            label445:
;
                goto label447;
            }
            if ((temp1567 == 2)) {
                this.Manager.Comment("reaching state \'S775\'");
                bool temp1563;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1563);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1563);
                this.Manager.Comment("reaching state \'S1264\'");
                int temp1566 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker5)));
                if ((temp1566 == 0)) {
                    this.Manager.Comment("reaching state \'S2202\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1564;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1564 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3180\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1564, "return of NetrLogonControl2, state S3180");
                    this.Manager.Comment("reaching state \'S3704\'");
                    goto label446;
                }
                if ((temp1566 == 1)) {
                    this.Manager.Comment("reaching state \'S2203\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1565;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1565 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3181\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1565, "return of NetrLogonControl2, state S3181");
                    this.Manager.Comment("reaching state \'S3705\'");
                    goto label446;
                }
                throw new InvalidOperationException("never reached");
            label446:
;
                goto label447;
            }
            throw new InvalidOperationException("never reached");
        label447:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S299");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1262");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1262");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S299");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1263");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1263");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S299");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1264");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS298GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1264");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1568;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1568);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1568);
            this.Manager.Comment("reaching state \'S31\'");
            int temp1581 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetPlatformChecker2)));
            if ((temp1581 == 0)) {
                this.Manager.Comment("reaching state \'S371\'");
                bool temp1569;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1569);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1569);
                this.Manager.Comment("reaching state \'S860\'");
                int temp1572 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker1)));
                if ((temp1572 == 0)) {
                    this.Manager.Comment("reaching state \'S1394\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1570;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,2,Valid)\'");
                    temp1570 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2372\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1570, "return of NetrLogonControl2, state S2372");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label448;
                }
                if ((temp1572 == 1)) {
                    this.Manager.Comment("reaching state \'S1395\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1571;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,2,Valid)\'");
                    temp1571 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2373\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1571, "return of NetrLogonControl2, state S2373");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label448;
                }
                throw new InvalidOperationException("never reached");
            label448:
;
                goto label451;
            }
            if ((temp1581 == 1)) {
                this.Manager.Comment("reaching state \'S372\'");
                bool temp1573;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1573);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1573);
                this.Manager.Comment("reaching state \'S861\'");
                int temp1576 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker3)));
                if ((temp1576 == 0)) {
                    this.Manager.Comment("reaching state \'S1396\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1574;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,2,Valid)\'");
                    temp1574 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2374\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1574, "return of NetrLogonControl2, state S2374");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label449;
                }
                if ((temp1576 == 1)) {
                    this.Manager.Comment("reaching state \'S1397\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1575;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,NoValidDomainNameContained)\'" +
                            "");
                    temp1575 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2375\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1575, "return of NetrLogonControl2, state S2375");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label449;
                }
                throw new InvalidOperationException("never reached");
            label449:
;
                goto label451;
            }
            if ((temp1581 == 2)) {
                this.Manager.Comment("reaching state \'S373\'");
                bool temp1577;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1577);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1577);
                this.Manager.Comment("reaching state \'S862\'");
                int temp1580 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker5)));
                if ((temp1580 == 0)) {
                    this.Manager.Comment("reaching state \'S1398\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1578;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1578 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2376\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1578, "return of NetrLogonControl2, state S2376");
                    this.Manager.Comment("reaching state \'S3298\'");
                    goto label450;
                }
                if ((temp1580 == 1)) {
                    this.Manager.Comment("reaching state \'S1399\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1579;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1579 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2377\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1579, "return of NetrLogonControl2, state S2377");
                    this.Manager.Comment("reaching state \'S3299\'");
                    goto label450;
                }
                throw new InvalidOperationException("never reached");
            label450:
;
                goto label451;
            }
            throw new InvalidOperationException("never reached");
        label451:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S860");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S860");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S861");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S861");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S31");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S862");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS30GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S862");
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300");
            this.Manager.Comment("reaching state \'S300\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1582;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1582);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1582);
            this.Manager.Comment("reaching state \'S301\'");
            int temp1595 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetPlatformChecker2)));
            if ((temp1595 == 0)) {
                this.Manager.Comment("reaching state \'S776\'");
                bool temp1583;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1583);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1583);
                this.Manager.Comment("reaching state \'S1265\'");
                int temp1586 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker1)));
                if ((temp1586 == 0)) {
                    this.Manager.Comment("reaching state \'S2204\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1584;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,4,Valid)\'");
                    temp1584 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3182\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1584, "return of NetrLogonControl2, state S3182");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label452;
                }
                if ((temp1586 == 1)) {
                    this.Manager.Comment("reaching state \'S2205\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1585;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,4,Valid)\'");
                    temp1585 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3183\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1585, "return of NetrLogonControl2, state S3183");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label452;
                }
                throw new InvalidOperationException("never reached");
            label452:
;
                goto label455;
            }
            if ((temp1595 == 1)) {
                this.Manager.Comment("reaching state \'S777\'");
                bool temp1587;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1587);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1587);
                this.Manager.Comment("reaching state \'S1266\'");
                int temp1590 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker3)));
                if ((temp1590 == 0)) {
                    this.Manager.Comment("reaching state \'S2206\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1588;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1588 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3184\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1588, "return of NetrLogonControl2, state S3184");
                    this.Manager.Comment("reaching state \'S3706\'");
                    goto label453;
                }
                if ((temp1590 == 1)) {
                    this.Manager.Comment("reaching state \'S2207\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1589;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1589 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3185\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1589, "return of NetrLogonControl2, state S3185");
                    this.Manager.Comment("reaching state \'S3707\'");
                    goto label453;
                }
                throw new InvalidOperationException("never reached");
            label453:
;
                goto label455;
            }
            if ((temp1595 == 2)) {
                this.Manager.Comment("reaching state \'S778\'");
                bool temp1591;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1591);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1591);
                this.Manager.Comment("reaching state \'S1267\'");
                int temp1594 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker5)));
                if ((temp1594 == 0)) {
                    this.Manager.Comment("reaching state \'S2208\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1592;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1592 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3186\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1592, "return of NetrLogonControl2, state S3186");
                    this.Manager.Comment("reaching state \'S3708\'");
                    goto label454;
                }
                if ((temp1594 == 1)) {
                    this.Manager.Comment("reaching state \'S2209\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1593;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1593 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3187\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1593, "return of NetrLogonControl2, state S3187");
                    this.Manager.Comment("reaching state \'S3709\'");
                    goto label454;
                }
                throw new InvalidOperationException("never reached");
            label454:
;
                goto label455;
            }
            throw new InvalidOperationException("never reached");
        label455:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S301");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1265");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1265");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S301");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1266");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1266");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S301");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1267");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS300GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1267");
        }
        #endregion
        
        #region Test Starting in S302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302");
            this.Manager.Comment("reaching state \'S302\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1596;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1596);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1596);
            this.Manager.Comment("reaching state \'S303\'");
            int temp1609 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetPlatformChecker2)));
            if ((temp1609 == 0)) {
                this.Manager.Comment("reaching state \'S779\'");
                bool temp1597;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1597);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1597);
                this.Manager.Comment("reaching state \'S1268\'");
                int temp1600 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker1)));
                if ((temp1600 == 0)) {
                    this.Manager.Comment("reaching state \'S2210\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1598;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,4,Valid)\'");
                    temp1598 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3188\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1598, "return of NetrLogonControl2, state S3188");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label456;
                }
                if ((temp1600 == 1)) {
                    this.Manager.Comment("reaching state \'S2211\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1599;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,4,Valid)\'");
                    temp1599 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104913");
                    this.Manager.Checkpoint("MS-NRPC_R103910");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3189\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1599, "return of NetrLogonControl2, state S3189");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label456;
                }
                throw new InvalidOperationException("never reached");
            label456:
;
                goto label459;
            }
            if ((temp1609 == 1)) {
                this.Manager.Comment("reaching state \'S780\'");
                bool temp1601;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1601);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1601);
                this.Manager.Comment("reaching state \'S1269\'");
                int temp1604 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker3)));
                if ((temp1604 == 0)) {
                    this.Manager.Comment("reaching state \'S2212\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1602;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1602 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3190\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1602, "return of NetrLogonControl2, state S3190");
                    this.Manager.Comment("reaching state \'S3710\'");
                    goto label457;
                }
                if ((temp1604 == 1)) {
                    this.Manager.Comment("reaching state \'S2213\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1603;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1603 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3191\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1603, "return of NetrLogonControl2, state S3191");
                    this.Manager.Comment("reaching state \'S3711\'");
                    goto label457;
                }
                throw new InvalidOperationException("never reached");
            label457:
;
                goto label459;
            }
            if ((temp1609 == 2)) {
                this.Manager.Comment("reaching state \'S781\'");
                bool temp1605;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1605);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1605);
                this.Manager.Comment("reaching state \'S1270\'");
                int temp1608 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker5)));
                if ((temp1608 == 0)) {
                    this.Manager.Comment("reaching state \'S2214\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1606;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1606 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3192\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1606, "return of NetrLogonControl2, state S3192");
                    this.Manager.Comment("reaching state \'S3712\'");
                    goto label458;
                }
                if ((temp1608 == 1)) {
                    this.Manager.Comment("reaching state \'S2215\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1607;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1607 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3193\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1607, "return of NetrLogonControl2, state S3193");
                    this.Manager.Comment("reaching state \'S3713\'");
                    goto label458;
                }
                throw new InvalidOperationException("never reached");
            label458:
;
                goto label459;
            }
            throw new InvalidOperationException("never reached");
        label459:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S303");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1268");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1268");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S303");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1269");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1269");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S303");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1270");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS302GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1270");
        }
        #endregion
        
        #region Test Starting in S304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304");
            this.Manager.Comment("reaching state \'S304\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1610;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1610);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1610);
            this.Manager.Comment("reaching state \'S305\'");
            int temp1623 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetPlatformChecker2)));
            if ((temp1623 == 0)) {
                this.Manager.Comment("reaching state \'S782\'");
                bool temp1611;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1611);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1611);
                this.Manager.Comment("reaching state \'S1271\'");
                int temp1614 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker1)));
                if ((temp1614 == 0)) {
                    this.Manager.Comment("reaching state \'S2216\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1612;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,4,Valid)\'");
                    temp1612 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3194\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1612, "return of NetrLogonControl2, state S3194");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label460;
                }
                if ((temp1614 == 1)) {
                    this.Manager.Comment("reaching state \'S2217\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1613;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,4,Valid)\'");
                    temp1613 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3195\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1613, "return of NetrLogonControl2, state S3195");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label460;
                }
                throw new InvalidOperationException("never reached");
            label460:
;
                goto label463;
            }
            if ((temp1623 == 1)) {
                this.Manager.Comment("reaching state \'S783\'");
                bool temp1615;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1615);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1615);
                this.Manager.Comment("reaching state \'S1272\'");
                int temp1618 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker3)));
                if ((temp1618 == 0)) {
                    this.Manager.Comment("reaching state \'S2218\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1616;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1616 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3196\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1616, "return of NetrLogonControl2, state S3196");
                    this.Manager.Comment("reaching state \'S3714\'");
                    goto label461;
                }
                if ((temp1618 == 1)) {
                    this.Manager.Comment("reaching state \'S2219\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1617;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1617 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3197\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1617, "return of NetrLogonControl2, state S3197");
                    this.Manager.Comment("reaching state \'S3715\'");
                    goto label461;
                }
                throw new InvalidOperationException("never reached");
            label461:
;
                goto label463;
            }
            if ((temp1623 == 2)) {
                this.Manager.Comment("reaching state \'S784\'");
                bool temp1619;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1619);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1619);
                this.Manager.Comment("reaching state \'S1273\'");
                int temp1622 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker5)));
                if ((temp1622 == 0)) {
                    this.Manager.Comment("reaching state \'S2220\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1620;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1620 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3198\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1620, "return of NetrLogonControl2, state S3198");
                    this.Manager.Comment("reaching state \'S3716\'");
                    goto label462;
                }
                if ((temp1622 == 1)) {
                    this.Manager.Comment("reaching state \'S2221\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1621;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1621 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3199\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1621, "return of NetrLogonControl2, state S3199");
                    this.Manager.Comment("reaching state \'S3717\'");
                    goto label462;
                }
                throw new InvalidOperationException("never reached");
            label462:
;
                goto label463;
            }
            throw new InvalidOperationException("never reached");
        label463:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S305");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1271");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1271");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S305");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1272");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1272");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S305");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1273");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS304GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1273");
        }
        #endregion
        
        #region Test Starting in S306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306");
            this.Manager.Comment("reaching state \'S306\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1624;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1624);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1624);
            this.Manager.Comment("reaching state \'S307\'");
            int temp1637 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetPlatformChecker2)));
            if ((temp1637 == 0)) {
                this.Manager.Comment("reaching state \'S785\'");
                bool temp1625;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1625);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1625);
                this.Manager.Comment("reaching state \'S1274\'");
                int temp1628 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker1)));
                if ((temp1628 == 0)) {
                    this.Manager.Comment("reaching state \'S2222\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1626;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,1,Valid)\'");
                    temp1626 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3200\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1626, "return of NetrLogonControl2, state S3200");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label464;
                }
                if ((temp1628 == 1)) {
                    this.Manager.Comment("reaching state \'S2223\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1627;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,4,Valid)\'");
                    temp1627 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3201\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1627, "return of NetrLogonControl2, state S3201");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label464;
                }
                throw new InvalidOperationException("never reached");
            label464:
;
                goto label467;
            }
            if ((temp1637 == 1)) {
                this.Manager.Comment("reaching state \'S786\'");
                bool temp1629;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1629);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1629);
                this.Manager.Comment("reaching state \'S1275\'");
                int temp1632 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker3)));
                if ((temp1632 == 0)) {
                    this.Manager.Comment("reaching state \'S2224\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1630;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1630 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3202\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1630, "return of NetrLogonControl2, state S3202");
                    this.Manager.Comment("reaching state \'S3718\'");
                    goto label465;
                }
                if ((temp1632 == 1)) {
                    this.Manager.Comment("reaching state \'S2225\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1631;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1631 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3203\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1631, "return of NetrLogonControl2, state S3203");
                    this.Manager.Comment("reaching state \'S3719\'");
                    goto label465;
                }
                throw new InvalidOperationException("never reached");
            label465:
;
                goto label467;
            }
            if ((temp1637 == 2)) {
                this.Manager.Comment("reaching state \'S787\'");
                bool temp1633;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1633);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1633);
                this.Manager.Comment("reaching state \'S1276\'");
                int temp1636 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker5)));
                if ((temp1636 == 0)) {
                    this.Manager.Comment("reaching state \'S2226\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1634;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1634 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3204\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1634, "return of NetrLogonControl2, state S3204");
                    this.Manager.Comment("reaching state \'S3720\'");
                    goto label466;
                }
                if ((temp1636 == 1)) {
                    this.Manager.Comment("reaching state \'S2227\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1635;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1635 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3205\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1635, "return of NetrLogonControl2, state S3205");
                    this.Manager.Comment("reaching state \'S3721\'");
                    goto label466;
                }
                throw new InvalidOperationException("never reached");
            label466:
;
                goto label467;
            }
            throw new InvalidOperationException("never reached");
        label467:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S307");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1274");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1274");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S307");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1275");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1275");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S307");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1276");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS306GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1276");
        }
        #endregion
        
        #region Test Starting in S308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308");
            this.Manager.Comment("reaching state \'S308\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1638;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1638);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1638);
            this.Manager.Comment("reaching state \'S309\'");
            int temp1651 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetPlatformChecker2)));
            if ((temp1651 == 0)) {
                this.Manager.Comment("reaching state \'S788\'");
                bool temp1639;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1639);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1639);
                this.Manager.Comment("reaching state \'S1277\'");
                int temp1642 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker1)));
                if ((temp1642 == 0)) {
                    this.Manager.Comment("reaching state \'S2228\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1640;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,1,Valid)\'");
                    temp1640 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3206\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1640, "return of NetrLogonControl2, state S3206");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label468;
                }
                if ((temp1642 == 1)) {
                    this.Manager.Comment("reaching state \'S2229\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1641;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,4,Valid)\'");
                    temp1641 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104915");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3207\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1641, "return of NetrLogonControl2, state S3207");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label468;
                }
                throw new InvalidOperationException("never reached");
            label468:
;
                goto label471;
            }
            if ((temp1651 == 1)) {
                this.Manager.Comment("reaching state \'S789\'");
                bool temp1643;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1643);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1643);
                this.Manager.Comment("reaching state \'S1278\'");
                int temp1646 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker3)));
                if ((temp1646 == 0)) {
                    this.Manager.Comment("reaching state \'S2230\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1644;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1644 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3208\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1644, "return of NetrLogonControl2, state S3208");
                    this.Manager.Comment("reaching state \'S3722\'");
                    goto label469;
                }
                if ((temp1646 == 1)) {
                    this.Manager.Comment("reaching state \'S2231\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1645;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1645 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3209\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1645, "return of NetrLogonControl2, state S3209");
                    this.Manager.Comment("reaching state \'S3723\'");
                    goto label469;
                }
                throw new InvalidOperationException("never reached");
            label469:
;
                goto label471;
            }
            if ((temp1651 == 2)) {
                this.Manager.Comment("reaching state \'S790\'");
                bool temp1647;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1647);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1647);
                this.Manager.Comment("reaching state \'S1279\'");
                int temp1650 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker5)));
                if ((temp1650 == 0)) {
                    this.Manager.Comment("reaching state \'S2232\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1648;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1648 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3210\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1648, "return of NetrLogonControl2, state S3210");
                    this.Manager.Comment("reaching state \'S3724\'");
                    goto label470;
                }
                if ((temp1650 == 1)) {
                    this.Manager.Comment("reaching state \'S2233\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1649;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1649 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3211\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1649, "return of NetrLogonControl2, state S3211");
                    this.Manager.Comment("reaching state \'S3725\'");
                    goto label470;
                }
                throw new InvalidOperationException("never reached");
            label470:
;
                goto label471;
            }
            throw new InvalidOperationException("never reached");
        label471:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S309");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1277");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1277");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S309");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1278");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1278");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S309");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1279");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS308GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1279");
        }
        #endregion
        
        #region Test Starting in S310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310");
            this.Manager.Comment("reaching state \'S310\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1652;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1652);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1652);
            this.Manager.Comment("reaching state \'S311\'");
            int temp1665 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetPlatformChecker2)));
            if ((temp1665 == 0)) {
                this.Manager.Comment("reaching state \'S791\'");
                bool temp1653;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1653);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1653);
                this.Manager.Comment("reaching state \'S1280\'");
                int temp1656 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker1)));
                if ((temp1656 == 0)) {
                    this.Manager.Comment("reaching state \'S2234\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1654;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,1,Valid)\'");
                    temp1654 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3212\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1654, "return of NetrLogonControl2, state S3212");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label472;
                }
                if ((temp1656 == 1)) {
                    this.Manager.Comment("reaching state \'S2235\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1655;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,4,Valid)\'");
                    temp1655 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104912");
                    this.Manager.Checkpoint("MS-NRPC_R103904");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3213\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1655, "return of NetrLogonControl2, state S3213");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label472;
                }
                throw new InvalidOperationException("never reached");
            label472:
;
                goto label475;
            }
            if ((temp1665 == 1)) {
                this.Manager.Comment("reaching state \'S792\'");
                bool temp1657;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1657);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1657);
                this.Manager.Comment("reaching state \'S1281\'");
                int temp1660 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker3)));
                if ((temp1660 == 0)) {
                    this.Manager.Comment("reaching state \'S2236\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1658;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1658 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3214\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1658, "return of NetrLogonControl2, state S3214");
                    this.Manager.Comment("reaching state \'S3726\'");
                    goto label473;
                }
                if ((temp1660 == 1)) {
                    this.Manager.Comment("reaching state \'S2237\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1659;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1659 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3215\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1659, "return of NetrLogonControl2, state S3215");
                    this.Manager.Comment("reaching state \'S3727\'");
                    goto label473;
                }
                throw new InvalidOperationException("never reached");
            label473:
;
                goto label475;
            }
            if ((temp1665 == 2)) {
                this.Manager.Comment("reaching state \'S793\'");
                bool temp1661;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1661);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1661);
                this.Manager.Comment("reaching state \'S1282\'");
                int temp1664 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker5)));
                if ((temp1664 == 0)) {
                    this.Manager.Comment("reaching state \'S2238\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1662;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1662 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3216\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1662, "return of NetrLogonControl2, state S3216");
                    this.Manager.Comment("reaching state \'S3728\'");
                    goto label474;
                }
                if ((temp1664 == 1)) {
                    this.Manager.Comment("reaching state \'S2239\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1663;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1663 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3217\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1663, "return of NetrLogonControl2, state S3217");
                    this.Manager.Comment("reaching state \'S3729\'");
                    goto label474;
                }
                throw new InvalidOperationException("never reached");
            label474:
;
                goto label475;
            }
            throw new InvalidOperationException("never reached");
        label475:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S311");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1280");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1280");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S311");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1281");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1281");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S311");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1282");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS310GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1282");
        }
        #endregion
        
        #region Test Starting in S312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312");
            this.Manager.Comment("reaching state \'S312\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1666;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1666);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1666);
            this.Manager.Comment("reaching state \'S313\'");
            int temp1679 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetPlatformChecker2)));
            if ((temp1679 == 0)) {
                this.Manager.Comment("reaching state \'S794\'");
                bool temp1667;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1667);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1667);
                this.Manager.Comment("reaching state \'S1283\'");
                int temp1670 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker1)));
                if ((temp1670 == 0)) {
                    this.Manager.Comment("reaching state \'S2240\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1668;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,1,Valid)\'");
                    temp1668 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3218\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1668, "return of NetrLogonControl2, state S3218");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label476;
                }
                if ((temp1670 == 1)) {
                    this.Manager.Comment("reaching state \'S2241\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1669;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,4,Valid)\'");
                    temp1669 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3219\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1669, "return of NetrLogonControl2, state S3219");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label476;
                }
                throw new InvalidOperationException("never reached");
            label476:
;
                goto label479;
            }
            if ((temp1679 == 1)) {
                this.Manager.Comment("reaching state \'S795\'");
                bool temp1671;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1671);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1671);
                this.Manager.Comment("reaching state \'S1284\'");
                int temp1674 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker3)));
                if ((temp1674 == 0)) {
                    this.Manager.Comment("reaching state \'S2242\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1672;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1672 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3220\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1672, "return of NetrLogonControl2, state S3220");
                    this.Manager.Comment("reaching state \'S3730\'");
                    goto label477;
                }
                if ((temp1674 == 1)) {
                    this.Manager.Comment("reaching state \'S2243\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1673;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1673 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3221\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1673, "return of NetrLogonControl2, state S3221");
                    this.Manager.Comment("reaching state \'S3731\'");
                    goto label477;
                }
                throw new InvalidOperationException("never reached");
            label477:
;
                goto label479;
            }
            if ((temp1679 == 2)) {
                this.Manager.Comment("reaching state \'S796\'");
                bool temp1675;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1675);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1675);
                this.Manager.Comment("reaching state \'S1285\'");
                int temp1678 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker5)));
                if ((temp1678 == 0)) {
                    this.Manager.Comment("reaching state \'S2244\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1676;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1676 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3222\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1676, "return of NetrLogonControl2, state S3222");
                    this.Manager.Comment("reaching state \'S3732\'");
                    goto label478;
                }
                if ((temp1678 == 1)) {
                    this.Manager.Comment("reaching state \'S2245\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1677;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1677 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3223\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1677, "return of NetrLogonControl2, state S3223");
                    this.Manager.Comment("reaching state \'S3733\'");
                    goto label478;
                }
                throw new InvalidOperationException("never reached");
            label478:
;
                goto label479;
            }
            throw new InvalidOperationException("never reached");
        label479:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S313");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1283");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1283");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S313");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1284");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1284");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S313");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1285");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS312GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1285");
        }
        #endregion
        
        #region Test Starting in S314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314");
            this.Manager.Comment("reaching state \'S314\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1680;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1680);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1680);
            this.Manager.Comment("reaching state \'S315\'");
            int temp1693 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetPlatformChecker2)));
            if ((temp1693 == 0)) {
                this.Manager.Comment("reaching state \'S797\'");
                bool temp1681;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1681);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1681);
                this.Manager.Comment("reaching state \'S1286\'");
                int temp1684 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker1)));
                if ((temp1684 == 0)) {
                    this.Manager.Comment("reaching state \'S2246\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1682;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,1,Valid)\'");
                    temp1682 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3224\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1682, "return of NetrLogonControl2, state S3224");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label480;
                }
                if ((temp1684 == 1)) {
                    this.Manager.Comment("reaching state \'S2247\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1683;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,4,Valid)\'");
                    temp1683 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3225\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1683, "return of NetrLogonControl2, state S3225");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label480;
                }
                throw new InvalidOperationException("never reached");
            label480:
;
                goto label483;
            }
            if ((temp1693 == 1)) {
                this.Manager.Comment("reaching state \'S798\'");
                bool temp1685;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1685);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1685);
                this.Manager.Comment("reaching state \'S1287\'");
                int temp1688 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker3)));
                if ((temp1688 == 0)) {
                    this.Manager.Comment("reaching state \'S2248\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1686;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1686 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3226\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1686, "return of NetrLogonControl2, state S3226");
                    this.Manager.Comment("reaching state \'S3734\'");
                    goto label481;
                }
                if ((temp1688 == 1)) {
                    this.Manager.Comment("reaching state \'S2249\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1687;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1687 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3227\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1687, "return of NetrLogonControl2, state S3227");
                    this.Manager.Comment("reaching state \'S3735\'");
                    goto label481;
                }
                throw new InvalidOperationException("never reached");
            label481:
;
                goto label483;
            }
            if ((temp1693 == 2)) {
                this.Manager.Comment("reaching state \'S799\'");
                bool temp1689;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1689);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1689);
                this.Manager.Comment("reaching state \'S1288\'");
                int temp1692 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker5)));
                if ((temp1692 == 0)) {
                    this.Manager.Comment("reaching state \'S2250\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1690;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1690 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3228\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1690, "return of NetrLogonControl2, state S3228");
                    this.Manager.Comment("reaching state \'S3736\'");
                    goto label482;
                }
                if ((temp1692 == 1)) {
                    this.Manager.Comment("reaching state \'S2251\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1691;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1691 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3229\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1691, "return of NetrLogonControl2, state S3229");
                    this.Manager.Comment("reaching state \'S3737\'");
                    goto label482;
                }
                throw new InvalidOperationException("never reached");
            label482:
;
                goto label483;
            }
            throw new InvalidOperationException("never reached");
        label483:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S315");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1286");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1286");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S315");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1287");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1287");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S315");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1288");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS314GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1288");
        }
        #endregion
        
        #region Test Starting in S316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316");
            this.Manager.Comment("reaching state \'S316\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1694;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1694);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1694);
            this.Manager.Comment("reaching state \'S317\'");
            int temp1707 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetPlatformChecker2)));
            if ((temp1707 == 0)) {
                this.Manager.Comment("reaching state \'S800\'");
                bool temp1695;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1695);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1695);
                this.Manager.Comment("reaching state \'S1289\'");
                int temp1698 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker1)));
                if ((temp1698 == 0)) {
                    this.Manager.Comment("reaching state \'S2252\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1696;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,1,Valid)\'");
                    temp1696 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3230\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1696, "return of NetrLogonControl2, state S3230");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label484;
                }
                if ((temp1698 == 1)) {
                    this.Manager.Comment("reaching state \'S2253\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1697;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,Valid)\'");
                    temp1697 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3231\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1697, "return of NetrLogonControl2, state S3231");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label484;
                }
                throw new InvalidOperationException("never reached");
            label484:
;
                goto label487;
            }
            if ((temp1707 == 1)) {
                this.Manager.Comment("reaching state \'S801\'");
                bool temp1699;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1699);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1699);
                this.Manager.Comment("reaching state \'S1290\'");
                int temp1702 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker3)));
                if ((temp1702 == 0)) {
                    this.Manager.Comment("reaching state \'S2254\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1700;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1700 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3232\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1700, "return of NetrLogonControl2, state S3232");
                    this.Manager.Comment("reaching state \'S3738\'");
                    goto label485;
                }
                if ((temp1702 == 1)) {
                    this.Manager.Comment("reaching state \'S2255\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1701;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1701 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3233\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1701, "return of NetrLogonControl2, state S3233");
                    this.Manager.Comment("reaching state \'S3739\'");
                    goto label485;
                }
                throw new InvalidOperationException("never reached");
            label485:
;
                goto label487;
            }
            if ((temp1707 == 2)) {
                this.Manager.Comment("reaching state \'S802\'");
                bool temp1703;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1703);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1703);
                this.Manager.Comment("reaching state \'S1291\'");
                int temp1706 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker5)));
                if ((temp1706 == 0)) {
                    this.Manager.Comment("reaching state \'S2256\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1704;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1704 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3234\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1704, "return of NetrLogonControl2, state S3234");
                    this.Manager.Comment("reaching state \'S3740\'");
                    goto label486;
                }
                if ((temp1706 == 1)) {
                    this.Manager.Comment("reaching state \'S2257\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1705;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1705 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3235\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1705, "return of NetrLogonControl2, state S3235");
                    this.Manager.Comment("reaching state \'S3741\'");
                    goto label486;
                }
                throw new InvalidOperationException("never reached");
            label486:
;
                goto label487;
            }
            throw new InvalidOperationException("never reached");
        label487:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S317");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1289");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1289");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S317");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1290");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1290");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S317");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1291");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS316GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1291");
        }
        #endregion
        
        #region Test Starting in S318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318");
            this.Manager.Comment("reaching state \'S318\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1708;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1708);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1708);
            this.Manager.Comment("reaching state \'S319\'");
            int temp1721 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetPlatformChecker2)));
            if ((temp1721 == 0)) {
                this.Manager.Comment("reaching state \'S803\'");
                bool temp1709;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1709);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1709);
                this.Manager.Comment("reaching state \'S1292\'");
                int temp1712 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker1)));
                if ((temp1712 == 0)) {
                    this.Manager.Comment("reaching state \'S2258\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1710;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,Valid)\'");
                    temp1710 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3236\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1710, "return of NetrLogonControl2, state S3236");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label488;
                }
                if ((temp1712 == 1)) {
                    this.Manager.Comment("reaching state \'S2259\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1711;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,4,Valid)\'");
                    temp1711 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104914");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3237\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1711, "return of NetrLogonControl2, state S3237");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label488;
                }
                throw new InvalidOperationException("never reached");
            label488:
;
                goto label491;
            }
            if ((temp1721 == 1)) {
                this.Manager.Comment("reaching state \'S804\'");
                bool temp1713;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1713);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1713);
                this.Manager.Comment("reaching state \'S1293\'");
                int temp1716 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker3)));
                if ((temp1716 == 0)) {
                    this.Manager.Comment("reaching state \'S2260\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1714;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1714 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3238\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1714, "return of NetrLogonControl2, state S3238");
                    this.Manager.Comment("reaching state \'S3742\'");
                    goto label489;
                }
                if ((temp1716 == 1)) {
                    this.Manager.Comment("reaching state \'S2261\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1715;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1715 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3239\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1715, "return of NetrLogonControl2, state S3239");
                    this.Manager.Comment("reaching state \'S3743\'");
                    goto label489;
                }
                throw new InvalidOperationException("never reached");
            label489:
;
                goto label491;
            }
            if ((temp1721 == 2)) {
                this.Manager.Comment("reaching state \'S805\'");
                bool temp1717;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1717);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1717);
                this.Manager.Comment("reaching state \'S1294\'");
                int temp1720 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker5)));
                if ((temp1720 == 0)) {
                    this.Manager.Comment("reaching state \'S2262\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1718;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1718 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3240\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1718, "return of NetrLogonControl2, state S3240");
                    this.Manager.Comment("reaching state \'S3744\'");
                    goto label490;
                }
                if ((temp1720 == 1)) {
                    this.Manager.Comment("reaching state \'S2263\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1719;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1719 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3241\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1719, "return of NetrLogonControl2, state S3241");
                    this.Manager.Comment("reaching state \'S3745\'");
                    goto label490;
                }
                throw new InvalidOperationException("never reached");
            label490:
;
                goto label491;
            }
            throw new InvalidOperationException("never reached");
        label491:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S319");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1292");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1292");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S319");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1293");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1293");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S319");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1294");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS318GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1294");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1722;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1722);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1722);
            this.Manager.Comment("reaching state \'S33\'");
            int temp1735 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetPlatformChecker2)));
            if ((temp1735 == 0)) {
                this.Manager.Comment("reaching state \'S374\'");
                bool temp1723;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1723);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1723);
                this.Manager.Comment("reaching state \'S863\'");
                int temp1726 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker1)));
                if ((temp1726 == 0)) {
                    this.Manager.Comment("reaching state \'S1400\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1724;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,1,Valid)\'");
                    temp1724 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2378\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1724, "return of NetrLogonControl2, state S2378");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label492;
                }
                if ((temp1726 == 1)) {
                    this.Manager.Comment("reaching state \'S1401\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1725;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,4,Valid)\'");
                    temp1725 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2379\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1725, "return of NetrLogonControl2, state S2379");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label492;
                }
                throw new InvalidOperationException("never reached");
            label492:
;
                goto label495;
            }
            if ((temp1735 == 1)) {
                this.Manager.Comment("reaching state \'S375\'");
                bool temp1727;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1727);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1727);
                this.Manager.Comment("reaching state \'S864\'");
                int temp1730 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker3)));
                if ((temp1730 == 0)) {
                    this.Manager.Comment("reaching state \'S1402\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1728;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,1,Valid)\'");
                    temp1728 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2380\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1728, "return of NetrLogonControl2, state S2380");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label493;
                }
                if ((temp1730 == 1)) {
                    this.Manager.Comment("reaching state \'S1403\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1729;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1729 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2381\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1729, "return of NetrLogonControl2, state S2381");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label493;
                }
                throw new InvalidOperationException("never reached");
            label493:
;
                goto label495;
            }
            if ((temp1735 == 2)) {
                this.Manager.Comment("reaching state \'S376\'");
                bool temp1731;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1731);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1731);
                this.Manager.Comment("reaching state \'S865\'");
                int temp1734 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker5)));
                if ((temp1734 == 0)) {
                    this.Manager.Comment("reaching state \'S1404\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1732;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1732 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2382\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1732, "return of NetrLogonControl2, state S2382");
                    this.Manager.Comment("reaching state \'S3300\'");
                    goto label494;
                }
                if ((temp1734 == 1)) {
                    this.Manager.Comment("reaching state \'S1405\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1733;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1733 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2383\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1733, "return of NetrLogonControl2, state S2383");
                    this.Manager.Comment("reaching state \'S3301\'");
                    goto label494;
                }
                throw new InvalidOperationException("never reached");
            label494:
;
                goto label495;
            }
            throw new InvalidOperationException("never reached");
        label495:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S863");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S863");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S864");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S864");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S33");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S865");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS32GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S865");
        }
        #endregion
        
        #region Test Starting in S320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320");
            this.Manager.Comment("reaching state \'S320\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1736;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1736);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1736);
            this.Manager.Comment("reaching state \'S321\'");
            int temp1749 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetPlatformChecker2)));
            if ((temp1749 == 0)) {
                this.Manager.Comment("reaching state \'S806\'");
                bool temp1737;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1737);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1737);
                this.Manager.Comment("reaching state \'S1295\'");
                int temp1740 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker1)));
                if ((temp1740 == 0)) {
                    this.Manager.Comment("reaching state \'S2264\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1738;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,Valid)\'");
                    temp1738 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3242\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1738, "return of NetrLogonControl2, state S3242");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label496;
                }
                if ((temp1740 == 1)) {
                    this.Manager.Comment("reaching state \'S2265\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1739;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,Valid)\'");
                    temp1739 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3243\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1739, "return of NetrLogonControl2, state S3243");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label496;
                }
                throw new InvalidOperationException("never reached");
            label496:
;
                goto label499;
            }
            if ((temp1749 == 1)) {
                this.Manager.Comment("reaching state \'S807\'");
                bool temp1741;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1741);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1741);
                this.Manager.Comment("reaching state \'S1296\'");
                int temp1744 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker3)));
                if ((temp1744 == 0)) {
                    this.Manager.Comment("reaching state \'S2266\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1742;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1742 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3244\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1742, "return of NetrLogonControl2, state S3244");
                    this.Manager.Comment("reaching state \'S3746\'");
                    goto label497;
                }
                if ((temp1744 == 1)) {
                    this.Manager.Comment("reaching state \'S2267\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1743;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1743 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3245\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1743, "return of NetrLogonControl2, state S3245");
                    this.Manager.Comment("reaching state \'S3747\'");
                    goto label497;
                }
                throw new InvalidOperationException("never reached");
            label497:
;
                goto label499;
            }
            if ((temp1749 == 2)) {
                this.Manager.Comment("reaching state \'S808\'");
                bool temp1745;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1745);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1745);
                this.Manager.Comment("reaching state \'S1297\'");
                int temp1748 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker5)));
                if ((temp1748 == 0)) {
                    this.Manager.Comment("reaching state \'S2268\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1746;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1746 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3246\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1746, "return of NetrLogonControl2, state S3246");
                    this.Manager.Comment("reaching state \'S3748\'");
                    goto label498;
                }
                if ((temp1748 == 1)) {
                    this.Manager.Comment("reaching state \'S2269\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1747;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1747 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3247\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1747, "return of NetrLogonControl2, state S3247");
                    this.Manager.Comment("reaching state \'S3749\'");
                    goto label498;
                }
                throw new InvalidOperationException("never reached");
            label498:
;
                goto label499;
            }
            throw new InvalidOperationException("never reached");
        label499:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S321");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1295");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1295");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S321");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1296");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1296");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S321");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1297");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS320GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1297");
        }
        #endregion
        
        #region Test Starting in S322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322");
            this.Manager.Comment("reaching state \'S322\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1750;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1750);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1750);
            this.Manager.Comment("reaching state \'S323\'");
            int temp1763 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetPlatformChecker2)));
            if ((temp1763 == 0)) {
                this.Manager.Comment("reaching state \'S809\'");
                bool temp1751;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1751);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1751);
                this.Manager.Comment("reaching state \'S1298\'");
                int temp1754 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker1)));
                if ((temp1754 == 0)) {
                    this.Manager.Comment("reaching state \'S2270\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1752;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,Valid)\'");
                    temp1752 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3248\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1752, "return of NetrLogonControl2, state S3248");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label500;
                }
                if ((temp1754 == 1)) {
                    this.Manager.Comment("reaching state \'S2271\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1753;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,Valid)\'");
                    temp1753 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3249\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1753, "return of NetrLogonControl2, state S3249");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label500;
                }
                throw new InvalidOperationException("never reached");
            label500:
;
                goto label503;
            }
            if ((temp1763 == 1)) {
                this.Manager.Comment("reaching state \'S810\'");
                bool temp1755;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1755);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1755);
                this.Manager.Comment("reaching state \'S1299\'");
                int temp1758 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker3)));
                if ((temp1758 == 0)) {
                    this.Manager.Comment("reaching state \'S2272\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1756;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1756 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3250\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1756, "return of NetrLogonControl2, state S3250");
                    this.Manager.Comment("reaching state \'S3750\'");
                    goto label501;
                }
                if ((temp1758 == 1)) {
                    this.Manager.Comment("reaching state \'S2273\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1757;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1757 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3251\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1757, "return of NetrLogonControl2, state S3251");
                    this.Manager.Comment("reaching state \'S3751\'");
                    goto label501;
                }
                throw new InvalidOperationException("never reached");
            label501:
;
                goto label503;
            }
            if ((temp1763 == 2)) {
                this.Manager.Comment("reaching state \'S811\'");
                bool temp1759;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1759);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1759);
                this.Manager.Comment("reaching state \'S1300\'");
                int temp1762 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker5)));
                if ((temp1762 == 0)) {
                    this.Manager.Comment("reaching state \'S2274\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1760;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1760 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3252\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1760, "return of NetrLogonControl2, state S3252");
                    this.Manager.Comment("reaching state \'S3752\'");
                    goto label502;
                }
                if ((temp1762 == 1)) {
                    this.Manager.Comment("reaching state \'S2275\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1761;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1761 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3253\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1761, "return of NetrLogonControl2, state S3253");
                    this.Manager.Comment("reaching state \'S3753\'");
                    goto label502;
                }
                throw new InvalidOperationException("never reached");
            label502:
;
                goto label503;
            }
            throw new InvalidOperationException("never reached");
        label503:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S323");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1298");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1298");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S323");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1299");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1299");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S323");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1300");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS322GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1300");
        }
        #endregion
        
        #region Test Starting in S324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324");
            this.Manager.Comment("reaching state \'S324\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1764;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1764);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1764);
            this.Manager.Comment("reaching state \'S325\'");
            int temp1777 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetPlatformChecker2)));
            if ((temp1777 == 0)) {
                this.Manager.Comment("reaching state \'S812\'");
                bool temp1765;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1765);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1765);
                this.Manager.Comment("reaching state \'S1301\'");
                int temp1768 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker1)));
                if ((temp1768 == 0)) {
                    this.Manager.Comment("reaching state \'S2276\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1766;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,0,Valid)\'");
                    temp1766 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 0u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S3254\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1766, "return of NetrLogonControl2, state S3254");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3432();
                    goto label504;
                }
                if ((temp1768 == 1)) {
                    this.Manager.Comment("reaching state \'S2277\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1767;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,0,Valid)\'");
                    temp1767 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 0u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104121");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S3255\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1767, "return of NetrLogonControl2, state S3255");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3433();
                    goto label504;
                }
                throw new InvalidOperationException("never reached");
            label504:
;
                goto label507;
            }
            if ((temp1777 == 1)) {
                this.Manager.Comment("reaching state \'S813\'");
                bool temp1769;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1769);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1769);
                this.Manager.Comment("reaching state \'S1302\'");
                int temp1772 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker3)));
                if ((temp1772 == 0)) {
                    this.Manager.Comment("reaching state \'S2278\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1770;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1770 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3256\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1770, "return of NetrLogonControl2, state S3256");
                    this.Manager.Comment("reaching state \'S3754\'");
                    goto label505;
                }
                if ((temp1772 == 1)) {
                    this.Manager.Comment("reaching state \'S2279\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1771;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1771 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3257\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1771, "return of NetrLogonControl2, state S3257");
                    this.Manager.Comment("reaching state \'S3755\'");
                    goto label505;
                }
                throw new InvalidOperationException("never reached");
            label505:
;
                goto label507;
            }
            if ((temp1777 == 2)) {
                this.Manager.Comment("reaching state \'S814\'");
                bool temp1773;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1773);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1773);
                this.Manager.Comment("reaching state \'S1303\'");
                int temp1776 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker5)));
                if ((temp1776 == 0)) {
                    this.Manager.Comment("reaching state \'S2280\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1774;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp1774 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S3258\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1774, "return of NetrLogonControl2, state S3258");
                    this.Manager.Comment("reaching state \'S3756\'");
                    goto label506;
                }
                if ((temp1776 == 1)) {
                    this.Manager.Comment("reaching state \'S2281\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1775;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1775 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S3259\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1775, "return of NetrLogonControl2, state S3259");
                    this.Manager.Comment("reaching state \'S3757\'");
                    goto label506;
                }
                throw new InvalidOperationException("never reached");
            label506:
;
                goto label507;
            }
            throw new InvalidOperationException("never reached");
        label507:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S325");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1301");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1301");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S325");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1302");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1302");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S325");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S1303");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS324GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S1303");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34");
            this.Manager.Comment("reaching state \'S34\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1778;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1778);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1778);
            this.Manager.Comment("reaching state \'S35\'");
            int temp1791 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetPlatformChecker2)));
            if ((temp1791 == 0)) {
                this.Manager.Comment("reaching state \'S377\'");
                bool temp1779;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1779);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1779);
                this.Manager.Comment("reaching state \'S866\'");
                int temp1782 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker1)));
                if ((temp1782 == 0)) {
                    this.Manager.Comment("reaching state \'S1406\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1780;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,3,Valid)\'");
                    temp1780 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2384\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1780, "return of NetrLogonControl2, state S2384");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label508;
                }
                if ((temp1782 == 1)) {
                    this.Manager.Comment("reaching state \'S1407\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1781;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,2,Valid)\'");
                    temp1781 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2385\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1781, "return of NetrLogonControl2, state S2385");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label508;
                }
                throw new InvalidOperationException("never reached");
            label508:
;
                goto label511;
            }
            if ((temp1791 == 1)) {
                this.Manager.Comment("reaching state \'S378\'");
                bool temp1783;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1783);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1783);
                this.Manager.Comment("reaching state \'S867\'");
                int temp1786 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker3)));
                if ((temp1786 == 0)) {
                    this.Manager.Comment("reaching state \'S1408\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1784;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,3,Valid)\'");
                    temp1784 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2386\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1784, "return of NetrLogonControl2, state S2386");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label509;
                }
                if ((temp1786 == 1)) {
                    this.Manager.Comment("reaching state \'S1409\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1785;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1785 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2387\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1785, "return of NetrLogonControl2, state S2387");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label509;
                }
                throw new InvalidOperationException("never reached");
            label509:
;
                goto label511;
            }
            if ((temp1791 == 2)) {
                this.Manager.Comment("reaching state \'S379\'");
                bool temp1787;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1787);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1787);
                this.Manager.Comment("reaching state \'S868\'");
                int temp1790 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker5)));
                if ((temp1790 == 0)) {
                    this.Manager.Comment("reaching state \'S1410\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1788;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1788 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2388\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1788, "return of NetrLogonControl2, state S2388");
                    this.Manager.Comment("reaching state \'S3302\'");
                    goto label510;
                }
                if ((temp1790 == 1)) {
                    this.Manager.Comment("reaching state \'S1411\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1789;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1789 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2389\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1789, "return of NetrLogonControl2, state S2389");
                    this.Manager.Comment("reaching state \'S3303\'");
                    goto label510;
                }
                throw new InvalidOperationException("never reached");
            label510:
;
                goto label511;
            }
            throw new InvalidOperationException("never reached");
        label511:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S866");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S866");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S867");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S867");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S35");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S868");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS34GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S868");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36");
            this.Manager.Comment("reaching state \'S36\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1792;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1792);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1792);
            this.Manager.Comment("reaching state \'S37\'");
            int temp1805 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetPlatformChecker2)));
            if ((temp1805 == 0)) {
                this.Manager.Comment("reaching state \'S380\'");
                bool temp1793;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1793);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1793);
                this.Manager.Comment("reaching state \'S869\'");
                int temp1796 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker1)));
                if ((temp1796 == 0)) {
                    this.Manager.Comment("reaching state \'S1412\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1794;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,4,Valid)\'");
                    temp1794 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2390\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1794, "return of NetrLogonControl2, state S2390");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label512;
                }
                if ((temp1796 == 1)) {
                    this.Manager.Comment("reaching state \'S1413\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1795;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,2,Valid)\'");
                    temp1795 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2391\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1795, "return of NetrLogonControl2, state S2391");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label512;
                }
                throw new InvalidOperationException("never reached");
            label512:
;
                goto label515;
            }
            if ((temp1805 == 1)) {
                this.Manager.Comment("reaching state \'S381\'");
                bool temp1797;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1797);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1797);
                this.Manager.Comment("reaching state \'S870\'");
                int temp1800 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker3)));
                if ((temp1800 == 0)) {
                    this.Manager.Comment("reaching state \'S1414\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1798;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,4,Valid)\'");
                    temp1798 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2392\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1798, "return of NetrLogonControl2, state S2392");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label513;
                }
                if ((temp1800 == 1)) {
                    this.Manager.Comment("reaching state \'S1415\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1799;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,NoValidDomainNameContained)\'" +
                            "");
                    temp1799 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2393\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1799, "return of NetrLogonControl2, state S2393");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label513;
                }
                throw new InvalidOperationException("never reached");
            label513:
;
                goto label515;
            }
            if ((temp1805 == 2)) {
                this.Manager.Comment("reaching state \'S382\'");
                bool temp1801;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1801);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1801);
                this.Manager.Comment("reaching state \'S871\'");
                int temp1804 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker5)));
                if ((temp1804 == 0)) {
                    this.Manager.Comment("reaching state \'S1416\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1802;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1802 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2394\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1802, "return of NetrLogonControl2, state S2394");
                    this.Manager.Comment("reaching state \'S3304\'");
                    goto label514;
                }
                if ((temp1804 == 1)) {
                    this.Manager.Comment("reaching state \'S1417\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1803;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1803 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2395\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1803, "return of NetrLogonControl2, state S2395");
                    this.Manager.Comment("reaching state \'S3305\'");
                    goto label514;
                }
                throw new InvalidOperationException("never reached");
            label514:
;
                goto label515;
            }
            throw new InvalidOperationException("never reached");
        label515:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S869");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S869");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S870");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S870");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S37");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S871");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS36GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S871");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38");
            this.Manager.Comment("reaching state \'S38\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1806;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1806);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1806);
            this.Manager.Comment("reaching state \'S39\'");
            int temp1819 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetPlatformChecker2)));
            if ((temp1819 == 0)) {
                this.Manager.Comment("reaching state \'S383\'");
                bool temp1807;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1807);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1807);
                this.Manager.Comment("reaching state \'S872\'");
                int temp1810 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker1)));
                if ((temp1810 == 0)) {
                    this.Manager.Comment("reaching state \'S1418\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1808;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,2,Valid)\'");
                    temp1808 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2396\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1808, "return of NetrLogonControl2, state S2396");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label516;
                }
                if ((temp1810 == 1)) {
                    this.Manager.Comment("reaching state \'S1419\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1809;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,4,Valid)\'");
                    temp1809 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2397\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1809, "return of NetrLogonControl2, state S2397");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label516;
                }
                throw new InvalidOperationException("never reached");
            label516:
;
                goto label519;
            }
            if ((temp1819 == 1)) {
                this.Manager.Comment("reaching state \'S384\'");
                bool temp1811;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1811);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1811);
                this.Manager.Comment("reaching state \'S873\'");
                int temp1814 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker3)));
                if ((temp1814 == 0)) {
                    this.Manager.Comment("reaching state \'S1420\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1812;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,2,Valid)\'");
                    temp1812 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2398\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1812, "return of NetrLogonControl2, state S2398");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label517;
                }
                if ((temp1814 == 1)) {
                    this.Manager.Comment("reaching state \'S1421\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1813;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1813 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2399\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1813, "return of NetrLogonControl2, state S2399");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label517;
                }
                throw new InvalidOperationException("never reached");
            label517:
;
                goto label519;
            }
            if ((temp1819 == 2)) {
                this.Manager.Comment("reaching state \'S385\'");
                bool temp1815;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1815);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1815);
                this.Manager.Comment("reaching state \'S874\'");
                int temp1818 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker5)));
                if ((temp1818 == 0)) {
                    this.Manager.Comment("reaching state \'S1422\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1816;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1816 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2400\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1816, "return of NetrLogonControl2, state S2400");
                    this.Manager.Comment("reaching state \'S3306\'");
                    goto label518;
                }
                if ((temp1818 == 1)) {
                    this.Manager.Comment("reaching state \'S1423\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1817;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1817 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2401\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1817, "return of NetrLogonControl2, state S2401");
                    this.Manager.Comment("reaching state \'S3307\'");
                    goto label518;
                }
                throw new InvalidOperationException("never reached");
            label518:
;
                goto label519;
            }
            throw new InvalidOperationException("never reached");
        label519:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S872");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S872");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S873");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S873");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S39");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S874");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS38GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S874");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4");
            this.Manager.Comment("reaching state \'S4\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1820;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1820);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1820);
            this.Manager.Comment("reaching state \'S5\'");
            int temp1833 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetPlatformChecker2)));
            if ((temp1833 == 0)) {
                this.Manager.Comment("reaching state \'S332\'");
                bool temp1821;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1821);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1821);
                this.Manager.Comment("reaching state \'S821\'");
                int temp1824 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker1)));
                if ((temp1824 == 0)) {
                    this.Manager.Comment("reaching state \'S1316\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1822;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,NoValidDomainNameContained)" +
                            "\'");
                    temp1822 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2294\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1822, "return of NetrLogonControl2, state S2294");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label520;
                }
                if ((temp1824 == 1)) {
                    this.Manager.Comment("reaching state \'S1317\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1823;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,Valid)\'");
                    temp1823 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2295\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1823, "return of NetrLogonControl2, state S2295");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label520;
                }
                throw new InvalidOperationException("never reached");
            label520:
;
                goto label523;
            }
            if ((temp1833 == 1)) {
                this.Manager.Comment("reaching state \'S333\'");
                bool temp1825;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1825);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1825);
                this.Manager.Comment("reaching state \'S822\'");
                int temp1828 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker3)));
                if ((temp1828 == 0)) {
                    this.Manager.Comment("reaching state \'S1318\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1826;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,NoValidDomainNameContained)" +
                            "\'");
                    temp1826 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2296\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1826, "return of NetrLogonControl2, state S2296");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label521;
                }
                if ((temp1828 == 1)) {
                    this.Manager.Comment("reaching state \'S1319\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1827;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,Valid)\'");
                    temp1827 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2297\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1827, "return of NetrLogonControl2, state S2297");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label521;
                }
                throw new InvalidOperationException("never reached");
            label521:
;
                goto label523;
            }
            if ((temp1833 == 2)) {
                this.Manager.Comment("reaching state \'S334\'");
                bool temp1829;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1829);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1829);
                this.Manager.Comment("reaching state \'S823\'");
                int temp1832 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker5)));
                if ((temp1832 == 0)) {
                    this.Manager.Comment("reaching state \'S1320\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1830;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1830 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2298\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1830, "return of NetrLogonControl2, state S2298");
                    this.Manager.Comment("reaching state \'S3272\'");
                    goto label522;
                }
                if ((temp1832 == 1)) {
                    this.Manager.Comment("reaching state \'S1321\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1831;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1831 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2299\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1831, "return of NetrLogonControl2, state S2299");
                    this.Manager.Comment("reaching state \'S3273\'");
                    goto label522;
                }
                throw new InvalidOperationException("never reached");
            label522:
;
                goto label523;
            }
            throw new InvalidOperationException("never reached");
        label523:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S821");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S821");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S822");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S822");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S5");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S823");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS4GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S823");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1834;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1834);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1834);
            this.Manager.Comment("reaching state \'S41\'");
            int temp1847 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetPlatformChecker2)));
            if ((temp1847 == 0)) {
                this.Manager.Comment("reaching state \'S386\'");
                bool temp1835;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1835);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1835);
                this.Manager.Comment("reaching state \'S875\'");
                int temp1838 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker1)));
                if ((temp1838 == 0)) {
                    this.Manager.Comment("reaching state \'S1424\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1836;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,1,Valid)\'");
                    temp1836 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2402\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1836, "return of NetrLogonControl2, state S2402");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label524;
                }
                if ((temp1838 == 1)) {
                    this.Manager.Comment("reaching state \'S1425\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1837;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,4,Valid)\'");
                    temp1837 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2403\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1837, "return of NetrLogonControl2, state S2403");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label524;
                }
                throw new InvalidOperationException("never reached");
            label524:
;
                goto label527;
            }
            if ((temp1847 == 1)) {
                this.Manager.Comment("reaching state \'S387\'");
                bool temp1839;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1839);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1839);
                this.Manager.Comment("reaching state \'S876\'");
                int temp1842 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker3)));
                if ((temp1842 == 0)) {
                    this.Manager.Comment("reaching state \'S1426\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1840;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,1,Valid)\'");
                    temp1840 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2404\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1840, "return of NetrLogonControl2, state S2404");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label525;
                }
                if ((temp1842 == 1)) {
                    this.Manager.Comment("reaching state \'S1427\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1841;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1841 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2405\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1841, "return of NetrLogonControl2, state S2405");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label525;
                }
                throw new InvalidOperationException("never reached");
            label525:
;
                goto label527;
            }
            if ((temp1847 == 2)) {
                this.Manager.Comment("reaching state \'S388\'");
                bool temp1843;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1843);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1843);
                this.Manager.Comment("reaching state \'S877\'");
                int temp1846 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker5)));
                if ((temp1846 == 0)) {
                    this.Manager.Comment("reaching state \'S1428\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1844;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1844 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2406\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1844, "return of NetrLogonControl2, state S2406");
                    this.Manager.Comment("reaching state \'S3308\'");
                    goto label526;
                }
                if ((temp1846 == 1)) {
                    this.Manager.Comment("reaching state \'S1429\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1845;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1845 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2407\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1845, "return of NetrLogonControl2, state S2407");
                    this.Manager.Comment("reaching state \'S3309\'");
                    goto label526;
                }
                throw new InvalidOperationException("never reached");
            label526:
;
                goto label527;
            }
            throw new InvalidOperationException("never reached");
        label527:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S875");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S875");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S876");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S876");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S41");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S877");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS40GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S877");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42");
            this.Manager.Comment("reaching state \'S42\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1848;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1848);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1848);
            this.Manager.Comment("reaching state \'S43\'");
            int temp1861 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetPlatformChecker2)));
            if ((temp1861 == 0)) {
                this.Manager.Comment("reaching state \'S389\'");
                bool temp1849;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1849);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1849);
                this.Manager.Comment("reaching state \'S878\'");
                int temp1852 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker1)));
                if ((temp1852 == 0)) {
                    this.Manager.Comment("reaching state \'S1430\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1850;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,NoValidDomainNameContained)\'" +
                            "");
                    temp1850 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2408\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1850, "return of NetrLogonControl2, state S2408");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label528;
                }
                if ((temp1852 == 1)) {
                    this.Manager.Comment("reaching state \'S1431\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1851;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1851 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2409\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1851, "return of NetrLogonControl2, state S2409");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label528;
                }
                throw new InvalidOperationException("never reached");
            label528:
;
                goto label531;
            }
            if ((temp1861 == 1)) {
                this.Manager.Comment("reaching state \'S390\'");
                bool temp1853;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1853);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1853);
                this.Manager.Comment("reaching state \'S879\'");
                int temp1856 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker3)));
                if ((temp1856 == 0)) {
                    this.Manager.Comment("reaching state \'S1432\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1854;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,NoValidDomainNameContained)\'" +
                            "");
                    temp1854 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2410\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1854, "return of NetrLogonControl2, state S2410");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label529;
                }
                if ((temp1856 == 1)) {
                    this.Manager.Comment("reaching state \'S1433\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1855;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,2,Valid)\'");
                    temp1855 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2411\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1855, "return of NetrLogonControl2, state S2411");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label529;
                }
                throw new InvalidOperationException("never reached");
            label529:
;
                goto label531;
            }
            if ((temp1861 == 2)) {
                this.Manager.Comment("reaching state \'S391\'");
                bool temp1857;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1857);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1857);
                this.Manager.Comment("reaching state \'S880\'");
                int temp1860 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker5)));
                if ((temp1860 == 0)) {
                    this.Manager.Comment("reaching state \'S1434\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1858;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1858 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2412\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1858, "return of NetrLogonControl2, state S2412");
                    this.Manager.Comment("reaching state \'S3310\'");
                    goto label530;
                }
                if ((temp1860 == 1)) {
                    this.Manager.Comment("reaching state \'S1435\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1859;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1859 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2413\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1859, "return of NetrLogonControl2, state S2413");
                    this.Manager.Comment("reaching state \'S3311\'");
                    goto label530;
                }
                throw new InvalidOperationException("never reached");
            label530:
;
                goto label531;
            }
            throw new InvalidOperationException("never reached");
        label531:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S878");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S878");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S879");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S879");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S43");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S880");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS42GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S880");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44");
            this.Manager.Comment("reaching state \'S44\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1862;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1862);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1862);
            this.Manager.Comment("reaching state \'S45\'");
            int temp1875 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetPlatformChecker2)));
            if ((temp1875 == 0)) {
                this.Manager.Comment("reaching state \'S392\'");
                bool temp1863;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1863);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1863);
                this.Manager.Comment("reaching state \'S881\'");
                int temp1866 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker1)));
                if ((temp1866 == 0)) {
                    this.Manager.Comment("reaching state \'S1436\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1864;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,NoValidDomainNameContained)\'" +
                            "");
                    temp1864 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2414\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1864, "return of NetrLogonControl2, state S2414");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label532;
                }
                if ((temp1866 == 1)) {
                    this.Manager.Comment("reaching state \'S1437\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1865;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1865 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2415\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1865, "return of NetrLogonControl2, state S2415");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label532;
                }
                throw new InvalidOperationException("never reached");
            label532:
;
                goto label535;
            }
            if ((temp1875 == 1)) {
                this.Manager.Comment("reaching state \'S393\'");
                bool temp1867;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1867);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1867);
                this.Manager.Comment("reaching state \'S882\'");
                int temp1870 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker3)));
                if ((temp1870 == 0)) {
                    this.Manager.Comment("reaching state \'S1438\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1868;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,NoValidDomainNameContained)\'" +
                            "");
                    temp1868 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2416\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1868, "return of NetrLogonControl2, state S2416");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label533;
                }
                if ((temp1870 == 1)) {
                    this.Manager.Comment("reaching state \'S1439\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1869;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,3,Valid)\'");
                    temp1869 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104100");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2417\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1869, "return of NetrLogonControl2, state S2417");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label533;
                }
                throw new InvalidOperationException("never reached");
            label533:
;
                goto label535;
            }
            if ((temp1875 == 2)) {
                this.Manager.Comment("reaching state \'S394\'");
                bool temp1871;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1871);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1871);
                this.Manager.Comment("reaching state \'S883\'");
                int temp1874 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker5)));
                if ((temp1874 == 0)) {
                    this.Manager.Comment("reaching state \'S1440\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1872;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1872 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2418\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1872, "return of NetrLogonControl2, state S2418");
                    this.Manager.Comment("reaching state \'S3312\'");
                    goto label534;
                }
                if ((temp1874 == 1)) {
                    this.Manager.Comment("reaching state \'S1441\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1873;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1873 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2419\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1873, "return of NetrLogonControl2, state S2419");
                    this.Manager.Comment("reaching state \'S3313\'");
                    goto label534;
                }
                throw new InvalidOperationException("never reached");
            label534:
;
                goto label535;
            }
            throw new InvalidOperationException("never reached");
        label535:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S881");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S881");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S882");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S882");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S45");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S883");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS44GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S883");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46");
            this.Manager.Comment("reaching state \'S46\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1876;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1876);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1876);
            this.Manager.Comment("reaching state \'S47\'");
            int temp1889 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetPlatformChecker2)));
            if ((temp1889 == 0)) {
                this.Manager.Comment("reaching state \'S395\'");
                bool temp1877;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1877);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1877);
                this.Manager.Comment("reaching state \'S884\'");
                int temp1880 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker1)));
                if ((temp1880 == 0)) {
                    this.Manager.Comment("reaching state \'S1442\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1878;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1878 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2420\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1878, "return of NetrLogonControl2, state S2420");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label536;
                }
                if ((temp1880 == 1)) {
                    this.Manager.Comment("reaching state \'S1443\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1879;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,NoValidDomainNameContained)" +
                            "\'");
                    temp1879 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2421\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1879, "return of NetrLogonControl2, state S2421");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label536;
                }
                throw new InvalidOperationException("never reached");
            label536:
;
                goto label539;
            }
            if ((temp1889 == 1)) {
                this.Manager.Comment("reaching state \'S396\'");
                bool temp1881;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1881);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1881);
                this.Manager.Comment("reaching state \'S885\'");
                int temp1884 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker3)));
                if ((temp1884 == 0)) {
                    this.Manager.Comment("reaching state \'S1444\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1882;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1882 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2422\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1882, "return of NetrLogonControl2, state S2422");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label537;
                }
                if ((temp1884 == 1)) {
                    this.Manager.Comment("reaching state \'S1445\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1883;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,3,Valid)\'");
                    temp1883 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2423\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1883, "return of NetrLogonControl2, state S2423");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label537;
                }
                throw new InvalidOperationException("never reached");
            label537:
;
                goto label539;
            }
            if ((temp1889 == 2)) {
                this.Manager.Comment("reaching state \'S397\'");
                bool temp1885;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1885);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1885);
                this.Manager.Comment("reaching state \'S886\'");
                int temp1888 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker5)));
                if ((temp1888 == 0)) {
                    this.Manager.Comment("reaching state \'S1446\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1886;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1886 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2424\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1886, "return of NetrLogonControl2, state S2424");
                    this.Manager.Comment("reaching state \'S3314\'");
                    goto label538;
                }
                if ((temp1888 == 1)) {
                    this.Manager.Comment("reaching state \'S1447\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1887;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1887 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2425\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1887, "return of NetrLogonControl2, state S2425");
                    this.Manager.Comment("reaching state \'S3315\'");
                    goto label538;
                }
                throw new InvalidOperationException("never reached");
            label538:
;
                goto label539;
            }
            throw new InvalidOperationException("never reached");
        label539:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S884");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S884");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S885");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S885");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S47");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S886");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS46GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S886");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1890;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1890);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1890);
            this.Manager.Comment("reaching state \'S49\'");
            int temp1903 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetPlatformChecker2)));
            if ((temp1903 == 0)) {
                this.Manager.Comment("reaching state \'S398\'");
                bool temp1891;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1891);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1891);
                this.Manager.Comment("reaching state \'S887\'");
                int temp1894 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker1)));
                if ((temp1894 == 0)) {
                    this.Manager.Comment("reaching state \'S1448\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1892;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1892 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2426\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1892, "return of NetrLogonControl2, state S2426");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label540;
                }
                if ((temp1894 == 1)) {
                    this.Manager.Comment("reaching state \'S1449\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1893;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1893 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2427\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp1893, "return of NetrLogonControl2, state S2427");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label540;
                }
                throw new InvalidOperationException("never reached");
            label540:
;
                goto label543;
            }
            if ((temp1903 == 1)) {
                this.Manager.Comment("reaching state \'S399\'");
                bool temp1895;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1895);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1895);
                this.Manager.Comment("reaching state \'S888\'");
                int temp1898 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker3)));
                if ((temp1898 == 0)) {
                    this.Manager.Comment("reaching state \'S1450\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1896;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1896 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2428\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1896, "return of NetrLogonControl2, state S2428");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label541;
                }
                if ((temp1898 == 1)) {
                    this.Manager.Comment("reaching state \'S1451\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1897;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,1,Valid)\'");
                    temp1897 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2429\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1897, "return of NetrLogonControl2, state S2429");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label541;
                }
                throw new InvalidOperationException("never reached");
            label541:
;
                goto label543;
            }
            if ((temp1903 == 2)) {
                this.Manager.Comment("reaching state \'S400\'");
                bool temp1899;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1899);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1899);
                this.Manager.Comment("reaching state \'S889\'");
                int temp1902 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker5)));
                if ((temp1902 == 0)) {
                    this.Manager.Comment("reaching state \'S1452\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1900;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1900 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2430\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1900, "return of NetrLogonControl2, state S2430");
                    this.Manager.Comment("reaching state \'S3316\'");
                    goto label542;
                }
                if ((temp1902 == 1)) {
                    this.Manager.Comment("reaching state \'S1453\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1901;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1901 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2431\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1901, "return of NetrLogonControl2, state S2431");
                    this.Manager.Comment("reaching state \'S3317\'");
                    goto label542;
                }
                throw new InvalidOperationException("never reached");
            label542:
;
                goto label543;
            }
            throw new InvalidOperationException("never reached");
        label543:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S887");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S887");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S888");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S888");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S49");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S889");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS48GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S889");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50");
            this.Manager.Comment("reaching state \'S50\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1904;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1904);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1904);
            this.Manager.Comment("reaching state \'S51\'");
            int temp1917 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetPlatformChecker2)));
            if ((temp1917 == 0)) {
                this.Manager.Comment("reaching state \'S401\'");
                bool temp1905;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1905);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1905);
                this.Manager.Comment("reaching state \'S890\'");
                int temp1908 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker1)));
                if ((temp1908 == 0)) {
                    this.Manager.Comment("reaching state \'S1454\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1906;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1906 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2432\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1906, "return of NetrLogonControl2, state S2432");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label544;
                }
                if ((temp1908 == 1)) {
                    this.Manager.Comment("reaching state \'S1455\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1907;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1907 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2433\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1907, "return of NetrLogonControl2, state S2433");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label544;
                }
                throw new InvalidOperationException("never reached");
            label544:
;
                goto label547;
            }
            if ((temp1917 == 1)) {
                this.Manager.Comment("reaching state \'S402\'");
                bool temp1909;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1909);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1909);
                this.Manager.Comment("reaching state \'S891\'");
                int temp1912 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker3)));
                if ((temp1912 == 0)) {
                    this.Manager.Comment("reaching state \'S1456\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1910;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1910 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2434\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1910, "return of NetrLogonControl2, state S2434");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label545;
                }
                if ((temp1912 == 1)) {
                    this.Manager.Comment("reaching state \'S1457\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1911;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,1,Valid)\'");
                    temp1911 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2435\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1911, "return of NetrLogonControl2, state S2435");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label545;
                }
                throw new InvalidOperationException("never reached");
            label545:
;
                goto label547;
            }
            if ((temp1917 == 2)) {
                this.Manager.Comment("reaching state \'S403\'");
                bool temp1913;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1913);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1913);
                this.Manager.Comment("reaching state \'S892\'");
                int temp1916 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker5)));
                if ((temp1916 == 0)) {
                    this.Manager.Comment("reaching state \'S1458\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1914;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1914 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2436\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1914, "return of NetrLogonControl2, state S2436");
                    this.Manager.Comment("reaching state \'S3318\'");
                    goto label546;
                }
                if ((temp1916 == 1)) {
                    this.Manager.Comment("reaching state \'S1459\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1915;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1915 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2437\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1915, "return of NetrLogonControl2, state S2437");
                    this.Manager.Comment("reaching state \'S3319\'");
                    goto label546;
                }
                throw new InvalidOperationException("never reached");
            label546:
;
                goto label547;
            }
            throw new InvalidOperationException("never reached");
        label547:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S890");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S890");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S891");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S891");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S51");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S892");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS50GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S892");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1918;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1918);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1918);
            this.Manager.Comment("reaching state \'S53\'");
            int temp1931 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetPlatformChecker2)));
            if ((temp1931 == 0)) {
                this.Manager.Comment("reaching state \'S404\'");
                bool temp1919;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1919);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1919);
                this.Manager.Comment("reaching state \'S893\'");
                int temp1922 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker1)));
                if ((temp1922 == 0)) {
                    this.Manager.Comment("reaching state \'S1460\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1920;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1920 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2438\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1920, "return of NetrLogonControl2, state S2438");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label548;
                }
                if ((temp1922 == 1)) {
                    this.Manager.Comment("reaching state \'S1461\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1921;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1921 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2439\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1921, "return of NetrLogonControl2, state S2439");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label548;
                }
                throw new InvalidOperationException("never reached");
            label548:
;
                goto label551;
            }
            if ((temp1931 == 1)) {
                this.Manager.Comment("reaching state \'S405\'");
                bool temp1923;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1923);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1923);
                this.Manager.Comment("reaching state \'S894\'");
                int temp1926 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker3)));
                if ((temp1926 == 0)) {
                    this.Manager.Comment("reaching state \'S1462\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1924;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,NoValidDomainNameContained)\'" +
                            "");
                    temp1924 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2440\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1924, "return of NetrLogonControl2, state S2440");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label549;
                }
                if ((temp1926 == 1)) {
                    this.Manager.Comment("reaching state \'S1463\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1925;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,3,Valid)\'");
                    temp1925 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2441\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1925, "return of NetrLogonControl2, state S2441");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label549;
                }
                throw new InvalidOperationException("never reached");
            label549:
;
                goto label551;
            }
            if ((temp1931 == 2)) {
                this.Manager.Comment("reaching state \'S406\'");
                bool temp1927;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1927);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1927);
                this.Manager.Comment("reaching state \'S895\'");
                int temp1930 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker5)));
                if ((temp1930 == 0)) {
                    this.Manager.Comment("reaching state \'S1464\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1928;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1928 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2442\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1928, "return of NetrLogonControl2, state S2442");
                    this.Manager.Comment("reaching state \'S3320\'");
                    goto label550;
                }
                if ((temp1930 == 1)) {
                    this.Manager.Comment("reaching state \'S1465\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1929;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1929 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2443\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1929, "return of NetrLogonControl2, state S2443");
                    this.Manager.Comment("reaching state \'S3321\'");
                    goto label550;
                }
                throw new InvalidOperationException("never reached");
            label550:
;
                goto label551;
            }
            throw new InvalidOperationException("never reached");
        label551:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S893");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S893");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S894");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S894");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S53");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S895");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS52GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S895");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1932;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1932);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1932);
            this.Manager.Comment("reaching state \'S55\'");
            int temp1945 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetPlatformChecker2)));
            if ((temp1945 == 0)) {
                this.Manager.Comment("reaching state \'S407\'");
                bool temp1933;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1933);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1933);
                this.Manager.Comment("reaching state \'S896\'");
                int temp1936 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker1)));
                if ((temp1936 == 0)) {
                    this.Manager.Comment("reaching state \'S1466\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1934;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1934 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2444\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1934, "return of NetrLogonControl2, state S2444");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label552;
                }
                if ((temp1936 == 1)) {
                    this.Manager.Comment("reaching state \'S1467\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1935;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1935 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2445\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1935, "return of NetrLogonControl2, state S2445");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label552;
                }
                throw new InvalidOperationException("never reached");
            label552:
;
                goto label555;
            }
            if ((temp1945 == 1)) {
                this.Manager.Comment("reaching state \'S408\'");
                bool temp1937;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1937);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1937);
                this.Manager.Comment("reaching state \'S897\'");
                int temp1940 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker3)));
                if ((temp1940 == 0)) {
                    this.Manager.Comment("reaching state \'S1468\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1938;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,NoValidDomainNameContained)\'" +
                            "");
                    temp1938 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2446\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1938, "return of NetrLogonControl2, state S2446");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label553;
                }
                if ((temp1940 == 1)) {
                    this.Manager.Comment("reaching state \'S1469\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1939;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,4,Valid)\'");
                    temp1939 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2447\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1939, "return of NetrLogonControl2, state S2447");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label553;
                }
                throw new InvalidOperationException("never reached");
            label553:
;
                goto label555;
            }
            if ((temp1945 == 2)) {
                this.Manager.Comment("reaching state \'S409\'");
                bool temp1941;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1941);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1941);
                this.Manager.Comment("reaching state \'S898\'");
                int temp1944 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker5)));
                if ((temp1944 == 0)) {
                    this.Manager.Comment("reaching state \'S1470\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1942;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1942 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2448\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1942, "return of NetrLogonControl2, state S2448");
                    this.Manager.Comment("reaching state \'S3322\'");
                    goto label554;
                }
                if ((temp1944 == 1)) {
                    this.Manager.Comment("reaching state \'S1471\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1943;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1943 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2449\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1943, "return of NetrLogonControl2, state S2449");
                    this.Manager.Comment("reaching state \'S3323\'");
                    goto label554;
                }
                throw new InvalidOperationException("never reached");
            label554:
;
                goto label555;
            }
            throw new InvalidOperationException("never reached");
        label555:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S896");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S896");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S897");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S897");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S55");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S898");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS54GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S898");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1946;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1946);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1946);
            this.Manager.Comment("reaching state \'S57\'");
            int temp1959 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetPlatformChecker2)));
            if ((temp1959 == 0)) {
                this.Manager.Comment("reaching state \'S410\'");
                bool temp1947;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1947);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1947);
                this.Manager.Comment("reaching state \'S899\'");
                int temp1950 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker1)));
                if ((temp1950 == 0)) {
                    this.Manager.Comment("reaching state \'S1472\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1948;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,3,Valid)\'");
                    temp1948 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2450\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1948, "return of NetrLogonControl2, state S2450");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label556;
                }
                if ((temp1950 == 1)) {
                    this.Manager.Comment("reaching state \'S1473\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1949;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1949 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2451\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1949, "return of NetrLogonControl2, state S2451");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label556;
                }
                throw new InvalidOperationException("never reached");
            label556:
;
                goto label559;
            }
            if ((temp1959 == 1)) {
                this.Manager.Comment("reaching state \'S411\'");
                bool temp1951;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1951);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1951);
                this.Manager.Comment("reaching state \'S900\'");
                int temp1954 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker3)));
                if ((temp1954 == 0)) {
                    this.Manager.Comment("reaching state \'S1474\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1952;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,3,Valid)\'");
                    temp1952 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2452\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1952, "return of NetrLogonControl2, state S2452");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label557;
                }
                if ((temp1954 == 1)) {
                    this.Manager.Comment("reaching state \'S1475\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1953;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,1,Valid)\'");
                    temp1953 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2453\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1953, "return of NetrLogonControl2, state S2453");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label557;
                }
                throw new InvalidOperationException("never reached");
            label557:
;
                goto label559;
            }
            if ((temp1959 == 2)) {
                this.Manager.Comment("reaching state \'S412\'");
                bool temp1955;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1955);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1955);
                this.Manager.Comment("reaching state \'S901\'");
                int temp1958 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker5)));
                if ((temp1958 == 0)) {
                    this.Manager.Comment("reaching state \'S1476\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1956;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1956 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2454\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1956, "return of NetrLogonControl2, state S2454");
                    this.Manager.Comment("reaching state \'S3324\'");
                    goto label558;
                }
                if ((temp1958 == 1)) {
                    this.Manager.Comment("reaching state \'S1477\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1957;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1957 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2455\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1957, "return of NetrLogonControl2, state S2455");
                    this.Manager.Comment("reaching state \'S3325\'");
                    goto label558;
                }
                throw new InvalidOperationException("never reached");
            label558:
;
                goto label559;
            }
            throw new InvalidOperationException("never reached");
        label559:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S899");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S899");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S900");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S900");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S57");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S901");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS56GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S901");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1960;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1960);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1960);
            this.Manager.Comment("reaching state \'S59\'");
            int temp1973 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetPlatformChecker2)));
            if ((temp1973 == 0)) {
                this.Manager.Comment("reaching state \'S413\'");
                bool temp1961;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1961);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1961);
                this.Manager.Comment("reaching state \'S902\'");
                int temp1964 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker1)));
                if ((temp1964 == 0)) {
                    this.Manager.Comment("reaching state \'S1478\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1962;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,1,Valid)\'");
                    temp1962 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2456\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1962, "return of NetrLogonControl2, state S2456");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label560;
                }
                if ((temp1964 == 1)) {
                    this.Manager.Comment("reaching state \'S1479\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1963;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1963 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2457\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1963, "return of NetrLogonControl2, state S2457");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label560;
                }
                throw new InvalidOperationException("never reached");
            label560:
;
                goto label563;
            }
            if ((temp1973 == 1)) {
                this.Manager.Comment("reaching state \'S414\'");
                bool temp1965;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1965);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1965);
                this.Manager.Comment("reaching state \'S903\'");
                int temp1968 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker3)));
                if ((temp1968 == 0)) {
                    this.Manager.Comment("reaching state \'S1480\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1966;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,1,Valid)\'");
                    temp1966 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2458\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1966, "return of NetrLogonControl2, state S2458");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label561;
                }
                if ((temp1968 == 1)) {
                    this.Manager.Comment("reaching state \'S1481\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1967;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,1,Valid)\'");
                    temp1967 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2459\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1967, "return of NetrLogonControl2, state S2459");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label561;
                }
                throw new InvalidOperationException("never reached");
            label561:
;
                goto label563;
            }
            if ((temp1973 == 2)) {
                this.Manager.Comment("reaching state \'S415\'");
                bool temp1969;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1969);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1969);
                this.Manager.Comment("reaching state \'S904\'");
                int temp1972 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker5)));
                if ((temp1972 == 0)) {
                    this.Manager.Comment("reaching state \'S1482\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1970;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1970 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2460\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1970, "return of NetrLogonControl2, state S2460");
                    this.Manager.Comment("reaching state \'S3326\'");
                    goto label562;
                }
                if ((temp1972 == 1)) {
                    this.Manager.Comment("reaching state \'S1483\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1971;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1971 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2461\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1971, "return of NetrLogonControl2, state S2461");
                    this.Manager.Comment("reaching state \'S3327\'");
                    goto label562;
                }
                throw new InvalidOperationException("never reached");
            label562:
;
                goto label563;
            }
            throw new InvalidOperationException("never reached");
        label563:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S902");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S902");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S903");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S903");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S59");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S904");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS58GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S904");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6");
            this.Manager.Comment("reaching state \'S6\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1974;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1974);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1974);
            this.Manager.Comment("reaching state \'S7\'");
            int temp1987 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetPlatformChecker2)));
            if ((temp1987 == 0)) {
                this.Manager.Comment("reaching state \'S335\'");
                bool temp1975;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1975);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1975);
                this.Manager.Comment("reaching state \'S824\'");
                int temp1978 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker1)));
                if ((temp1978 == 0)) {
                    this.Manager.Comment("reaching state \'S1322\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1976;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,NoValidDomainNameContained)" +
                            "\'");
                    temp1976 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2300\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1976, "return of NetrLogonControl2, state S2300");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label564;
                }
                if ((temp1978 == 1)) {
                    this.Manager.Comment("reaching state \'S1323\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1977;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,3,Valid)\'");
                    temp1977 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2301\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1977, "return of NetrLogonControl2, state S2301");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label564;
                }
                throw new InvalidOperationException("never reached");
            label564:
;
                goto label567;
            }
            if ((temp1987 == 1)) {
                this.Manager.Comment("reaching state \'S336\'");
                bool temp1979;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1979);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1979);
                this.Manager.Comment("reaching state \'S825\'");
                int temp1982 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker3)));
                if ((temp1982 == 0)) {
                    this.Manager.Comment("reaching state \'S1324\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1980;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,NoValidDomainNameContained)" +
                            "\'");
                    temp1980 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2302\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1980, "return of NetrLogonControl2, state S2302");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label565;
                }
                if ((temp1982 == 1)) {
                    this.Manager.Comment("reaching state \'S1325\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1981;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,Valid)\'");
                    temp1981 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2303\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp1981, "return of NetrLogonControl2, state S2303");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label565;
                }
                throw new InvalidOperationException("never reached");
            label565:
;
                goto label567;
            }
            if ((temp1987 == 2)) {
                this.Manager.Comment("reaching state \'S337\'");
                bool temp1983;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1983);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1983);
                this.Manager.Comment("reaching state \'S826\'");
                int temp1986 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker5)));
                if ((temp1986 == 0)) {
                    this.Manager.Comment("reaching state \'S1326\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1984;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1984 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2304\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1984, "return of NetrLogonControl2, state S2304");
                    this.Manager.Comment("reaching state \'S3274\'");
                    goto label566;
                }
                if ((temp1986 == 1)) {
                    this.Manager.Comment("reaching state \'S1327\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1985;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1985 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2305\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1985, "return of NetrLogonControl2, state S2305");
                    this.Manager.Comment("reaching state \'S3275\'");
                    goto label566;
                }
                throw new InvalidOperationException("never reached");
            label566:
;
                goto label567;
            }
            throw new InvalidOperationException("never reached");
        label567:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S824");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S824");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S825");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S825");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S7");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S826");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS6GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S826");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60");
            this.Manager.Comment("reaching state \'S60\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp1988;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp1988);
            this.Manager.AddReturn(GetPlatformInfo, null, temp1988);
            this.Manager.Comment("reaching state \'S61\'");
            int temp2001 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetPlatformChecker2)));
            if ((temp2001 == 0)) {
                this.Manager.Comment("reaching state \'S416\'");
                bool temp1989;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1989);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1989);
                this.Manager.Comment("reaching state \'S905\'");
                int temp1992 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker1)));
                if ((temp1992 == 0)) {
                    this.Manager.Comment("reaching state \'S1484\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1990;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,4,Valid)\'");
                    temp1990 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2462\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1990, "return of NetrLogonControl2, state S2462");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label568;
                }
                if ((temp1992 == 1)) {
                    this.Manager.Comment("reaching state \'S1485\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1991;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,NoValidDomainNameContained)\'" +
                            "");
                    temp1991 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2463\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp1991, "return of NetrLogonControl2, state S2463");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label568;
                }
                throw new InvalidOperationException("never reached");
            label568:
;
                goto label571;
            }
            if ((temp2001 == 1)) {
                this.Manager.Comment("reaching state \'S417\'");
                bool temp1993;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1993);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1993);
                this.Manager.Comment("reaching state \'S906\'");
                int temp1996 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker3)));
                if ((temp1996 == 0)) {
                    this.Manager.Comment("reaching state \'S1486\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1994;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,4,Valid)\'");
                    temp1994 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2464\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1994, "return of NetrLogonControl2, state S2464");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label569;
                }
                if ((temp1996 == 1)) {
                    this.Manager.Comment("reaching state \'S1487\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1995;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,2,Valid)\'");
                    temp1995 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2465\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp1995, "return of NetrLogonControl2, state S2465");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label569;
                }
                throw new InvalidOperationException("never reached");
            label569:
;
                goto label571;
            }
            if ((temp2001 == 2)) {
                this.Manager.Comment("reaching state \'S418\'");
                bool temp1997;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp1997);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp1997);
                this.Manager.Comment("reaching state \'S907\'");
                int temp2000 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker5)));
                if ((temp2000 == 0)) {
                    this.Manager.Comment("reaching state \'S1488\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1998;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp1998 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2466\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp1998, "return of NetrLogonControl2, state S2466");
                    this.Manager.Comment("reaching state \'S3328\'");
                    goto label570;
                }
                if ((temp2000 == 1)) {
                    this.Manager.Comment("reaching state \'S1489\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp1999;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp1999 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2467\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp1999, "return of NetrLogonControl2, state S2467");
                    this.Manager.Comment("reaching state \'S3329\'");
                    goto label570;
                }
                throw new InvalidOperationException("never reached");
            label570:
;
                goto label571;
            }
            throw new InvalidOperationException("never reached");
        label571:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S905");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S905");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S906");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S906");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S61");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S907");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS60GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S907");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2002;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2002);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2002);
            this.Manager.Comment("reaching state \'S63\'");
            int temp2015 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetPlatformChecker2)));
            if ((temp2015 == 0)) {
                this.Manager.Comment("reaching state \'S419\'");
                bool temp2003;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2003);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2003);
                this.Manager.Comment("reaching state \'S908\'");
                int temp2006 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker1)));
                if ((temp2006 == 0)) {
                    this.Manager.Comment("reaching state \'S1490\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2004;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,2,Valid)\'");
                    temp2004 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2468\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2004, "return of NetrLogonControl2, state S2468");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label572;
                }
                if ((temp2006 == 1)) {
                    this.Manager.Comment("reaching state \'S1491\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2005;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,NoValidDomainNameContained)" +
                            "\'");
                    temp2005 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10477");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2469\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp2005, "return of NetrLogonControl2, state S2469");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label572;
                }
                throw new InvalidOperationException("never reached");
            label572:
;
                goto label575;
            }
            if ((temp2015 == 1)) {
                this.Manager.Comment("reaching state \'S420\'");
                bool temp2007;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2007);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2007);
                this.Manager.Comment("reaching state \'S909\'");
                int temp2010 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker3)));
                if ((temp2010 == 0)) {
                    this.Manager.Comment("reaching state \'S1492\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2008;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,2,Valid)\'");
                    temp2008 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2470\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2008, "return of NetrLogonControl2, state S2470");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label573;
                }
                if ((temp2010 == 1)) {
                    this.Manager.Comment("reaching state \'S1493\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2009;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,2,Valid)\'");
                    temp2009 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2471\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2009, "return of NetrLogonControl2, state S2471");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label573;
                }
                throw new InvalidOperationException("never reached");
            label573:
;
                goto label575;
            }
            if ((temp2015 == 2)) {
                this.Manager.Comment("reaching state \'S421\'");
                bool temp2011;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2011);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2011);
                this.Manager.Comment("reaching state \'S910\'");
                int temp2014 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker5)));
                if ((temp2014 == 0)) {
                    this.Manager.Comment("reaching state \'S1494\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2012;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2012 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2472\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2012, "return of NetrLogonControl2, state S2472");
                    this.Manager.Comment("reaching state \'S3330\'");
                    goto label574;
                }
                if ((temp2014 == 1)) {
                    this.Manager.Comment("reaching state \'S1495\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2013;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2013 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2473\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2013, "return of NetrLogonControl2, state S2473");
                    this.Manager.Comment("reaching state \'S3331\'");
                    goto label574;
                }
                throw new InvalidOperationException("never reached");
            label574:
;
                goto label575;
            }
            throw new InvalidOperationException("never reached");
        label575:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S908");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S908");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S909");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S909");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S63");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S910");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS62GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S910");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2016;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2016);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2016);
            this.Manager.Comment("reaching state \'S65\'");
            int temp2029 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetPlatformChecker2)));
            if ((temp2029 == 0)) {
                this.Manager.Comment("reaching state \'S422\'");
                bool temp2017;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2017);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2017);
                this.Manager.Comment("reaching state \'S911\'");
                int temp2020 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker1)));
                if ((temp2020 == 0)) {
                    this.Manager.Comment("reaching state \'S1496\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2018;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,Valid)\'");
                    temp2018 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2474\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2018, "return of NetrLogonControl2, state S2474");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label576;
                }
                if ((temp2020 == 1)) {
                    this.Manager.Comment("reaching state \'S1497\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2019;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,4,NoValidDomainNameContained)\'" +
                            "");
                    temp2019 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104128");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2475\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp2019, "return of NetrLogonControl2, state S2475");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label576;
                }
                throw new InvalidOperationException("never reached");
            label576:
;
                goto label579;
            }
            if ((temp2029 == 1)) {
                this.Manager.Comment("reaching state \'S423\'");
                bool temp2021;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2021);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2021);
                this.Manager.Comment("reaching state \'S912\'");
                int temp2024 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker3)));
                if ((temp2024 == 0)) {
                    this.Manager.Comment("reaching state \'S1498\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2022;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,Valid)\'");
                    temp2022 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2476\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2022, "return of NetrLogonControl2, state S2476");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label577;
                }
                if ((temp2024 == 1)) {
                    this.Manager.Comment("reaching state \'S1499\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2023;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,4,Valid)\'");
                    temp2023 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2477\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2023, "return of NetrLogonControl2, state S2477");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label577;
                }
                throw new InvalidOperationException("never reached");
            label577:
;
                goto label579;
            }
            if ((temp2029 == 2)) {
                this.Manager.Comment("reaching state \'S424\'");
                bool temp2025;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2025);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2025);
                this.Manager.Comment("reaching state \'S913\'");
                int temp2028 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker5)));
                if ((temp2028 == 0)) {
                    this.Manager.Comment("reaching state \'S1500\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2026;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2026 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2478\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2026, "return of NetrLogonControl2, state S2478");
                    this.Manager.Comment("reaching state \'S3332\'");
                    goto label578;
                }
                if ((temp2028 == 1)) {
                    this.Manager.Comment("reaching state \'S1501\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2027;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2027 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2479\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2027, "return of NetrLogonControl2, state S2479");
                    this.Manager.Comment("reaching state \'S3333\'");
                    goto label578;
                }
                throw new InvalidOperationException("never reached");
            label578:
;
                goto label579;
            }
            throw new InvalidOperationException("never reached");
        label579:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S911");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S911");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S912");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S912");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S65");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S913");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS64GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S913");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2030;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2030);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2030);
            this.Manager.Comment("reaching state \'S67\'");
            int temp2043 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetPlatformChecker2)));
            if ((temp2043 == 0)) {
                this.Manager.Comment("reaching state \'S425\'");
                bool temp2031;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2031);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2031);
                this.Manager.Comment("reaching state \'S914\'");
                int temp2034 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker1)));
                if ((temp2034 == 0)) {
                    this.Manager.Comment("reaching state \'S1502\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2032;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,Valid)\'");
                    temp2032 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2480\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2032, "return of NetrLogonControl2, state S2480");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label580;
                }
                if ((temp2034 == 1)) {
                    this.Manager.Comment("reaching state \'S1503\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2033;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,3,NoValidDomainNameContained)\'" +
                            "");
                    temp2033 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2481\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp2033, "return of NetrLogonControl2, state S2481");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label580;
                }
                throw new InvalidOperationException("never reached");
            label580:
;
                goto label583;
            }
            if ((temp2043 == 1)) {
                this.Manager.Comment("reaching state \'S426\'");
                bool temp2035;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2035);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2035);
                this.Manager.Comment("reaching state \'S915\'");
                int temp2038 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker3)));
                if ((temp2038 == 0)) {
                    this.Manager.Comment("reaching state \'S1504\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2036;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,3,Valid)\'");
                    temp2036 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2482\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2036, "return of NetrLogonControl2, state S2482");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label581;
                }
                if ((temp2038 == 1)) {
                    this.Manager.Comment("reaching state \'S1505\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2037;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,3,Valid)\'");
                    temp2037 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2483\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2037, "return of NetrLogonControl2, state S2483");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label581;
                }
                throw new InvalidOperationException("never reached");
            label581:
;
                goto label583;
            }
            if ((temp2043 == 2)) {
                this.Manager.Comment("reaching state \'S427\'");
                bool temp2039;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2039);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2039);
                this.Manager.Comment("reaching state \'S916\'");
                int temp2042 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker5)));
                if ((temp2042 == 0)) {
                    this.Manager.Comment("reaching state \'S1506\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2040;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2040 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2484\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2040, "return of NetrLogonControl2, state S2484");
                    this.Manager.Comment("reaching state \'S3334\'");
                    goto label582;
                }
                if ((temp2042 == 1)) {
                    this.Manager.Comment("reaching state \'S1507\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2041;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2041 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2485\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2041, "return of NetrLogonControl2, state S2485");
                    this.Manager.Comment("reaching state \'S3335\'");
                    goto label582;
                }
                throw new InvalidOperationException("never reached");
            label582:
;
                goto label583;
            }
            throw new InvalidOperationException("never reached");
        label583:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S914");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S914");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S915");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S915");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S67");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S916");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS66GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S916");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2044;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2044);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2044);
            this.Manager.Comment("reaching state \'S69\'");
            int temp2057 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetPlatformChecker2)));
            if ((temp2057 == 0)) {
                this.Manager.Comment("reaching state \'S428\'");
                bool temp2045;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2045);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2045);
                this.Manager.Comment("reaching state \'S917\'");
                int temp2048 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker1)));
                if ((temp2048 == 0)) {
                    this.Manager.Comment("reaching state \'S1508\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2046;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,3,Valid)\'");
                    temp2046 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2486\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2046, "return of NetrLogonControl2, state S2486");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label584;
                }
                if ((temp2048 == 1)) {
                    this.Manager.Comment("reaching state \'S1509\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2047;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,NoValidDomainNameContained)\'" +
                            "");
                    temp2047 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10476");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2487\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp2047, "return of NetrLogonControl2, state S2487");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label584;
                }
                throw new InvalidOperationException("never reached");
            label584:
;
                goto label587;
            }
            if ((temp2057 == 1)) {
                this.Manager.Comment("reaching state \'S429\'");
                bool temp2049;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2049);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2049);
                this.Manager.Comment("reaching state \'S918\'");
                int temp2052 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker3)));
                if ((temp2052 == 0)) {
                    this.Manager.Comment("reaching state \'S1510\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2050;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,3,3,Valid)\'");
                    temp2050 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 3u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2488\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2050, "return of NetrLogonControl2, state S2488");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label585;
                }
                if ((temp2052 == 1)) {
                    this.Manager.Comment("reaching state \'S1511\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2051;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,3,Valid)\'");
                    temp2051 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2489\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2051, "return of NetrLogonControl2, state S2489");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label585;
                }
                throw new InvalidOperationException("never reached");
            label585:
;
                goto label587;
            }
            if ((temp2057 == 2)) {
                this.Manager.Comment("reaching state \'S430\'");
                bool temp2053;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2053);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2053);
                this.Manager.Comment("reaching state \'S919\'");
                int temp2056 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker5)));
                if ((temp2056 == 0)) {
                    this.Manager.Comment("reaching state \'S1512\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2054;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2054 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2490\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2054, "return of NetrLogonControl2, state S2490");
                    this.Manager.Comment("reaching state \'S3336\'");
                    goto label586;
                }
                if ((temp2056 == 1)) {
                    this.Manager.Comment("reaching state \'S1513\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2055;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2055 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2491\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2055, "return of NetrLogonControl2, state S2491");
                    this.Manager.Comment("reaching state \'S3337\'");
                    goto label586;
                }
                throw new InvalidOperationException("never reached");
            label586:
;
                goto label587;
            }
            throw new InvalidOperationException("never reached");
        label587:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S917");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S917");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S918");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S918");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S69");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S919");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS68GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S919");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2058;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2058);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2058);
            this.Manager.Comment("reaching state \'S71\'");
            int temp2071 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetPlatformChecker2)));
            if ((temp2071 == 0)) {
                this.Manager.Comment("reaching state \'S431\'");
                bool temp2059;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2059);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2059);
                this.Manager.Comment("reaching state \'S920\'");
                int temp2062 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker1)));
                if ((temp2062 == 0)) {
                    this.Manager.Comment("reaching state \'S1514\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2060;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,3,Valid)\'");
                    temp2060 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2492\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2060, "return of NetrLogonControl2, state S2492");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label588;
                }
                if ((temp2062 == 1)) {
                    this.Manager.Comment("reaching state \'S1515\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2061;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,NoValidDomainNameContained)" +
                            "\'");
                    temp2061 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2493\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp2061, "return of NetrLogonControl2, state S2493");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label588;
                }
                throw new InvalidOperationException("never reached");
            label588:
;
                goto label591;
            }
            if ((temp2071 == 1)) {
                this.Manager.Comment("reaching state \'S432\'");
                bool temp2063;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2063);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2063);
                this.Manager.Comment("reaching state \'S921\'");
                int temp2066 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker3)));
                if ((temp2066 == 0)) {
                    this.Manager.Comment("reaching state \'S1516\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2064;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,3,Valid)\'");
                    temp2064 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2494\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2064, "return of NetrLogonControl2, state S2494");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label589;
                }
                if ((temp2066 == 1)) {
                    this.Manager.Comment("reaching state \'S1517\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2065;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,2,Valid)\'");
                    temp2065 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2495\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2065, "return of NetrLogonControl2, state S2495");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label589;
                }
                throw new InvalidOperationException("never reached");
            label589:
;
                goto label591;
            }
            if ((temp2071 == 2)) {
                this.Manager.Comment("reaching state \'S433\'");
                bool temp2067;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2067);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2067);
                this.Manager.Comment("reaching state \'S922\'");
                int temp2070 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker5)));
                if ((temp2070 == 0)) {
                    this.Manager.Comment("reaching state \'S1518\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2068;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2068 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2496\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2068, "return of NetrLogonControl2, state S2496");
                    this.Manager.Comment("reaching state \'S3338\'");
                    goto label590;
                }
                if ((temp2070 == 1)) {
                    this.Manager.Comment("reaching state \'S1519\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2069;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2069 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2497\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2069, "return of NetrLogonControl2, state S2497");
                    this.Manager.Comment("reaching state \'S3339\'");
                    goto label590;
                }
                throw new InvalidOperationException("never reached");
            label590:
;
                goto label591;
            }
            throw new InvalidOperationException("never reached");
        label591:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S920");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S920");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S921");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S921");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S71");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S922");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS70GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S922");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2072;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2072);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2072);
            this.Manager.Comment("reaching state \'S73\'");
            int temp2085 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetPlatformChecker2)));
            if ((temp2085 == 0)) {
                this.Manager.Comment("reaching state \'S434\'");
                bool temp2073;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2073);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2073);
                this.Manager.Comment("reaching state \'S923\'");
                int temp2076 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker1)));
                if ((temp2076 == 0)) {
                    this.Manager.Comment("reaching state \'S1520\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2074;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,3,Valid)\'");
                    temp2074 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2498\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2074, "return of NetrLogonControl2, state S2498");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label592;
                }
                if ((temp2076 == 1)) {
                    this.Manager.Comment("reaching state \'S1521\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2075;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,NoValidDomainNameContained)\'" +
                            "");
                    temp2075 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Checkpoint("MS-NRPC_R10474");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2499\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NO_SUCH_DOMAIN\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NO_SUCH_DOMAIN, temp2075, "return of NetrLogonControl2, state S2499");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label592;
                }
                throw new InvalidOperationException("never reached");
            label592:
;
                goto label595;
            }
            if ((temp2085 == 1)) {
                this.Manager.Comment("reaching state \'S435\'");
                bool temp2077;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2077);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2077);
                this.Manager.Comment("reaching state \'S924\'");
                int temp2080 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker3)));
                if ((temp2080 == 0)) {
                    this.Manager.Comment("reaching state \'S1522\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2078;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,3,Valid)\'");
                    temp2078 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2500\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2078, "return of NetrLogonControl2, state S2500");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label593;
                }
                if ((temp2080 == 1)) {
                    this.Manager.Comment("reaching state \'S1523\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2079;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,Valid)\'");
                    temp2079 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2501\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2079, "return of NetrLogonControl2, state S2501");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label593;
                }
                throw new InvalidOperationException("never reached");
            label593:
;
                goto label595;
            }
            if ((temp2085 == 2)) {
                this.Manager.Comment("reaching state \'S436\'");
                bool temp2081;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2081);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2081);
                this.Manager.Comment("reaching state \'S925\'");
                int temp2084 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker5)));
                if ((temp2084 == 0)) {
                    this.Manager.Comment("reaching state \'S1524\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2082;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2082 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2502\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2082, "return of NetrLogonControl2, state S2502");
                    this.Manager.Comment("reaching state \'S3340\'");
                    goto label594;
                }
                if ((temp2084 == 1)) {
                    this.Manager.Comment("reaching state \'S1525\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2083;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2083 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2503\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2083, "return of NetrLogonControl2, state S2503");
                    this.Manager.Comment("reaching state \'S3341\'");
                    goto label594;
                }
                throw new InvalidOperationException("never reached");
            label594:
;
                goto label595;
            }
            throw new InvalidOperationException("never reached");
        label595:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S923");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S923");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S924");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S924");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S73");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S925");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS72GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S925");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2086;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2086);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2086);
            this.Manager.Comment("reaching state \'S75\'");
            int temp2099 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetPlatformChecker2)));
            if ((temp2099 == 0)) {
                this.Manager.Comment("reaching state \'S437\'");
                bool temp2087;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2087);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2087);
                this.Manager.Comment("reaching state \'S926\'");
                int temp2090 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker1)));
                if ((temp2090 == 0)) {
                    this.Manager.Comment("reaching state \'S1526\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2088;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,3,Valid)\'");
                    temp2088 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2504\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2088, "return of NetrLogonControl2, state S2504");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label596;
                }
                if ((temp2090 == 1)) {
                    this.Manager.Comment("reaching state \'S1527\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2089;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,Valid)\'");
                    temp2089 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2505\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp2089, "return of NetrLogonControl2, state S2505");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label596;
                }
                throw new InvalidOperationException("never reached");
            label596:
;
                goto label599;
            }
            if ((temp2099 == 1)) {
                this.Manager.Comment("reaching state \'S438\'");
                bool temp2091;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2091);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2091);
                this.Manager.Comment("reaching state \'S927\'");
                int temp2094 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker3)));
                if ((temp2094 == 0)) {
                    this.Manager.Comment("reaching state \'S1528\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2092;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,3,Valid)\'");
                    temp2092 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2506\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2092, "return of NetrLogonControl2, state S2506");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label597;
                }
                if ((temp2094 == 1)) {
                    this.Manager.Comment("reaching state \'S1529\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2093;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,3,Valid)\'");
                    temp2093 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2507\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2093, "return of NetrLogonControl2, state S2507");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label597;
                }
                throw new InvalidOperationException("never reached");
            label597:
;
                goto label599;
            }
            if ((temp2099 == 2)) {
                this.Manager.Comment("reaching state \'S439\'");
                bool temp2095;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2095);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2095);
                this.Manager.Comment("reaching state \'S928\'");
                int temp2098 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker5)));
                if ((temp2098 == 0)) {
                    this.Manager.Comment("reaching state \'S1530\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2096;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2096 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2508\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2096, "return of NetrLogonControl2, state S2508");
                    this.Manager.Comment("reaching state \'S3342\'");
                    goto label598;
                }
                if ((temp2098 == 1)) {
                    this.Manager.Comment("reaching state \'S1531\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2097;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2097 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2509\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2097, "return of NetrLogonControl2, state S2509");
                    this.Manager.Comment("reaching state \'S3343\'");
                    goto label598;
                }
                throw new InvalidOperationException("never reached");
            label598:
;
                goto label599;
            }
            throw new InvalidOperationException("never reached");
        label599:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S926");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S926");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S927");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S927");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S75");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S928");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS74GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S928");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2100;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2100);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2100);
            this.Manager.Comment("reaching state \'S77\'");
            int temp2113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetPlatformChecker2)));
            if ((temp2113 == 0)) {
                this.Manager.Comment("reaching state \'S440\'");
                bool temp2101;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2101);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2101);
                this.Manager.Comment("reaching state \'S929\'");
                int temp2104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker1)));
                if ((temp2104 == 0)) {
                    this.Manager.Comment("reaching state \'S1532\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2102;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,Valid)\'");
                    temp2102 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2510\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2102, "return of NetrLogonControl2, state S2510");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label600;
                }
                if ((temp2104 == 1)) {
                    this.Manager.Comment("reaching state \'S1533\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2103;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,Valid)\'");
                    temp2103 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2511\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp2103, "return of NetrLogonControl2, state S2511");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label600;
                }
                throw new InvalidOperationException("never reached");
            label600:
;
                goto label603;
            }
            if ((temp2113 == 1)) {
                this.Manager.Comment("reaching state \'S441\'");
                bool temp2105;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2105);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2105);
                this.Manager.Comment("reaching state \'S930\'");
                int temp2108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker3)));
                if ((temp2108 == 0)) {
                    this.Manager.Comment("reaching state \'S1534\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2106;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,4,Valid)\'");
                    temp2106 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2512\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2106, "return of NetrLogonControl2, state S2512");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label601;
                }
                if ((temp2108 == 1)) {
                    this.Manager.Comment("reaching state \'S1535\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2107;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,3,Valid)\'");
                    temp2107 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2513\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2107, "return of NetrLogonControl2, state S2513");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label601;
                }
                throw new InvalidOperationException("never reached");
            label601:
;
                goto label603;
            }
            if ((temp2113 == 2)) {
                this.Manager.Comment("reaching state \'S442\'");
                bool temp2109;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2109);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2109);
                this.Manager.Comment("reaching state \'S931\'");
                int temp2112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker5)));
                if ((temp2112 == 0)) {
                    this.Manager.Comment("reaching state \'S1536\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2110;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2110 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2514\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2110, "return of NetrLogonControl2, state S2514");
                    this.Manager.Comment("reaching state \'S3344\'");
                    goto label602;
                }
                if ((temp2112 == 1)) {
                    this.Manager.Comment("reaching state \'S1537\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2111;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2111 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2515\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2111, "return of NetrLogonControl2, state S2515");
                    this.Manager.Comment("reaching state \'S3345\'");
                    goto label602;
                }
                throw new InvalidOperationException("never reached");
            label602:
;
                goto label603;
            }
            throw new InvalidOperationException("never reached");
        label603:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S929");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S929");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S930");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S930");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S77");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S931");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS76GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S931");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2114;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2114);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2114);
            this.Manager.Comment("reaching state \'S79\'");
            int temp2127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetPlatformChecker2)));
            if ((temp2127 == 0)) {
                this.Manager.Comment("reaching state \'S443\'");
                bool temp2115;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2115);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2115);
                this.Manager.Comment("reaching state \'S932\'");
                int temp2118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker1)));
                if ((temp2118 == 0)) {
                    this.Manager.Comment("reaching state \'S1538\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2116;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,Valid)\'");
                    temp2116 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2516\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2116, "return of NetrLogonControl2, state S2516");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label604;
                }
                if ((temp2118 == 1)) {
                    this.Manager.Comment("reaching state \'S1539\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2117;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,3,Valid)\'");
                    temp2117 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2517\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_LEVEL\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_LEVEL, temp2117, "return of NetrLogonControl2, state S2517");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label604;
                }
                throw new InvalidOperationException("never reached");
            label604:
;
                goto label607;
            }
            if ((temp2127 == 1)) {
                this.Manager.Comment("reaching state \'S444\'");
                bool temp2119;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2119);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2119);
                this.Manager.Comment("reaching state \'S933\'");
                int temp2122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker3)));
                if ((temp2122 == 0)) {
                    this.Manager.Comment("reaching state \'S1540\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2120;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,Valid)\'");
                    temp2120 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2518\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2120, "return of NetrLogonControl2, state S2518");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label605;
                }
                if ((temp2122 == 1)) {
                    this.Manager.Comment("reaching state \'S1541\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2121;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,1,Valid)\'");
                    temp2121 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2519\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2121, "return of NetrLogonControl2, state S2519");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label605;
                }
                throw new InvalidOperationException("never reached");
            label605:
;
                goto label607;
            }
            if ((temp2127 == 2)) {
                this.Manager.Comment("reaching state \'S445\'");
                bool temp2123;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2123);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2123);
                this.Manager.Comment("reaching state \'S934\'");
                int temp2126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker5)));
                if ((temp2126 == 0)) {
                    this.Manager.Comment("reaching state \'S1542\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2124;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2124 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2520\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2124, "return of NetrLogonControl2, state S2520");
                    this.Manager.Comment("reaching state \'S3346\'");
                    goto label606;
                }
                if ((temp2126 == 1)) {
                    this.Manager.Comment("reaching state \'S1543\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2125;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2125 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2521\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2125, "return of NetrLogonControl2, state S2521");
                    this.Manager.Comment("reaching state \'S3347\'");
                    goto label606;
                }
                throw new InvalidOperationException("never reached");
            label606:
;
                goto label607;
            }
            throw new InvalidOperationException("never reached");
        label607:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S932");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S932");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S933");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S933");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S79");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S934");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS78GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S934");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8");
            this.Manager.Comment("reaching state \'S8\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2128;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2128);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2128);
            this.Manager.Comment("reaching state \'S9\'");
            int temp2141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetPlatformChecker2)));
            if ((temp2141 == 0)) {
                this.Manager.Comment("reaching state \'S338\'");
                bool temp2129;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2129);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2129);
                this.Manager.Comment("reaching state \'S827\'");
                int temp2132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker1)));
                if ((temp2132 == 0)) {
                    this.Manager.Comment("reaching state \'S1328\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2130;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,NoValidDomainNameContained)" +
                            "\'");
                    temp2130 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2306\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2130, "return of NetrLogonControl2, state S2306");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label608;
                }
                if ((temp2132 == 1)) {
                    this.Manager.Comment("reaching state \'S1329\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2131;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,1,Valid)\'");
                    temp2131 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2307\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2131, "return of NetrLogonControl2, state S2307");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label608;
                }
                throw new InvalidOperationException("never reached");
            label608:
;
                goto label611;
            }
            if ((temp2141 == 1)) {
                this.Manager.Comment("reaching state \'S339\'");
                bool temp2133;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2133);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2133);
                this.Manager.Comment("reaching state \'S828\'");
                int temp2136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker3)));
                if ((temp2136 == 0)) {
                    this.Manager.Comment("reaching state \'S1330\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2134;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,NoValidDomainNameContained)" +
                            "\'");
                    temp2134 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2308\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2134, "return of NetrLogonControl2, state S2308");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label609;
                }
                if ((temp2136 == 1)) {
                    this.Manager.Comment("reaching state \'S1331\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2135;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,1,Valid)\'");
                    temp2135 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2309\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2135, "return of NetrLogonControl2, state S2309");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label609;
                }
                throw new InvalidOperationException("never reached");
            label609:
;
                goto label611;
            }
            if ((temp2141 == 2)) {
                this.Manager.Comment("reaching state \'S340\'");
                bool temp2137;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2137);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2137);
                this.Manager.Comment("reaching state \'S829\'");
                int temp2140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker5)));
                if ((temp2140 == 0)) {
                    this.Manager.Comment("reaching state \'S1332\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2138;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2138 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2310\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2138, "return of NetrLogonControl2, state S2310");
                    this.Manager.Comment("reaching state \'S3276\'");
                    goto label610;
                }
                if ((temp2140 == 1)) {
                    this.Manager.Comment("reaching state \'S1333\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2139;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2139 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2311\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2139, "return of NetrLogonControl2, state S2311");
                    this.Manager.Comment("reaching state \'S3277\'");
                    goto label610;
                }
                throw new InvalidOperationException("never reached");
            label610:
;
                goto label611;
            }
            throw new InvalidOperationException("never reached");
        label611:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S827");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S827");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S828");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S828");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S9");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S829");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS8GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S829");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80");
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2142;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2142);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2142);
            this.Manager.Comment("reaching state \'S81\'");
            int temp2155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetPlatformChecker2)));
            if ((temp2155 == 0)) {
                this.Manager.Comment("reaching state \'S446\'");
                bool temp2143;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2143);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2143);
                this.Manager.Comment("reaching state \'S935\'");
                int temp2146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker1)));
                if ((temp2146 == 0)) {
                    this.Manager.Comment("reaching state \'S1544\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2144;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,Valid)\'");
                    temp2144 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2522\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2144, "return of NetrLogonControl2, state S2522");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label612;
                }
                if ((temp2146 == 1)) {
                    this.Manager.Comment("reaching state \'S1545\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2145;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,2,Valid)\'");
                    temp2145 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2523\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2145, "return of NetrLogonControl2, state S2523");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label612;
                }
                throw new InvalidOperationException("never reached");
            label612:
;
                goto label615;
            }
            if ((temp2155 == 1)) {
                this.Manager.Comment("reaching state \'S447\'");
                bool temp2147;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2147);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2147);
                this.Manager.Comment("reaching state \'S936\'");
                int temp2150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker3)));
                if ((temp2150 == 0)) {
                    this.Manager.Comment("reaching state \'S1546\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2148;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,6,1,Valid)\'");
                    temp2148 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 6u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2524\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2148, "return of NetrLogonControl2, state S2524");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label613;
                }
                if ((temp2150 == 1)) {
                    this.Manager.Comment("reaching state \'S1547\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2149;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,1,Valid)\'");
                    temp2149 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2525\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2149, "return of NetrLogonControl2, state S2525");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label613;
                }
                throw new InvalidOperationException("never reached");
            label613:
;
                goto label615;
            }
            if ((temp2155 == 2)) {
                this.Manager.Comment("reaching state \'S448\'");
                bool temp2151;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2151);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2151);
                this.Manager.Comment("reaching state \'S937\'");
                int temp2154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker5)));
                if ((temp2154 == 0)) {
                    this.Manager.Comment("reaching state \'S1548\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2152;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2152 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2526\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2152, "return of NetrLogonControl2, state S2526");
                    this.Manager.Comment("reaching state \'S3348\'");
                    goto label614;
                }
                if ((temp2154 == 1)) {
                    this.Manager.Comment("reaching state \'S1549\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2153;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2153 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2527\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2153, "return of NetrLogonControl2, state S2527");
                    this.Manager.Comment("reaching state \'S3349\'");
                    goto label614;
                }
                throw new InvalidOperationException("never reached");
            label614:
;
                goto label615;
            }
            throw new InvalidOperationException("never reached");
        label615:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S935");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S935");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S936");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S936");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S81");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S937");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS80GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S937");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2156;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2156);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2156);
            this.Manager.Comment("reaching state \'S83\'");
            int temp2169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetPlatformChecker2)));
            if ((temp2169 == 0)) {
                this.Manager.Comment("reaching state \'S449\'");
                bool temp2157;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2157);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2157);
                this.Manager.Comment("reaching state \'S938\'");
                int temp2160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker1)));
                if ((temp2160 == 0)) {
                    this.Manager.Comment("reaching state \'S1550\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2158;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp2158 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2528\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2158, "return of NetrLogonControl2, state S2528");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label616;
                }
                if ((temp2160 == 1)) {
                    this.Manager.Comment("reaching state \'S1551\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2159;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,2,Valid)\'");
                    temp2159 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2529\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2159, "return of NetrLogonControl2, state S2529");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label616;
                }
                throw new InvalidOperationException("never reached");
            label616:
;
                goto label619;
            }
            if ((temp2169 == 1)) {
                this.Manager.Comment("reaching state \'S450\'");
                bool temp2161;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2161);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2161);
                this.Manager.Comment("reaching state \'S939\'");
                int temp2164 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker3)));
                if ((temp2164 == 0)) {
                    this.Manager.Comment("reaching state \'S1552\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2162;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,2,Valid)\'");
                    temp2162 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2530\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2162, "return of NetrLogonControl2, state S2530");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label617;
                }
                if ((temp2164 == 1)) {
                    this.Manager.Comment("reaching state \'S1553\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2163;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65533,4,Valid)\'");
                    temp2163 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65533u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2531\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2163, "return of NetrLogonControl2, state S2531");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label617;
                }
                throw new InvalidOperationException("never reached");
            label617:
;
                goto label619;
            }
            if ((temp2169 == 2)) {
                this.Manager.Comment("reaching state \'S451\'");
                bool temp2165;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2165);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2165);
                this.Manager.Comment("reaching state \'S940\'");
                int temp2168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker5)));
                if ((temp2168 == 0)) {
                    this.Manager.Comment("reaching state \'S1554\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2166;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2166 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2532\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2166, "return of NetrLogonControl2, state S2532");
                    this.Manager.Comment("reaching state \'S3350\'");
                    goto label618;
                }
                if ((temp2168 == 1)) {
                    this.Manager.Comment("reaching state \'S1555\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2167;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2167 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2533\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2167, "return of NetrLogonControl2, state S2533");
                    this.Manager.Comment("reaching state \'S3351\'");
                    goto label618;
                }
                throw new InvalidOperationException("never reached");
            label618:
;
                goto label619;
            }
            throw new InvalidOperationException("never reached");
        label619:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S938");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S938");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S939");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S939");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S83");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S940");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS82GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S940");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2170;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2170);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2170);
            this.Manager.Comment("reaching state \'S85\'");
            int temp2183 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetPlatformChecker2)));
            if ((temp2183 == 0)) {
                this.Manager.Comment("reaching state \'S452\'");
                bool temp2171;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2171);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2171);
                this.Manager.Comment("reaching state \'S941\'");
                int temp2174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker1)));
                if ((temp2174 == 0)) {
                    this.Manager.Comment("reaching state \'S1556\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2172;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,2,Valid)\'");
                    temp2172 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2534\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2172, "return of NetrLogonControl2, state S2534");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label620;
                }
                if ((temp2174 == 1)) {
                    this.Manager.Comment("reaching state \'S1557\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2173;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,2,Valid)\'");
                    temp2173 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2535\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2173, "return of NetrLogonControl2, state S2535");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label620;
                }
                throw new InvalidOperationException("never reached");
            label620:
;
                goto label623;
            }
            if ((temp2183 == 1)) {
                this.Manager.Comment("reaching state \'S453\'");
                bool temp2175;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2175);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2175);
                this.Manager.Comment("reaching state \'S942\'");
                int temp2178 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker3)));
                if ((temp2178 == 0)) {
                    this.Manager.Comment("reaching state \'S1558\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2176;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,2,Valid)\'");
                    temp2176 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2536\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2176, "return of NetrLogonControl2, state S2536");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label621;
                }
                if ((temp2178 == 1)) {
                    this.Manager.Comment("reaching state \'S1559\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2177;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,4,Valid)\'");
                    temp2177 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2537\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2177, "return of NetrLogonControl2, state S2537");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label621;
                }
                throw new InvalidOperationException("never reached");
            label621:
;
                goto label623;
            }
            if ((temp2183 == 2)) {
                this.Manager.Comment("reaching state \'S454\'");
                bool temp2179;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2179);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2179);
                this.Manager.Comment("reaching state \'S943\'");
                int temp2182 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker5)));
                if ((temp2182 == 0)) {
                    this.Manager.Comment("reaching state \'S1560\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2180;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2180 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2538\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2180, "return of NetrLogonControl2, state S2538");
                    this.Manager.Comment("reaching state \'S3352\'");
                    goto label622;
                }
                if ((temp2182 == 1)) {
                    this.Manager.Comment("reaching state \'S1561\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2181;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2181 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2539\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2181, "return of NetrLogonControl2, state S2539");
                    this.Manager.Comment("reaching state \'S3353\'");
                    goto label622;
                }
                throw new InvalidOperationException("never reached");
            label622:
;
                goto label623;
            }
            throw new InvalidOperationException("never reached");
        label623:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S941");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S941");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S942");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S942");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S85");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S943");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS84GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S943");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2184;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2184);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2184);
            this.Manager.Comment("reaching state \'S87\'");
            int temp2197 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetPlatformChecker2)));
            if ((temp2197 == 0)) {
                this.Manager.Comment("reaching state \'S455\'");
                bool temp2185;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2185);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2185);
                this.Manager.Comment("reaching state \'S944\'");
                int temp2188 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker1)));
                if ((temp2188 == 0)) {
                    this.Manager.Comment("reaching state \'S1562\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2186;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,3,Valid)\'");
                    temp2186 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2540\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2186, "return of NetrLogonControl2, state S2540");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label624;
                }
                if ((temp2188 == 1)) {
                    this.Manager.Comment("reaching state \'S1563\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2187;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,5,2,Valid)\'");
                    temp2187 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 5u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2541\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2187, "return of NetrLogonControl2, state S2541");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label624;
                }
                throw new InvalidOperationException("never reached");
            label624:
;
                goto label627;
            }
            if ((temp2197 == 1)) {
                this.Manager.Comment("reaching state \'S456\'");
                bool temp2189;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2189);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2189);
                this.Manager.Comment("reaching state \'S945\'");
                int temp2192 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker3)));
                if ((temp2192 == 0)) {
                    this.Manager.Comment("reaching state \'S1564\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2190;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65532,3,Valid)\'");
                    temp2190 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65532u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2542\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2190, "return of NetrLogonControl2, state S2542");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label625;
                }
                if ((temp2192 == 1)) {
                    this.Manager.Comment("reaching state \'S1565\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2191;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65535,4,Valid)\'");
                    temp2191 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65535u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R103964");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2543\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2191, "return of NetrLogonControl2, state S2543");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label625;
                }
                throw new InvalidOperationException("never reached");
            label625:
;
                goto label627;
            }
            if ((temp2197 == 2)) {
                this.Manager.Comment("reaching state \'S457\'");
                bool temp2193;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2193);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2193);
                this.Manager.Comment("reaching state \'S946\'");
                int temp2196 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker5)));
                if ((temp2196 == 0)) {
                    this.Manager.Comment("reaching state \'S1566\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2194;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2194 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2544\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2194, "return of NetrLogonControl2, state S2544");
                    this.Manager.Comment("reaching state \'S3354\'");
                    goto label626;
                }
                if ((temp2196 == 1)) {
                    this.Manager.Comment("reaching state \'S1567\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2195;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2195 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2545\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2195, "return of NetrLogonControl2, state S2545");
                    this.Manager.Comment("reaching state \'S3355\'");
                    goto label626;
                }
                throw new InvalidOperationException("never reached");
            label626:
;
                goto label627;
            }
            throw new InvalidOperationException("never reached");
        label627:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S944");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S944");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S945");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S945");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S87");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S946");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS86GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S946");
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2198;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2198);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2198);
            this.Manager.Comment("reaching state \'S89\'");
            int temp2211 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetPlatformChecker2)));
            if ((temp2211 == 0)) {
                this.Manager.Comment("reaching state \'S458\'");
                bool temp2199;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2199);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2199);
                this.Manager.Comment("reaching state \'S947\'");
                int temp2202 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker1)));
                if ((temp2202 == 0)) {
                    this.Manager.Comment("reaching state \'S1568\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2200;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,3,Valid)\'");
                    temp2200 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2546\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2200, "return of NetrLogonControl2, state S2546");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label628;
                }
                if ((temp2202 == 1)) {
                    this.Manager.Comment("reaching state \'S1569\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2201;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,2,Valid)\'");
                    temp2201 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2547\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2201, "return of NetrLogonControl2, state S2547");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label628;
                }
                throw new InvalidOperationException("never reached");
            label628:
;
                goto label631;
            }
            if ((temp2211 == 1)) {
                this.Manager.Comment("reaching state \'S459\'");
                bool temp2203;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2203);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2203);
                this.Manager.Comment("reaching state \'S948\'");
                int temp2206 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker3)));
                if ((temp2206 == 0)) {
                    this.Manager.Comment("reaching state \'S1570\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2204;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,3,Valid)\'");
                    temp2204 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2548\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2204, "return of NetrLogonControl2, state S2548");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label629;
                }
                if ((temp2206 == 1)) {
                    this.Manager.Comment("reaching state \'S1571\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2205;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,9,4,Valid)\'");
                    temp2205 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 9u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2549\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2205, "return of NetrLogonControl2, state S2549");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label629;
                }
                throw new InvalidOperationException("never reached");
            label629:
;
                goto label631;
            }
            if ((temp2211 == 2)) {
                this.Manager.Comment("reaching state \'S460\'");
                bool temp2207;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2207);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2207);
                this.Manager.Comment("reaching state \'S949\'");
                int temp2210 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker5)));
                if ((temp2210 == 0)) {
                    this.Manager.Comment("reaching state \'S1572\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2208;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2208 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2550\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2208, "return of NetrLogonControl2, state S2550");
                    this.Manager.Comment("reaching state \'S3356\'");
                    goto label630;
                }
                if ((temp2210 == 1)) {
                    this.Manager.Comment("reaching state \'S1573\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2209;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2209 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2551\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2209, "return of NetrLogonControl2, state S2551");
                    this.Manager.Comment("reaching state \'S3357\'");
                    goto label630;
                }
                throw new InvalidOperationException("never reached");
            label630:
;
                goto label631;
            }
            throw new InvalidOperationException("never reached");
        label631:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S947");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S947");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S948");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S948");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S89");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S949");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS88GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S949");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2212;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2212);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2212);
            this.Manager.Comment("reaching state \'S91\'");
            int temp2225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetPlatformChecker2)));
            if ((temp2225 == 0)) {
                this.Manager.Comment("reaching state \'S461\'");
                bool temp2213;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2213);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2213);
                this.Manager.Comment("reaching state \'S950\'");
                int temp2216 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker1)));
                if ((temp2216 == 0)) {
                    this.Manager.Comment("reaching state \'S1574\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2214;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,2,Valid)\'");
                    temp2214 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2552\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2214, "return of NetrLogonControl2, state S2552");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label632;
                }
                if ((temp2216 == 1)) {
                    this.Manager.Comment("reaching state \'S1575\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2215;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,1,2,Valid)\'");
                    temp2215 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 1u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104125");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2553\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2215, "return of NetrLogonControl2, state S2553");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label632;
                }
                throw new InvalidOperationException("never reached");
            label632:
;
                goto label635;
            }
            if ((temp2225 == 1)) {
                this.Manager.Comment("reaching state \'S462\'");
                bool temp2217;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2217);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2217);
                this.Manager.Comment("reaching state \'S951\'");
                int temp2220 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker3)));
                if ((temp2220 == 0)) {
                    this.Manager.Comment("reaching state \'S1576\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2218;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,2,Valid)\'");
                    temp2218 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2554\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2218, "return of NetrLogonControl2, state S2554");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label633;
                }
                if ((temp2220 == 1)) {
                    this.Manager.Comment("reaching state \'S1577\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2219;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2219 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2555\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2219, "return of NetrLogonControl2, state S2555");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label633;
                }
                throw new InvalidOperationException("never reached");
            label633:
;
                goto label635;
            }
            if ((temp2225 == 2)) {
                this.Manager.Comment("reaching state \'S463\'");
                bool temp2221;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2221);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2221);
                this.Manager.Comment("reaching state \'S952\'");
                int temp2224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker5)));
                if ((temp2224 == 0)) {
                    this.Manager.Comment("reaching state \'S1578\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2222;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2222 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2556\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2222, "return of NetrLogonControl2, state S2556");
                    this.Manager.Comment("reaching state \'S3358\'");
                    goto label634;
                }
                if ((temp2224 == 1)) {
                    this.Manager.Comment("reaching state \'S1579\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2223;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2223 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2557\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2223, "return of NetrLogonControl2, state S2557");
                    this.Manager.Comment("reaching state \'S3359\'");
                    goto label634;
                }
                throw new InvalidOperationException("never reached");
            label634:
;
                goto label635;
            }
            throw new InvalidOperationException("never reached");
        label635:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S950");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S950");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S951");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S951");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S91");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S952");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS90GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S952");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2226;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2226);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2226);
            this.Manager.Comment("reaching state \'S93\'");
            int temp2239 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetPlatformChecker2)));
            if ((temp2239 == 0)) {
                this.Manager.Comment("reaching state \'S464\'");
                bool temp2227;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2227);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2227);
                this.Manager.Comment("reaching state \'S953\'");
                int temp2230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker1)));
                if ((temp2230 == 0)) {
                    this.Manager.Comment("reaching state \'S1580\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2228;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,2,Valid)\'");
                    temp2228 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2558\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2228, "return of NetrLogonControl2, state S2558");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label636;
                }
                if ((temp2230 == 1)) {
                    this.Manager.Comment("reaching state \'S1581\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2229;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,8,2,Valid)\'");
                    temp2229 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 8u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104084");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2559\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2229, "return of NetrLogonControl2, state S2559");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label636;
                }
                throw new InvalidOperationException("never reached");
            label636:
;
                goto label639;
            }
            if ((temp2239 == 1)) {
                this.Manager.Comment("reaching state \'S465\'");
                bool temp2231;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2231);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2231);
                this.Manager.Comment("reaching state \'S954\'");
                int temp2234 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker3)));
                if ((temp2234 == 0)) {
                    this.Manager.Comment("reaching state \'S1582\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2232;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,2,Valid)\'");
                    temp2232 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2560\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2232, "return of NetrLogonControl2, state S2560");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label637;
                }
                if ((temp2234 == 1)) {
                    this.Manager.Comment("reaching state \'S1583\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2233;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,4,Valid)\'");
                    temp2233 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2561\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2233, "return of NetrLogonControl2, state S2561");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label637;
                }
                throw new InvalidOperationException("never reached");
            label637:
;
                goto label639;
            }
            if ((temp2239 == 2)) {
                this.Manager.Comment("reaching state \'S466\'");
                bool temp2235;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2235);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2235);
                this.Manager.Comment("reaching state \'S955\'");
                int temp2238 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker5)));
                if ((temp2238 == 0)) {
                    this.Manager.Comment("reaching state \'S1584\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2236;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2236 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2562\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2236, "return of NetrLogonControl2, state S2562");
                    this.Manager.Comment("reaching state \'S3360\'");
                    goto label638;
                }
                if ((temp2238 == 1)) {
                    this.Manager.Comment("reaching state \'S1585\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2237;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2237 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2563\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2237, "return of NetrLogonControl2, state S2563");
                    this.Manager.Comment("reaching state \'S3361\'");
                    goto label638;
                }
                throw new InvalidOperationException("never reached");
            label638:
;
                goto label639;
            }
            throw new InvalidOperationException("never reached");
        label639:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S953");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S953");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S954");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S954");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S93");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S955");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS92GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S955");
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2240;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2240);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2240);
            this.Manager.Comment("reaching state \'S95\'");
            int temp2253 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetPlatformChecker2)));
            if ((temp2253 == 0)) {
                this.Manager.Comment("reaching state \'S467\'");
                bool temp2241;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2241);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2241);
                this.Manager.Comment("reaching state \'S956\'");
                int temp2244 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker1)));
                if ((temp2244 == 0)) {
                    this.Manager.Comment("reaching state \'S1586\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2242;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,Valid)\'");
                    temp2242 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2564\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2242, "return of NetrLogonControl2, state S2564");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label640;
                }
                if ((temp2244 == 1)) {
                    this.Manager.Comment("reaching state \'S1587\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2243;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,2,Valid)\'");
                    temp2243 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2565\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2243, "return of NetrLogonControl2, state S2565");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label640;
                }
                throw new InvalidOperationException("never reached");
            label640:
;
                goto label643;
            }
            if ((temp2253 == 1)) {
                this.Manager.Comment("reaching state \'S468\'");
                bool temp2245;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2245);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2245);
                this.Manager.Comment("reaching state \'S957\'");
                int temp2248 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker3)));
                if ((temp2248 == 0)) {
                    this.Manager.Comment("reaching state \'S1588\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2246;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,4,Valid)\'");
                    temp2246 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2566\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2246, "return of NetrLogonControl2, state S2566");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label641;
                }
                if ((temp2248 == 1)) {
                    this.Manager.Comment("reaching state \'S1589\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2247;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,1,Valid)\'");
                    temp2247 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104136");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2567\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2247, "return of NetrLogonControl2, state S2567");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label641;
                }
                throw new InvalidOperationException("never reached");
            label641:
;
                goto label643;
            }
            if ((temp2253 == 2)) {
                this.Manager.Comment("reaching state \'S469\'");
                bool temp2249;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2249);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2249);
                this.Manager.Comment("reaching state \'S958\'");
                int temp2252 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker5)));
                if ((temp2252 == 0)) {
                    this.Manager.Comment("reaching state \'S1590\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2250;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2250 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2568\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2250, "return of NetrLogonControl2, state S2568");
                    this.Manager.Comment("reaching state \'S3362\'");
                    goto label642;
                }
                if ((temp2252 == 1)) {
                    this.Manager.Comment("reaching state \'S1591\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2251;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2251 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2569\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2251, "return of NetrLogonControl2, state S2569");
                    this.Manager.Comment("reaching state \'S3363\'");
                    goto label642;
                }
                throw new InvalidOperationException("never reached");
            label642:
;
                goto label643;
            }
            throw new InvalidOperationException("never reached");
        label643:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S956");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S956");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S957");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S957");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S95");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S958");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS94GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S958");
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2254;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2254);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2254);
            this.Manager.Comment("reaching state \'S97\'");
            int temp2267 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetPlatformChecker2)));
            if ((temp2267 == 0)) {
                this.Manager.Comment("reaching state \'S470\'");
                bool temp2255;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2255);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2255);
                this.Manager.Comment("reaching state \'S959\'");
                int temp2258 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker1)));
                if ((temp2258 == 0)) {
                    this.Manager.Comment("reaching state \'S1592\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2256;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,4,Valid)\'");
                    temp2256 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2570\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2256, "return of NetrLogonControl2, state S2570");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label644;
                }
                if ((temp2258 == 1)) {
                    this.Manager.Comment("reaching state \'S1593\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2257;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,2,Valid)\'");
                    temp2257 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 2u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2571\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2257, "return of NetrLogonControl2, state S2571");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label644;
                }
                throw new InvalidOperationException("never reached");
            label644:
;
                goto label647;
            }
            if ((temp2267 == 1)) {
                this.Manager.Comment("reaching state \'S471\'");
                bool temp2259;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2259);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2259);
                this.Manager.Comment("reaching state \'S960\'");
                int temp2262 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker3)));
                if ((temp2262 == 0)) {
                    this.Manager.Comment("reaching state \'S1594\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2260;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,4,4,Valid)\'");
                    temp2260 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 4u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2572\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2260, "return of NetrLogonControl2, state S2572");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label645;
                }
                if ((temp2262 == 1)) {
                    this.Manager.Comment("reaching state \'S1595\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2261;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,7,1,Valid)\'");
                    temp2261 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 7u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2573\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2261, "return of NetrLogonControl2, state S2573");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label645;
                }
                throw new InvalidOperationException("never reached");
            label645:
;
                goto label647;
            }
            if ((temp2267 == 2)) {
                this.Manager.Comment("reaching state \'S472\'");
                bool temp2263;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2263);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2263);
                this.Manager.Comment("reaching state \'S961\'");
                int temp2266 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker5)));
                if ((temp2266 == 0)) {
                    this.Manager.Comment("reaching state \'S1596\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2264;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2264 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2574\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2264, "return of NetrLogonControl2, state S2574");
                    this.Manager.Comment("reaching state \'S3364\'");
                    goto label646;
                }
                if ((temp2266 == 1)) {
                    this.Manager.Comment("reaching state \'S1597\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2265;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2265 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2575\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2265, "return of NetrLogonControl2, state S2575");
                    this.Manager.Comment("reaching state \'S3365\'");
                    goto label646;
                }
                throw new InvalidOperationException("never reached");
            label646:
;
                goto label647;
            }
            throw new InvalidOperationException("never reached");
        label647:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S959");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S959");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S960");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S960");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S97");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S961");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS96GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S961");
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98() {
            this.Manager.BeginTest("Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.Nrpc.PlatformType temp2268;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp2268);
            this.Manager.AddReturn(GetPlatformInfo, null, temp2268);
            this.Manager.Comment("reaching state \'S99\'");
            int temp2281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetPlatformChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetPlatformChecker1)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetPlatformInfo, null, new GetPlatformDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetPlatformChecker2)));
            if ((temp2281 == 0)) {
                this.Manager.Comment("reaching state \'S473\'");
                bool temp2269;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2269);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2269);
                this.Manager.Comment("reaching state \'S962\'");
                int temp2272 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker1)));
                if ((temp2272 == 0)) {
                    this.Manager.Comment("reaching state \'S1598\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2270;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,4,Valid)\'");
                    temp2270 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2576\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2270, "return of NetrLogonControl2, state S2576");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3266();
                    goto label648;
                }
                if ((temp2272 == 1)) {
                    this.Manager.Comment("reaching state \'S1599\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2271;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,11,3,Valid)\'");
                    temp2271 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 11u, 3u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2577\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_NOT_SUPPORTED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_NOT_SUPPORTED, temp2271, "return of NetrLogonControl2, state S2577");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3267();
                    goto label648;
                }
                throw new InvalidOperationException("never reached");
            label648:
;
                goto label651;
            }
            if ((temp2281 == 1)) {
                this.Manager.Comment("reaching state \'S474\'");
                bool temp2273;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2273);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2273);
                this.Manager.Comment("reaching state \'S963\'");
                int temp2276 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker2)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker3)));
                if ((temp2276 == 0)) {
                    this.Manager.Comment("reaching state \'S1600\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2274;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,2,4,Valid)\'");
                    temp2274 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 2u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Comment("reaching state \'S2578\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2274, "return of NetrLogonControl2, state S2578");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3268();
                    goto label649;
                }
                if ((temp2276 == 1)) {
                    this.Manager.Comment("reaching state \'S1601\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2275;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,12,1,Valid)\'");
                    temp2275 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 12u, 1u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104118");
                    this.Manager.Comment("reaching state \'S2579\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.Nrpc.HRESULT)(0)), temp2275, "return of NetrLogonControl2, state S2579");
                    Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS3269();
                    goto label649;
                }
                throw new InvalidOperationException("never reached");
            label649:
;
                goto label651;
            }
            if ((temp2281 == 2)) {
                this.Manager.Comment("reaching state \'S475\'");
                bool temp2277;
                this.Manager.Comment("executing step \'call GetClientAccountType(out _)\'");
                this.INrpcServerAdapterInstance.GetClientAccountType(out temp2277);
                this.Manager.AddReturn(GetClientAccountTypeInfo, null, temp2277);
                this.Manager.Comment("reaching state \'S964\'");
                int temp2280 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker4)), new ExpectedReturn(Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDc.GetClientAccountTypeInfo, null, new GetClientAccountTypeDelegate1(this.Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker5)));
                if ((temp2280 == 0)) {
                    this.Manager.Comment("reaching state \'S1602\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2278;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,65534,4,Valid)\'");
                    temp2278 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 65534u, 4u, Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType.Valid);
                    this.Manager.Checkpoint("MS-NRPC_R104123");
                    this.Manager.Checkpoint("MS-NRPC_R104119");
                    this.Manager.Comment("reaching state \'S2580\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/ERROR_INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.ERROR_INVALID_PARAMETER, temp2278, "return of NetrLogonControl2, state S2580");
                    this.Manager.Comment("reaching state \'S3366\'");
                    goto label650;
                }
                if ((temp2280 == 1)) {
                    this.Manager.Comment("reaching state \'S1603\'");
                    Microsoft.Protocols.TestSuites.Nrpc.HRESULT temp2279;
                    this.Manager.Comment("executing step \'call NetrLogonControl2(PrimaryDc,10,1,NoValidDomainNameContained)" +
                            "\'");
                    temp2279 = this.INrpcServerAdapterInstance.NetrLogonControl2(Microsoft.Protocols.TestSuites.Nrpc.ComputerType.PrimaryDc, 10u, 1u, ((Microsoft.Protocols.TestSuites.Nrpc.NetlogonControlDataInformationType)(1)));
                    this.Manager.Comment("reaching state \'S2581\'");
                    this.Manager.Comment("checking step \'return NetrLogonControl2/STATUS_ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.HRESULT>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.HRESULT.STATUS_ACCESS_DENIED, temp2279, "return of NetrLogonControl2, state S2581");
                    this.Manager.Comment("reaching state \'S3367\'");
                    goto label650;
                }
                throw new InvalidOperationException("never reached");
            label650:
;
                goto label651;
            }
            throw new InvalidOperationException("never reached");
        label651:
;
            this.Manager.EndTest();
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetPlatformChecker(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out NonWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.NonWindows, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S962");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker1(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S962");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetPlatformChecker1(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker2(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S963");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker3(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S963");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetPlatformChecker2(Microsoft.Protocols.TestSuites.Nrpc.PlatformType sutPlatform) {
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.Nrpc.PlatformType.WindowsServer2008R2, sutPlatform, "sutPlatform of GetPlatform, state S99");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker4(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isAdministrator, "isAdministrator of GetClientAccountType, state S964");
        }
        
        private void Test_QueryAndControlNetlogonBehavior_NetrLogonControl2_PrimaryDcS98GetClientAccountTypeChecker5(bool isAdministrator) {
            this.Manager.Comment("checking step \'return GetClientAccountType/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isAdministrator, "isAdministrator of GetClientAccountType, state S964");
        }
        #endregion
    }
}
